// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClusterStatus.proto

package org.hbase.async.generated;

public final class ClusterStatusPB {
  private ClusterStatusPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface RegionStateOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .RegionInfo region_info = 1;
    /**
     * <code>required .RegionInfo region_info = 1;</code>
     */
    boolean hasRegionInfo();
    /**
     * <code>required .RegionInfo region_info = 1;</code>
     */
    org.hbase.async.generated.HBasePB.RegionInfo getRegionInfo();

    // required .RegionState.State state = 2;
    /**
     * <code>required .RegionState.State state = 2;</code>
     */
    boolean hasState();
    /**
     * <code>required .RegionState.State state = 2;</code>
     */
    org.hbase.async.generated.ClusterStatusPB.RegionState.State getState();

    // optional uint64 stamp = 3;
    /**
     * <code>optional uint64 stamp = 3;</code>
     */
    boolean hasStamp();
    /**
     * <code>optional uint64 stamp = 3;</code>
     */
    long getStamp();
  }
  /**
   * Protobuf type {@code RegionState}
   */
  public static final class RegionState extends
      com.google.protobuf.GeneratedMessageLite
      implements RegionStateOrBuilder {
    // Use RegionState.newBuilder() to construct.
    private RegionState(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RegionState(boolean noInit) {}

    private static final RegionState defaultInstance;
    public static RegionState getDefaultInstance() {
      return defaultInstance;
    }

    public RegionState getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RegionState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.hbase.async.generated.HBasePB.RegionInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = regionInfo_.toBuilder();
              }
              regionInfo_ = input.readMessage(org.hbase.async.generated.HBasePB.RegionInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(regionInfo_);
                regionInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              org.hbase.async.generated.ClusterStatusPB.RegionState.State value = org.hbase.async.generated.ClusterStatusPB.RegionState.State.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000002;
                state_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              stamp_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RegionState> PARSER =
        new com.google.protobuf.AbstractParser<RegionState>() {
      public RegionState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegionState(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegionState> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code RegionState.State}
     */
    public enum State
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>OFFLINE = 0;</code>
       *
       * <pre>
       * region is in an offline state
       * </pre>
       */
      OFFLINE(0, 0),
      /**
       * <code>PENDING_OPEN = 1;</code>
       *
       * <pre>
       * sent rpc to server to open but has not begun
       * </pre>
       */
      PENDING_OPEN(1, 1),
      /**
       * <code>OPENING = 2;</code>
       *
       * <pre>
       * server has begun to open but not yet done
       * </pre>
       */
      OPENING(2, 2),
      /**
       * <code>OPEN = 3;</code>
       *
       * <pre>
       * server opened region and updated meta
       * </pre>
       */
      OPEN(3, 3),
      /**
       * <code>PENDING_CLOSE = 4;</code>
       *
       * <pre>
       * sent rpc to server to close but has not begun
       * </pre>
       */
      PENDING_CLOSE(4, 4),
      /**
       * <code>CLOSING = 5;</code>
       *
       * <pre>
       * server has begun to close but not yet done
       * </pre>
       */
      CLOSING(5, 5),
      /**
       * <code>CLOSED = 6;</code>
       *
       * <pre>
       * server closed region and updated meta
       * </pre>
       */
      CLOSED(6, 6),
      /**
       * <code>SPLITTING = 7;</code>
       *
       * <pre>
       * server started split of a region
       * </pre>
       */
      SPLITTING(7, 7),
      /**
       * <code>SPLIT = 8;</code>
       *
       * <pre>
       * server completed split of a region
       * </pre>
       */
      SPLIT(8, 8),
      /**
       * <code>FAILED_OPEN = 9;</code>
       *
       * <pre>
       * failed to open, and won't retry any more
       * </pre>
       */
      FAILED_OPEN(9, 9),
      /**
       * <code>FAILED_CLOSE = 10;</code>
       *
       * <pre>
       * failed to close, and won't retry any more
       * </pre>
       */
      FAILED_CLOSE(10, 10),
      /**
       * <code>MERGING = 11;</code>
       *
       * <pre>
       * server started merge a region
       * </pre>
       */
      MERGING(11, 11),
      /**
       * <code>MERGED = 12;</code>
       *
       * <pre>
       * server completed merge of a region
       * </pre>
       */
      MERGED(12, 12),
      /**
       * <code>SPLITTING_NEW = 13;</code>
       *
       * <pre>
       * new region to be created when RS splits a parent
       * </pre>
       */
      SPLITTING_NEW(13, 13),
      /**
       * <code>MERGING_NEW = 14;</code>
       *
       * <pre>
       * region but hasn't be created yet, or master doesn't
       * know it's already created
       * </pre>
       */
      MERGING_NEW(14, 14),
      ;

      /**
       * <code>OFFLINE = 0;</code>
       *
       * <pre>
       * region is in an offline state
       * </pre>
       */
      public static final int OFFLINE_VALUE = 0;
      /**
       * <code>PENDING_OPEN = 1;</code>
       *
       * <pre>
       * sent rpc to server to open but has not begun
       * </pre>
       */
      public static final int PENDING_OPEN_VALUE = 1;
      /**
       * <code>OPENING = 2;</code>
       *
       * <pre>
       * server has begun to open but not yet done
       * </pre>
       */
      public static final int OPENING_VALUE = 2;
      /**
       * <code>OPEN = 3;</code>
       *
       * <pre>
       * server opened region and updated meta
       * </pre>
       */
      public static final int OPEN_VALUE = 3;
      /**
       * <code>PENDING_CLOSE = 4;</code>
       *
       * <pre>
       * sent rpc to server to close but has not begun
       * </pre>
       */
      public static final int PENDING_CLOSE_VALUE = 4;
      /**
       * <code>CLOSING = 5;</code>
       *
       * <pre>
       * server has begun to close but not yet done
       * </pre>
       */
      public static final int CLOSING_VALUE = 5;
      /**
       * <code>CLOSED = 6;</code>
       *
       * <pre>
       * server closed region and updated meta
       * </pre>
       */
      public static final int CLOSED_VALUE = 6;
      /**
       * <code>SPLITTING = 7;</code>
       *
       * <pre>
       * server started split of a region
       * </pre>
       */
      public static final int SPLITTING_VALUE = 7;
      /**
       * <code>SPLIT = 8;</code>
       *
       * <pre>
       * server completed split of a region
       * </pre>
       */
      public static final int SPLIT_VALUE = 8;
      /**
       * <code>FAILED_OPEN = 9;</code>
       *
       * <pre>
       * failed to open, and won't retry any more
       * </pre>
       */
      public static final int FAILED_OPEN_VALUE = 9;
      /**
       * <code>FAILED_CLOSE = 10;</code>
       *
       * <pre>
       * failed to close, and won't retry any more
       * </pre>
       */
      public static final int FAILED_CLOSE_VALUE = 10;
      /**
       * <code>MERGING = 11;</code>
       *
       * <pre>
       * server started merge a region
       * </pre>
       */
      public static final int MERGING_VALUE = 11;
      /**
       * <code>MERGED = 12;</code>
       *
       * <pre>
       * server completed merge of a region
       * </pre>
       */
      public static final int MERGED_VALUE = 12;
      /**
       * <code>SPLITTING_NEW = 13;</code>
       *
       * <pre>
       * new region to be created when RS splits a parent
       * </pre>
       */
      public static final int SPLITTING_NEW_VALUE = 13;
      /**
       * <code>MERGING_NEW = 14;</code>
       *
       * <pre>
       * region but hasn't be created yet, or master doesn't
       * know it's already created
       * </pre>
       */
      public static final int MERGING_NEW_VALUE = 14;


      public final int getNumber() { return value; }

      public static State valueOf(int value) {
        switch (value) {
          case 0: return OFFLINE;
          case 1: return PENDING_OPEN;
          case 2: return OPENING;
          case 3: return OPEN;
          case 4: return PENDING_CLOSE;
          case 5: return CLOSING;
          case 6: return CLOSED;
          case 7: return SPLITTING;
          case 8: return SPLIT;
          case 9: return FAILED_OPEN;
          case 10: return FAILED_CLOSE;
          case 11: return MERGING;
          case 12: return MERGED;
          case 13: return SPLITTING_NEW;
          case 14: return MERGING_NEW;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<State>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<State>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<State>() {
              public State findValueByNumber(int number) {
                return State.valueOf(number);
              }
            };

      private final int value;

      private State(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:RegionState.State)
    }

    private int bitField0_;
    // required .RegionInfo region_info = 1;
    public static final int REGION_INFO_FIELD_NUMBER = 1;
    private org.hbase.async.generated.HBasePB.RegionInfo regionInfo_;
    /**
     * <code>required .RegionInfo region_info = 1;</code>
     */
    public boolean hasRegionInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .RegionInfo region_info = 1;</code>
     */
    public org.hbase.async.generated.HBasePB.RegionInfo getRegionInfo() {
      return regionInfo_;
    }

    // required .RegionState.State state = 2;
    public static final int STATE_FIELD_NUMBER = 2;
    private org.hbase.async.generated.ClusterStatusPB.RegionState.State state_;
    /**
     * <code>required .RegionState.State state = 2;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .RegionState.State state = 2;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.RegionState.State getState() {
      return state_;
    }

    // optional uint64 stamp = 3;
    public static final int STAMP_FIELD_NUMBER = 3;
    private long stamp_;
    /**
     * <code>optional uint64 stamp = 3;</code>
     */
    public boolean hasStamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 stamp = 3;</code>
     */
    public long getStamp() {
      return stamp_;
    }

    private void initFields() {
      regionInfo_ = org.hbase.async.generated.HBasePB.RegionInfo.getDefaultInstance();
      state_ = org.hbase.async.generated.ClusterStatusPB.RegionState.State.OFFLINE;
      stamp_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRegionInfo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRegionInfo().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, regionInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, state_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, stamp_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, regionInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, state_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, stamp_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.RegionState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code RegionState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.RegionState, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.RegionStateOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.RegionState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        regionInfo_ = org.hbase.async.generated.HBasePB.RegionInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = org.hbase.async.generated.ClusterStatusPB.RegionState.State.OFFLINE;
        bitField0_ = (bitField0_ & ~0x00000002);
        stamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionState getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.RegionState.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionState build() {
        org.hbase.async.generated.ClusterStatusPB.RegionState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionState buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.RegionState result = new org.hbase.async.generated.ClusterStatusPB.RegionState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.regionInfo_ = regionInfo_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stamp_ = stamp_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.RegionState other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.RegionState.getDefaultInstance()) return this;
        if (other.hasRegionInfo()) {
          mergeRegionInfo(other.getRegionInfo());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasStamp()) {
          setStamp(other.getStamp());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRegionInfo()) {
          
          return false;
        }
        if (!hasState()) {
          
          return false;
        }
        if (!getRegionInfo().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.RegionState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.RegionState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .RegionInfo region_info = 1;
      private org.hbase.async.generated.HBasePB.RegionInfo regionInfo_ = org.hbase.async.generated.HBasePB.RegionInfo.getDefaultInstance();
      /**
       * <code>required .RegionInfo region_info = 1;</code>
       */
      public boolean hasRegionInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .RegionInfo region_info = 1;</code>
       */
      public org.hbase.async.generated.HBasePB.RegionInfo getRegionInfo() {
        return regionInfo_;
      }
      /**
       * <code>required .RegionInfo region_info = 1;</code>
       */
      public Builder setRegionInfo(org.hbase.async.generated.HBasePB.RegionInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        regionInfo_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionInfo region_info = 1;</code>
       */
      public Builder setRegionInfo(
          org.hbase.async.generated.HBasePB.RegionInfo.Builder builderForValue) {
        regionInfo_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionInfo region_info = 1;</code>
       */
      public Builder mergeRegionInfo(org.hbase.async.generated.HBasePB.RegionInfo value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            regionInfo_ != org.hbase.async.generated.HBasePB.RegionInfo.getDefaultInstance()) {
          regionInfo_ =
            org.hbase.async.generated.HBasePB.RegionInfo.newBuilder(regionInfo_).mergeFrom(value).buildPartial();
        } else {
          regionInfo_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionInfo region_info = 1;</code>
       */
      public Builder clearRegionInfo() {
        regionInfo_ = org.hbase.async.generated.HBasePB.RegionInfo.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // required .RegionState.State state = 2;
      private org.hbase.async.generated.ClusterStatusPB.RegionState.State state_ = org.hbase.async.generated.ClusterStatusPB.RegionState.State.OFFLINE;
      /**
       * <code>required .RegionState.State state = 2;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .RegionState.State state = 2;</code>
       */
      public org.hbase.async.generated.ClusterStatusPB.RegionState.State getState() {
        return state_;
      }
      /**
       * <code>required .RegionState.State state = 2;</code>
       */
      public Builder setState(org.hbase.async.generated.ClusterStatusPB.RegionState.State value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        state_ = value;
        
        return this;
      }
      /**
       * <code>required .RegionState.State state = 2;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000002);
        state_ = org.hbase.async.generated.ClusterStatusPB.RegionState.State.OFFLINE;
        
        return this;
      }

      // optional uint64 stamp = 3;
      private long stamp_ ;
      /**
       * <code>optional uint64 stamp = 3;</code>
       */
      public boolean hasStamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 stamp = 3;</code>
       */
      public long getStamp() {
        return stamp_;
      }
      /**
       * <code>optional uint64 stamp = 3;</code>
       */
      public Builder setStamp(long value) {
        bitField0_ |= 0x00000004;
        stamp_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 stamp = 3;</code>
       */
      public Builder clearStamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stamp_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RegionState)
    }

    static {
      defaultInstance = new RegionState(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RegionState)
  }

  public interface RegionInTransitionOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .RegionSpecifier spec = 1;
    /**
     * <code>required .RegionSpecifier spec = 1;</code>
     */
    boolean hasSpec();
    /**
     * <code>required .RegionSpecifier spec = 1;</code>
     */
    org.hbase.async.generated.HBasePB.RegionSpecifier getSpec();

    // required .RegionState region_state = 2;
    /**
     * <code>required .RegionState region_state = 2;</code>
     */
    boolean hasRegionState();
    /**
     * <code>required .RegionState region_state = 2;</code>
     */
    org.hbase.async.generated.ClusterStatusPB.RegionState getRegionState();
  }
  /**
   * Protobuf type {@code RegionInTransition}
   */
  public static final class RegionInTransition extends
      com.google.protobuf.GeneratedMessageLite
      implements RegionInTransitionOrBuilder {
    // Use RegionInTransition.newBuilder() to construct.
    private RegionInTransition(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RegionInTransition(boolean noInit) {}

    private static final RegionInTransition defaultInstance;
    public static RegionInTransition getDefaultInstance() {
      return defaultInstance;
    }

    public RegionInTransition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RegionInTransition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.hbase.async.generated.HBasePB.RegionSpecifier.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = spec_.toBuilder();
              }
              spec_ = input.readMessage(org.hbase.async.generated.HBasePB.RegionSpecifier.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(spec_);
                spec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.hbase.async.generated.ClusterStatusPB.RegionState.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = regionState_.toBuilder();
              }
              regionState_ = input.readMessage(org.hbase.async.generated.ClusterStatusPB.RegionState.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(regionState_);
                regionState_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RegionInTransition> PARSER =
        new com.google.protobuf.AbstractParser<RegionInTransition>() {
      public RegionInTransition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegionInTransition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegionInTransition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .RegionSpecifier spec = 1;
    public static final int SPEC_FIELD_NUMBER = 1;
    private org.hbase.async.generated.HBasePB.RegionSpecifier spec_;
    /**
     * <code>required .RegionSpecifier spec = 1;</code>
     */
    public boolean hasSpec() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .RegionSpecifier spec = 1;</code>
     */
    public org.hbase.async.generated.HBasePB.RegionSpecifier getSpec() {
      return spec_;
    }

    // required .RegionState region_state = 2;
    public static final int REGION_STATE_FIELD_NUMBER = 2;
    private org.hbase.async.generated.ClusterStatusPB.RegionState regionState_;
    /**
     * <code>required .RegionState region_state = 2;</code>
     */
    public boolean hasRegionState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .RegionState region_state = 2;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.RegionState getRegionState() {
      return regionState_;
    }

    private void initFields() {
      spec_ = org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance();
      regionState_ = org.hbase.async.generated.ClusterStatusPB.RegionState.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSpec()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRegionState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSpec().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRegionState().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, spec_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, regionState_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, spec_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, regionState_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionInTransition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.RegionInTransition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code RegionInTransition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.RegionInTransition, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.RegionInTransitionOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.RegionInTransition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        spec_ = org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        regionState_ = org.hbase.async.generated.ClusterStatusPB.RegionState.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionInTransition getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.RegionInTransition.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionInTransition build() {
        org.hbase.async.generated.ClusterStatusPB.RegionInTransition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionInTransition buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.RegionInTransition result = new org.hbase.async.generated.ClusterStatusPB.RegionInTransition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.spec_ = spec_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.regionState_ = regionState_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.RegionInTransition other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.RegionInTransition.getDefaultInstance()) return this;
        if (other.hasSpec()) {
          mergeSpec(other.getSpec());
        }
        if (other.hasRegionState()) {
          mergeRegionState(other.getRegionState());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSpec()) {
          
          return false;
        }
        if (!hasRegionState()) {
          
          return false;
        }
        if (!getSpec().isInitialized()) {
          
          return false;
        }
        if (!getRegionState().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.RegionInTransition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.RegionInTransition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .RegionSpecifier spec = 1;
      private org.hbase.async.generated.HBasePB.RegionSpecifier spec_ = org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance();
      /**
       * <code>required .RegionSpecifier spec = 1;</code>
       */
      public boolean hasSpec() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .RegionSpecifier spec = 1;</code>
       */
      public org.hbase.async.generated.HBasePB.RegionSpecifier getSpec() {
        return spec_;
      }
      /**
       * <code>required .RegionSpecifier spec = 1;</code>
       */
      public Builder setSpec(org.hbase.async.generated.HBasePB.RegionSpecifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        spec_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionSpecifier spec = 1;</code>
       */
      public Builder setSpec(
          org.hbase.async.generated.HBasePB.RegionSpecifier.Builder builderForValue) {
        spec_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionSpecifier spec = 1;</code>
       */
      public Builder mergeSpec(org.hbase.async.generated.HBasePB.RegionSpecifier value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            spec_ != org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance()) {
          spec_ =
            org.hbase.async.generated.HBasePB.RegionSpecifier.newBuilder(spec_).mergeFrom(value).buildPartial();
        } else {
          spec_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionSpecifier spec = 1;</code>
       */
      public Builder clearSpec() {
        spec_ = org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // required .RegionState region_state = 2;
      private org.hbase.async.generated.ClusterStatusPB.RegionState regionState_ = org.hbase.async.generated.ClusterStatusPB.RegionState.getDefaultInstance();
      /**
       * <code>required .RegionState region_state = 2;</code>
       */
      public boolean hasRegionState() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .RegionState region_state = 2;</code>
       */
      public org.hbase.async.generated.ClusterStatusPB.RegionState getRegionState() {
        return regionState_;
      }
      /**
       * <code>required .RegionState region_state = 2;</code>
       */
      public Builder setRegionState(org.hbase.async.generated.ClusterStatusPB.RegionState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        regionState_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .RegionState region_state = 2;</code>
       */
      public Builder setRegionState(
          org.hbase.async.generated.ClusterStatusPB.RegionState.Builder builderForValue) {
        regionState_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .RegionState region_state = 2;</code>
       */
      public Builder mergeRegionState(org.hbase.async.generated.ClusterStatusPB.RegionState value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            regionState_ != org.hbase.async.generated.ClusterStatusPB.RegionState.getDefaultInstance()) {
          regionState_ =
            org.hbase.async.generated.ClusterStatusPB.RegionState.newBuilder(regionState_).mergeFrom(value).buildPartial();
        } else {
          regionState_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .RegionState region_state = 2;</code>
       */
      public Builder clearRegionState() {
        regionState_ = org.hbase.async.generated.ClusterStatusPB.RegionState.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RegionInTransition)
    }

    static {
      defaultInstance = new RegionInTransition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RegionInTransition)
  }

  public interface StoreSequenceIdOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required bytes family_name = 1;
    /**
     * <code>required bytes family_name = 1;</code>
     */
    boolean hasFamilyName();
    /**
     * <code>required bytes family_name = 1;</code>
     */
    com.google.protobuf.ByteString getFamilyName();

    // required uint64 sequence_id = 2;
    /**
     * <code>required uint64 sequence_id = 2;</code>
     */
    boolean hasSequenceId();
    /**
     * <code>required uint64 sequence_id = 2;</code>
     */
    long getSequenceId();
  }
  /**
   * Protobuf type {@code StoreSequenceId}
   *
   * <pre>
   **
   * sequence Id of a store
   * </pre>
   */
  public static final class StoreSequenceId extends
      com.google.protobuf.GeneratedMessageLite
      implements StoreSequenceIdOrBuilder {
    // Use StoreSequenceId.newBuilder() to construct.
    private StoreSequenceId(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private StoreSequenceId(boolean noInit) {}

    private static final StoreSequenceId defaultInstance;
    public static StoreSequenceId getDefaultInstance() {
      return defaultInstance;
    }

    public StoreSequenceId getDefaultInstanceForType() {
      return defaultInstance;
    }

    private StoreSequenceId(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              familyName_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              sequenceId_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<StoreSequenceId> PARSER =
        new com.google.protobuf.AbstractParser<StoreSequenceId>() {
      public StoreSequenceId parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StoreSequenceId(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StoreSequenceId> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes family_name = 1;
    public static final int FAMILY_NAME_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString familyName_;
    /**
     * <code>required bytes family_name = 1;</code>
     */
    public boolean hasFamilyName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes family_name = 1;</code>
     */
    public com.google.protobuf.ByteString getFamilyName() {
      return familyName_;
    }

    // required uint64 sequence_id = 2;
    public static final int SEQUENCE_ID_FIELD_NUMBER = 2;
    private long sequenceId_;
    /**
     * <code>required uint64 sequence_id = 2;</code>
     */
    public boolean hasSequenceId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 sequence_id = 2;</code>
     */
    public long getSequenceId() {
      return sequenceId_;
    }

    private void initFields() {
      familyName_ = com.google.protobuf.ByteString.EMPTY;
      sequenceId_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasFamilyName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSequenceId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, familyName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, sequenceId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, familyName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, sequenceId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.StoreSequenceId prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code StoreSequenceId}
     *
     * <pre>
     **
     * sequence Id of a store
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.StoreSequenceId, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.StoreSequenceIdOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        familyName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        sequenceId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.StoreSequenceId getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.StoreSequenceId build() {
        org.hbase.async.generated.ClusterStatusPB.StoreSequenceId result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.StoreSequenceId buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.StoreSequenceId result = new org.hbase.async.generated.ClusterStatusPB.StoreSequenceId(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.familyName_ = familyName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sequenceId_ = sequenceId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.StoreSequenceId other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.getDefaultInstance()) return this;
        if (other.hasFamilyName()) {
          setFamilyName(other.getFamilyName());
        }
        if (other.hasSequenceId()) {
          setSequenceId(other.getSequenceId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFamilyName()) {
          
          return false;
        }
        if (!hasSequenceId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.StoreSequenceId parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.StoreSequenceId) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes family_name = 1;
      private com.google.protobuf.ByteString familyName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes family_name = 1;</code>
       */
      public boolean hasFamilyName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes family_name = 1;</code>
       */
      public com.google.protobuf.ByteString getFamilyName() {
        return familyName_;
      }
      /**
       * <code>required bytes family_name = 1;</code>
       */
      public Builder setFamilyName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        familyName_ = value;
        
        return this;
      }
      /**
       * <code>required bytes family_name = 1;</code>
       */
      public Builder clearFamilyName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        familyName_ = getDefaultInstance().getFamilyName();
        
        return this;
      }

      // required uint64 sequence_id = 2;
      private long sequenceId_ ;
      /**
       * <code>required uint64 sequence_id = 2;</code>
       */
      public boolean hasSequenceId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 sequence_id = 2;</code>
       */
      public long getSequenceId() {
        return sequenceId_;
      }
      /**
       * <code>required uint64 sequence_id = 2;</code>
       */
      public Builder setSequenceId(long value) {
        bitField0_ |= 0x00000002;
        sequenceId_ = value;
        
        return this;
      }
      /**
       * <code>required uint64 sequence_id = 2;</code>
       */
      public Builder clearSequenceId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sequenceId_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:StoreSequenceId)
    }

    static {
      defaultInstance = new StoreSequenceId(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:StoreSequenceId)
  }

  public interface RegionStoreSequenceIdsOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint64 last_flushed_sequence_id = 1;
    /**
     * <code>required uint64 last_flushed_sequence_id = 1;</code>
     */
    boolean hasLastFlushedSequenceId();
    /**
     * <code>required uint64 last_flushed_sequence_id = 1;</code>
     */
    long getLastFlushedSequenceId();

    // repeated .StoreSequenceId store_sequence_id = 2;
    /**
     * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
     */
    java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> 
        getStoreSequenceIdList();
    /**
     * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
     */
    org.hbase.async.generated.ClusterStatusPB.StoreSequenceId getStoreSequenceId(int index);
    /**
     * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
     */
    int getStoreSequenceIdCount();
  }
  /**
   * Protobuf type {@code RegionStoreSequenceIds}
   *
   * <pre>
   **
   * contains a sequence id of a region which should be the minimum of its store sequence ids and
   * list of sequence ids of the region's stores
   * </pre>
   */
  public static final class RegionStoreSequenceIds extends
      com.google.protobuf.GeneratedMessageLite
      implements RegionStoreSequenceIdsOrBuilder {
    // Use RegionStoreSequenceIds.newBuilder() to construct.
    private RegionStoreSequenceIds(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RegionStoreSequenceIds(boolean noInit) {}

    private static final RegionStoreSequenceIds defaultInstance;
    public static RegionStoreSequenceIds getDefaultInstance() {
      return defaultInstance;
    }

    public RegionStoreSequenceIds getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RegionStoreSequenceIds(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              lastFlushedSequenceId_ = input.readUInt64();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                storeSequenceId_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId>();
                mutable_bitField0_ |= 0x00000002;
              }
              storeSequenceId_.add(input.readMessage(org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          storeSequenceId_ = java.util.Collections.unmodifiableList(storeSequenceId_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RegionStoreSequenceIds> PARSER =
        new com.google.protobuf.AbstractParser<RegionStoreSequenceIds>() {
      public RegionStoreSequenceIds parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegionStoreSequenceIds(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegionStoreSequenceIds> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 last_flushed_sequence_id = 1;
    public static final int LAST_FLUSHED_SEQUENCE_ID_FIELD_NUMBER = 1;
    private long lastFlushedSequenceId_;
    /**
     * <code>required uint64 last_flushed_sequence_id = 1;</code>
     */
    public boolean hasLastFlushedSequenceId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 last_flushed_sequence_id = 1;</code>
     */
    public long getLastFlushedSequenceId() {
      return lastFlushedSequenceId_;
    }

    // repeated .StoreSequenceId store_sequence_id = 2;
    public static final int STORE_SEQUENCE_ID_FIELD_NUMBER = 2;
    private java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> storeSequenceId_;
    /**
     * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
     */
    public java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> getStoreSequenceIdList() {
      return storeSequenceId_;
    }
    /**
     * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
     */
    public java.util.List<? extends org.hbase.async.generated.ClusterStatusPB.StoreSequenceIdOrBuilder> 
        getStoreSequenceIdOrBuilderList() {
      return storeSequenceId_;
    }
    /**
     * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
     */
    public int getStoreSequenceIdCount() {
      return storeSequenceId_.size();
    }
    /**
     * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.StoreSequenceId getStoreSequenceId(int index) {
      return storeSequenceId_.get(index);
    }
    /**
     * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.StoreSequenceIdOrBuilder getStoreSequenceIdOrBuilder(
        int index) {
      return storeSequenceId_.get(index);
    }

    private void initFields() {
      lastFlushedSequenceId_ = 0L;
      storeSequenceId_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasLastFlushedSequenceId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getStoreSequenceIdCount(); i++) {
        if (!getStoreSequenceId(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, lastFlushedSequenceId_);
      }
      for (int i = 0; i < storeSequenceId_.size(); i++) {
        output.writeMessage(2, storeSequenceId_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, lastFlushedSequenceId_);
      }
      for (int i = 0; i < storeSequenceId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, storeSequenceId_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code RegionStoreSequenceIds}
     *
     * <pre>
     **
     * contains a sequence id of a region which should be the minimum of its store sequence ids and
     * list of sequence ids of the region's stores
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIdsOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        lastFlushedSequenceId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        storeSequenceId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds build() {
        org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds result = new org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.lastFlushedSequenceId_ = lastFlushedSequenceId_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          storeSequenceId_ = java.util.Collections.unmodifiableList(storeSequenceId_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.storeSequenceId_ = storeSequenceId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds.getDefaultInstance()) return this;
        if (other.hasLastFlushedSequenceId()) {
          setLastFlushedSequenceId(other.getLastFlushedSequenceId());
        }
        if (!other.storeSequenceId_.isEmpty()) {
          if (storeSequenceId_.isEmpty()) {
            storeSequenceId_ = other.storeSequenceId_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureStoreSequenceIdIsMutable();
            storeSequenceId_.addAll(other.storeSequenceId_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLastFlushedSequenceId()) {
          
          return false;
        }
        for (int i = 0; i < getStoreSequenceIdCount(); i++) {
          if (!getStoreSequenceId(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.RegionStoreSequenceIds) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 last_flushed_sequence_id = 1;
      private long lastFlushedSequenceId_ ;
      /**
       * <code>required uint64 last_flushed_sequence_id = 1;</code>
       */
      public boolean hasLastFlushedSequenceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 last_flushed_sequence_id = 1;</code>
       */
      public long getLastFlushedSequenceId() {
        return lastFlushedSequenceId_;
      }
      /**
       * <code>required uint64 last_flushed_sequence_id = 1;</code>
       */
      public Builder setLastFlushedSequenceId(long value) {
        bitField0_ |= 0x00000001;
        lastFlushedSequenceId_ = value;
        
        return this;
      }
      /**
       * <code>required uint64 last_flushed_sequence_id = 1;</code>
       */
      public Builder clearLastFlushedSequenceId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        lastFlushedSequenceId_ = 0L;
        
        return this;
      }

      // repeated .StoreSequenceId store_sequence_id = 2;
      private java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> storeSequenceId_ =
        java.util.Collections.emptyList();
      private void ensureStoreSequenceIdIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          storeSequenceId_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId>(storeSequenceId_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> getStoreSequenceIdList() {
        return java.util.Collections.unmodifiableList(storeSequenceId_);
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public int getStoreSequenceIdCount() {
        return storeSequenceId_.size();
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public org.hbase.async.generated.ClusterStatusPB.StoreSequenceId getStoreSequenceId(int index) {
        return storeSequenceId_.get(index);
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder setStoreSequenceId(
          int index, org.hbase.async.generated.ClusterStatusPB.StoreSequenceId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStoreSequenceIdIsMutable();
        storeSequenceId_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder setStoreSequenceId(
          int index, org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.Builder builderForValue) {
        ensureStoreSequenceIdIsMutable();
        storeSequenceId_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder addStoreSequenceId(org.hbase.async.generated.ClusterStatusPB.StoreSequenceId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStoreSequenceIdIsMutable();
        storeSequenceId_.add(value);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder addStoreSequenceId(
          int index, org.hbase.async.generated.ClusterStatusPB.StoreSequenceId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStoreSequenceIdIsMutable();
        storeSequenceId_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder addStoreSequenceId(
          org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.Builder builderForValue) {
        ensureStoreSequenceIdIsMutable();
        storeSequenceId_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder addStoreSequenceId(
          int index, org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.Builder builderForValue) {
        ensureStoreSequenceIdIsMutable();
        storeSequenceId_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder addAllStoreSequenceId(
          java.lang.Iterable<? extends org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> values) {
        ensureStoreSequenceIdIsMutable();
        super.addAll(values, storeSequenceId_);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder clearStoreSequenceId() {
        storeSequenceId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_sequence_id = 2;</code>
       */
      public Builder removeStoreSequenceId(int index) {
        ensureStoreSequenceIdIsMutable();
        storeSequenceId_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:RegionStoreSequenceIds)
    }

    static {
      defaultInstance = new RegionStoreSequenceIds(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RegionStoreSequenceIds)
  }

  public interface RegionLoadOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .RegionSpecifier region_specifier = 1;
    /**
     * <code>required .RegionSpecifier region_specifier = 1;</code>
     *
     * <pre>
     ** the region specifier 
     * </pre>
     */
    boolean hasRegionSpecifier();
    /**
     * <code>required .RegionSpecifier region_specifier = 1;</code>
     *
     * <pre>
     ** the region specifier 
     * </pre>
     */
    org.hbase.async.generated.HBasePB.RegionSpecifier getRegionSpecifier();

    // optional uint32 stores = 2;
    /**
     * <code>optional uint32 stores = 2;</code>
     *
     * <pre>
     ** the number of stores for the region 
     * </pre>
     */
    boolean hasStores();
    /**
     * <code>optional uint32 stores = 2;</code>
     *
     * <pre>
     ** the number of stores for the region 
     * </pre>
     */
    int getStores();

    // optional uint32 storefiles = 3;
    /**
     * <code>optional uint32 storefiles = 3;</code>
     *
     * <pre>
     ** the number of storefiles for the region 
     * </pre>
     */
    boolean hasStorefiles();
    /**
     * <code>optional uint32 storefiles = 3;</code>
     *
     * <pre>
     ** the number of storefiles for the region 
     * </pre>
     */
    int getStorefiles();

    // optional uint32 store_uncompressed_size_MB = 4;
    /**
     * <code>optional uint32 store_uncompressed_size_MB = 4;</code>
     *
     * <pre>
     ** the total size of the store files for the region, uncompressed, in MB 
     * </pre>
     */
    boolean hasStoreUncompressedSizeMB();
    /**
     * <code>optional uint32 store_uncompressed_size_MB = 4;</code>
     *
     * <pre>
     ** the total size of the store files for the region, uncompressed, in MB 
     * </pre>
     */
    int getStoreUncompressedSizeMB();

    // optional uint32 storefile_size_MB = 5;
    /**
     * <code>optional uint32 storefile_size_MB = 5;</code>
     *
     * <pre>
     ** the current total size of the store files for the region, in MB 
     * </pre>
     */
    boolean hasStorefileSizeMB();
    /**
     * <code>optional uint32 storefile_size_MB = 5;</code>
     *
     * <pre>
     ** the current total size of the store files for the region, in MB 
     * </pre>
     */
    int getStorefileSizeMB();

    // optional uint32 memstore_size_MB = 6;
    /**
     * <code>optional uint32 memstore_size_MB = 6;</code>
     *
     * <pre>
     ** the current size of the memstore for the region, in MB 
     * </pre>
     */
    boolean hasMemstoreSizeMB();
    /**
     * <code>optional uint32 memstore_size_MB = 6;</code>
     *
     * <pre>
     ** the current size of the memstore for the region, in MB 
     * </pre>
     */
    int getMemstoreSizeMB();

    // optional uint32 storefile_index_size_MB = 7;
    /**
     * <code>optional uint32 storefile_index_size_MB = 7;</code>
     *
     * <pre>
     **
     * The current total size of root-level store file indexes for the region,
     * in MB. The same as {&#64;link #rootIndexSizeKB} but in MB.
     * </pre>
     */
    boolean hasStorefileIndexSizeMB();
    /**
     * <code>optional uint32 storefile_index_size_MB = 7;</code>
     *
     * <pre>
     **
     * The current total size of root-level store file indexes for the region,
     * in MB. The same as {&#64;link #rootIndexSizeKB} but in MB.
     * </pre>
     */
    int getStorefileIndexSizeMB();

    // optional uint64 read_requests_count = 8;
    /**
     * <code>optional uint64 read_requests_count = 8;</code>
     *
     * <pre>
     ** the current total read requests made to region 
     * </pre>
     */
    boolean hasReadRequestsCount();
    /**
     * <code>optional uint64 read_requests_count = 8;</code>
     *
     * <pre>
     ** the current total read requests made to region 
     * </pre>
     */
    long getReadRequestsCount();

    // optional uint64 write_requests_count = 9;
    /**
     * <code>optional uint64 write_requests_count = 9;</code>
     *
     * <pre>
     ** the current total write requests made to region 
     * </pre>
     */
    boolean hasWriteRequestsCount();
    /**
     * <code>optional uint64 write_requests_count = 9;</code>
     *
     * <pre>
     ** the current total write requests made to region 
     * </pre>
     */
    long getWriteRequestsCount();

    // optional uint64 total_compacting_KVs = 10;
    /**
     * <code>optional uint64 total_compacting_KVs = 10;</code>
     *
     * <pre>
     ** the total compacting key values in currently running compaction 
     * </pre>
     */
    boolean hasTotalCompactingKVs();
    /**
     * <code>optional uint64 total_compacting_KVs = 10;</code>
     *
     * <pre>
     ** the total compacting key values in currently running compaction 
     * </pre>
     */
    long getTotalCompactingKVs();

    // optional uint64 current_compacted_KVs = 11;
    /**
     * <code>optional uint64 current_compacted_KVs = 11;</code>
     *
     * <pre>
     ** the completed count of key values in currently running compaction 
     * </pre>
     */
    boolean hasCurrentCompactedKVs();
    /**
     * <code>optional uint64 current_compacted_KVs = 11;</code>
     *
     * <pre>
     ** the completed count of key values in currently running compaction 
     * </pre>
     */
    long getCurrentCompactedKVs();

    // optional uint32 root_index_size_KB = 12;
    /**
     * <code>optional uint32 root_index_size_KB = 12;</code>
     *
     * <pre>
     ** The current total size of root-level indexes for the region, in KB. 
     * </pre>
     */
    boolean hasRootIndexSizeKB();
    /**
     * <code>optional uint32 root_index_size_KB = 12;</code>
     *
     * <pre>
     ** The current total size of root-level indexes for the region, in KB. 
     * </pre>
     */
    int getRootIndexSizeKB();

    // optional uint32 total_static_index_size_KB = 13;
    /**
     * <code>optional uint32 total_static_index_size_KB = 13;</code>
     *
     * <pre>
     ** The total size of all index blocks, not just the root level, in KB. 
     * </pre>
     */
    boolean hasTotalStaticIndexSizeKB();
    /**
     * <code>optional uint32 total_static_index_size_KB = 13;</code>
     *
     * <pre>
     ** The total size of all index blocks, not just the root level, in KB. 
     * </pre>
     */
    int getTotalStaticIndexSizeKB();

    // optional uint32 total_static_bloom_size_KB = 14;
    /**
     * <code>optional uint32 total_static_bloom_size_KB = 14;</code>
     *
     * <pre>
     **
     * The total size of all Bloom filter blocks, not just loaded into the
     * block cache, in KB.
     * </pre>
     */
    boolean hasTotalStaticBloomSizeKB();
    /**
     * <code>optional uint32 total_static_bloom_size_KB = 14;</code>
     *
     * <pre>
     **
     * The total size of all Bloom filter blocks, not just loaded into the
     * block cache, in KB.
     * </pre>
     */
    int getTotalStaticBloomSizeKB();

    // optional uint64 complete_sequence_id = 15;
    /**
     * <code>optional uint64 complete_sequence_id = 15;</code>
     *
     * <pre>
     ** the most recent sequence Id from cache flush 
     * </pre>
     */
    boolean hasCompleteSequenceId();
    /**
     * <code>optional uint64 complete_sequence_id = 15;</code>
     *
     * <pre>
     ** the most recent sequence Id from cache flush 
     * </pre>
     */
    long getCompleteSequenceId();

    // optional float data_locality = 16;
    /**
     * <code>optional float data_locality = 16;</code>
     *
     * <pre>
     ** The current data locality for region in the regionserver 
     * </pre>
     */
    boolean hasDataLocality();
    /**
     * <code>optional float data_locality = 16;</code>
     *
     * <pre>
     ** The current data locality for region in the regionserver 
     * </pre>
     */
    float getDataLocality();

    // optional uint64 last_major_compaction_ts = 17 [default = 0];
    /**
     * <code>optional uint64 last_major_compaction_ts = 17 [default = 0];</code>
     */
    boolean hasLastMajorCompactionTs();
    /**
     * <code>optional uint64 last_major_compaction_ts = 17 [default = 0];</code>
     */
    long getLastMajorCompactionTs();

    // repeated .StoreSequenceId store_complete_sequence_id = 18;
    /**
     * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
     *
     * <pre>
     ** the most recent sequence Id of store from cache flush 
     * </pre>
     */
    java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> 
        getStoreCompleteSequenceIdList();
    /**
     * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
     *
     * <pre>
     ** the most recent sequence Id of store from cache flush 
     * </pre>
     */
    org.hbase.async.generated.ClusterStatusPB.StoreSequenceId getStoreCompleteSequenceId(int index);
    /**
     * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
     *
     * <pre>
     ** the most recent sequence Id of store from cache flush 
     * </pre>
     */
    int getStoreCompleteSequenceIdCount();
  }
  /**
   * Protobuf type {@code RegionLoad}
   */
  public static final class RegionLoad extends
      com.google.protobuf.GeneratedMessageLite
      implements RegionLoadOrBuilder {
    // Use RegionLoad.newBuilder() to construct.
    private RegionLoad(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RegionLoad(boolean noInit) {}

    private static final RegionLoad defaultInstance;
    public static RegionLoad getDefaultInstance() {
      return defaultInstance;
    }

    public RegionLoad getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RegionLoad(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.hbase.async.generated.HBasePB.RegionSpecifier.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = regionSpecifier_.toBuilder();
              }
              regionSpecifier_ = input.readMessage(org.hbase.async.generated.HBasePB.RegionSpecifier.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(regionSpecifier_);
                regionSpecifier_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              stores_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              storefiles_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              storeUncompressedSizeMB_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              storefileSizeMB_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              memstoreSizeMB_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              storefileIndexSizeMB_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              readRequestsCount_ = input.readUInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              writeRequestsCount_ = input.readUInt64();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              totalCompactingKVs_ = input.readUInt64();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              currentCompactedKVs_ = input.readUInt64();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              rootIndexSizeKB_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              totalStaticIndexSizeKB_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              totalStaticBloomSizeKB_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              completeSequenceId_ = input.readUInt64();
              break;
            }
            case 133: {
              bitField0_ |= 0x00008000;
              dataLocality_ = input.readFloat();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              lastMajorCompactionTs_ = input.readUInt64();
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                storeCompleteSequenceId_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId>();
                mutable_bitField0_ |= 0x00020000;
              }
              storeCompleteSequenceId_.add(input.readMessage(org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          storeCompleteSequenceId_ = java.util.Collections.unmodifiableList(storeCompleteSequenceId_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RegionLoad> PARSER =
        new com.google.protobuf.AbstractParser<RegionLoad>() {
      public RegionLoad parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegionLoad(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegionLoad> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .RegionSpecifier region_specifier = 1;
    public static final int REGION_SPECIFIER_FIELD_NUMBER = 1;
    private org.hbase.async.generated.HBasePB.RegionSpecifier regionSpecifier_;
    /**
     * <code>required .RegionSpecifier region_specifier = 1;</code>
     *
     * <pre>
     ** the region specifier 
     * </pre>
     */
    public boolean hasRegionSpecifier() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .RegionSpecifier region_specifier = 1;</code>
     *
     * <pre>
     ** the region specifier 
     * </pre>
     */
    public org.hbase.async.generated.HBasePB.RegionSpecifier getRegionSpecifier() {
      return regionSpecifier_;
    }

    // optional uint32 stores = 2;
    public static final int STORES_FIELD_NUMBER = 2;
    private int stores_;
    /**
     * <code>optional uint32 stores = 2;</code>
     *
     * <pre>
     ** the number of stores for the region 
     * </pre>
     */
    public boolean hasStores() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 stores = 2;</code>
     *
     * <pre>
     ** the number of stores for the region 
     * </pre>
     */
    public int getStores() {
      return stores_;
    }

    // optional uint32 storefiles = 3;
    public static final int STOREFILES_FIELD_NUMBER = 3;
    private int storefiles_;
    /**
     * <code>optional uint32 storefiles = 3;</code>
     *
     * <pre>
     ** the number of storefiles for the region 
     * </pre>
     */
    public boolean hasStorefiles() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 storefiles = 3;</code>
     *
     * <pre>
     ** the number of storefiles for the region 
     * </pre>
     */
    public int getStorefiles() {
      return storefiles_;
    }

    // optional uint32 store_uncompressed_size_MB = 4;
    public static final int STORE_UNCOMPRESSED_SIZE_MB_FIELD_NUMBER = 4;
    private int storeUncompressedSizeMB_;
    /**
     * <code>optional uint32 store_uncompressed_size_MB = 4;</code>
     *
     * <pre>
     ** the total size of the store files for the region, uncompressed, in MB 
     * </pre>
     */
    public boolean hasStoreUncompressedSizeMB() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 store_uncompressed_size_MB = 4;</code>
     *
     * <pre>
     ** the total size of the store files for the region, uncompressed, in MB 
     * </pre>
     */
    public int getStoreUncompressedSizeMB() {
      return storeUncompressedSizeMB_;
    }

    // optional uint32 storefile_size_MB = 5;
    public static final int STOREFILE_SIZE_MB_FIELD_NUMBER = 5;
    private int storefileSizeMB_;
    /**
     * <code>optional uint32 storefile_size_MB = 5;</code>
     *
     * <pre>
     ** the current total size of the store files for the region, in MB 
     * </pre>
     */
    public boolean hasStorefileSizeMB() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 storefile_size_MB = 5;</code>
     *
     * <pre>
     ** the current total size of the store files for the region, in MB 
     * </pre>
     */
    public int getStorefileSizeMB() {
      return storefileSizeMB_;
    }

    // optional uint32 memstore_size_MB = 6;
    public static final int MEMSTORE_SIZE_MB_FIELD_NUMBER = 6;
    private int memstoreSizeMB_;
    /**
     * <code>optional uint32 memstore_size_MB = 6;</code>
     *
     * <pre>
     ** the current size of the memstore for the region, in MB 
     * </pre>
     */
    public boolean hasMemstoreSizeMB() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 memstore_size_MB = 6;</code>
     *
     * <pre>
     ** the current size of the memstore for the region, in MB 
     * </pre>
     */
    public int getMemstoreSizeMB() {
      return memstoreSizeMB_;
    }

    // optional uint32 storefile_index_size_MB = 7;
    public static final int STOREFILE_INDEX_SIZE_MB_FIELD_NUMBER = 7;
    private int storefileIndexSizeMB_;
    /**
     * <code>optional uint32 storefile_index_size_MB = 7;</code>
     *
     * <pre>
     **
     * The current total size of root-level store file indexes for the region,
     * in MB. The same as {&#64;link #rootIndexSizeKB} but in MB.
     * </pre>
     */
    public boolean hasStorefileIndexSizeMB() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 storefile_index_size_MB = 7;</code>
     *
     * <pre>
     **
     * The current total size of root-level store file indexes for the region,
     * in MB. The same as {&#64;link #rootIndexSizeKB} but in MB.
     * </pre>
     */
    public int getStorefileIndexSizeMB() {
      return storefileIndexSizeMB_;
    }

    // optional uint64 read_requests_count = 8;
    public static final int READ_REQUESTS_COUNT_FIELD_NUMBER = 8;
    private long readRequestsCount_;
    /**
     * <code>optional uint64 read_requests_count = 8;</code>
     *
     * <pre>
     ** the current total read requests made to region 
     * </pre>
     */
    public boolean hasReadRequestsCount() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint64 read_requests_count = 8;</code>
     *
     * <pre>
     ** the current total read requests made to region 
     * </pre>
     */
    public long getReadRequestsCount() {
      return readRequestsCount_;
    }

    // optional uint64 write_requests_count = 9;
    public static final int WRITE_REQUESTS_COUNT_FIELD_NUMBER = 9;
    private long writeRequestsCount_;
    /**
     * <code>optional uint64 write_requests_count = 9;</code>
     *
     * <pre>
     ** the current total write requests made to region 
     * </pre>
     */
    public boolean hasWriteRequestsCount() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint64 write_requests_count = 9;</code>
     *
     * <pre>
     ** the current total write requests made to region 
     * </pre>
     */
    public long getWriteRequestsCount() {
      return writeRequestsCount_;
    }

    // optional uint64 total_compacting_KVs = 10;
    public static final int TOTAL_COMPACTING_KVS_FIELD_NUMBER = 10;
    private long totalCompactingKVs_;
    /**
     * <code>optional uint64 total_compacting_KVs = 10;</code>
     *
     * <pre>
     ** the total compacting key values in currently running compaction 
     * </pre>
     */
    public boolean hasTotalCompactingKVs() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint64 total_compacting_KVs = 10;</code>
     *
     * <pre>
     ** the total compacting key values in currently running compaction 
     * </pre>
     */
    public long getTotalCompactingKVs() {
      return totalCompactingKVs_;
    }

    // optional uint64 current_compacted_KVs = 11;
    public static final int CURRENT_COMPACTED_KVS_FIELD_NUMBER = 11;
    private long currentCompactedKVs_;
    /**
     * <code>optional uint64 current_compacted_KVs = 11;</code>
     *
     * <pre>
     ** the completed count of key values in currently running compaction 
     * </pre>
     */
    public boolean hasCurrentCompactedKVs() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint64 current_compacted_KVs = 11;</code>
     *
     * <pre>
     ** the completed count of key values in currently running compaction 
     * </pre>
     */
    public long getCurrentCompactedKVs() {
      return currentCompactedKVs_;
    }

    // optional uint32 root_index_size_KB = 12;
    public static final int ROOT_INDEX_SIZE_KB_FIELD_NUMBER = 12;
    private int rootIndexSizeKB_;
    /**
     * <code>optional uint32 root_index_size_KB = 12;</code>
     *
     * <pre>
     ** The current total size of root-level indexes for the region, in KB. 
     * </pre>
     */
    public boolean hasRootIndexSizeKB() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 root_index_size_KB = 12;</code>
     *
     * <pre>
     ** The current total size of root-level indexes for the region, in KB. 
     * </pre>
     */
    public int getRootIndexSizeKB() {
      return rootIndexSizeKB_;
    }

    // optional uint32 total_static_index_size_KB = 13;
    public static final int TOTAL_STATIC_INDEX_SIZE_KB_FIELD_NUMBER = 13;
    private int totalStaticIndexSizeKB_;
    /**
     * <code>optional uint32 total_static_index_size_KB = 13;</code>
     *
     * <pre>
     ** The total size of all index blocks, not just the root level, in KB. 
     * </pre>
     */
    public boolean hasTotalStaticIndexSizeKB() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 total_static_index_size_KB = 13;</code>
     *
     * <pre>
     ** The total size of all index blocks, not just the root level, in KB. 
     * </pre>
     */
    public int getTotalStaticIndexSizeKB() {
      return totalStaticIndexSizeKB_;
    }

    // optional uint32 total_static_bloom_size_KB = 14;
    public static final int TOTAL_STATIC_BLOOM_SIZE_KB_FIELD_NUMBER = 14;
    private int totalStaticBloomSizeKB_;
    /**
     * <code>optional uint32 total_static_bloom_size_KB = 14;</code>
     *
     * <pre>
     **
     * The total size of all Bloom filter blocks, not just loaded into the
     * block cache, in KB.
     * </pre>
     */
    public boolean hasTotalStaticBloomSizeKB() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 total_static_bloom_size_KB = 14;</code>
     *
     * <pre>
     **
     * The total size of all Bloom filter blocks, not just loaded into the
     * block cache, in KB.
     * </pre>
     */
    public int getTotalStaticBloomSizeKB() {
      return totalStaticBloomSizeKB_;
    }

    // optional uint64 complete_sequence_id = 15;
    public static final int COMPLETE_SEQUENCE_ID_FIELD_NUMBER = 15;
    private long completeSequenceId_;
    /**
     * <code>optional uint64 complete_sequence_id = 15;</code>
     *
     * <pre>
     ** the most recent sequence Id from cache flush 
     * </pre>
     */
    public boolean hasCompleteSequenceId() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint64 complete_sequence_id = 15;</code>
     *
     * <pre>
     ** the most recent sequence Id from cache flush 
     * </pre>
     */
    public long getCompleteSequenceId() {
      return completeSequenceId_;
    }

    // optional float data_locality = 16;
    public static final int DATA_LOCALITY_FIELD_NUMBER = 16;
    private float dataLocality_;
    /**
     * <code>optional float data_locality = 16;</code>
     *
     * <pre>
     ** The current data locality for region in the regionserver 
     * </pre>
     */
    public boolean hasDataLocality() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float data_locality = 16;</code>
     *
     * <pre>
     ** The current data locality for region in the regionserver 
     * </pre>
     */
    public float getDataLocality() {
      return dataLocality_;
    }

    // optional uint64 last_major_compaction_ts = 17 [default = 0];
    public static final int LAST_MAJOR_COMPACTION_TS_FIELD_NUMBER = 17;
    private long lastMajorCompactionTs_;
    /**
     * <code>optional uint64 last_major_compaction_ts = 17 [default = 0];</code>
     */
    public boolean hasLastMajorCompactionTs() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint64 last_major_compaction_ts = 17 [default = 0];</code>
     */
    public long getLastMajorCompactionTs() {
      return lastMajorCompactionTs_;
    }

    // repeated .StoreSequenceId store_complete_sequence_id = 18;
    public static final int STORE_COMPLETE_SEQUENCE_ID_FIELD_NUMBER = 18;
    private java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> storeCompleteSequenceId_;
    /**
     * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
     *
     * <pre>
     ** the most recent sequence Id of store from cache flush 
     * </pre>
     */
    public java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> getStoreCompleteSequenceIdList() {
      return storeCompleteSequenceId_;
    }
    /**
     * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
     *
     * <pre>
     ** the most recent sequence Id of store from cache flush 
     * </pre>
     */
    public java.util.List<? extends org.hbase.async.generated.ClusterStatusPB.StoreSequenceIdOrBuilder> 
        getStoreCompleteSequenceIdOrBuilderList() {
      return storeCompleteSequenceId_;
    }
    /**
     * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
     *
     * <pre>
     ** the most recent sequence Id of store from cache flush 
     * </pre>
     */
    public int getStoreCompleteSequenceIdCount() {
      return storeCompleteSequenceId_.size();
    }
    /**
     * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
     *
     * <pre>
     ** the most recent sequence Id of store from cache flush 
     * </pre>
     */
    public org.hbase.async.generated.ClusterStatusPB.StoreSequenceId getStoreCompleteSequenceId(int index) {
      return storeCompleteSequenceId_.get(index);
    }
    /**
     * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
     *
     * <pre>
     ** the most recent sequence Id of store from cache flush 
     * </pre>
     */
    public org.hbase.async.generated.ClusterStatusPB.StoreSequenceIdOrBuilder getStoreCompleteSequenceIdOrBuilder(
        int index) {
      return storeCompleteSequenceId_.get(index);
    }

    private void initFields() {
      regionSpecifier_ = org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance();
      stores_ = 0;
      storefiles_ = 0;
      storeUncompressedSizeMB_ = 0;
      storefileSizeMB_ = 0;
      memstoreSizeMB_ = 0;
      storefileIndexSizeMB_ = 0;
      readRequestsCount_ = 0L;
      writeRequestsCount_ = 0L;
      totalCompactingKVs_ = 0L;
      currentCompactedKVs_ = 0L;
      rootIndexSizeKB_ = 0;
      totalStaticIndexSizeKB_ = 0;
      totalStaticBloomSizeKB_ = 0;
      completeSequenceId_ = 0L;
      dataLocality_ = 0F;
      lastMajorCompactionTs_ = 0L;
      storeCompleteSequenceId_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRegionSpecifier()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRegionSpecifier().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getStoreCompleteSequenceIdCount(); i++) {
        if (!getStoreCompleteSequenceId(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, regionSpecifier_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, stores_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, storefiles_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, storeUncompressedSizeMB_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, storefileSizeMB_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, memstoreSizeMB_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, storefileIndexSizeMB_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt64(8, readRequestsCount_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt64(9, writeRequestsCount_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt64(10, totalCompactingKVs_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt64(11, currentCompactedKVs_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, rootIndexSizeKB_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, totalStaticIndexSizeKB_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, totalStaticBloomSizeKB_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt64(15, completeSequenceId_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(16, dataLocality_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt64(17, lastMajorCompactionTs_);
      }
      for (int i = 0; i < storeCompleteSequenceId_.size(); i++) {
        output.writeMessage(18, storeCompleteSequenceId_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, regionSpecifier_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, stores_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, storefiles_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, storeUncompressedSizeMB_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, storefileSizeMB_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, memstoreSizeMB_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, storefileIndexSizeMB_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, readRequestsCount_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(9, writeRequestsCount_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(10, totalCompactingKVs_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(11, currentCompactedKVs_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, rootIndexSizeKB_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, totalStaticIndexSizeKB_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, totalStaticBloomSizeKB_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(15, completeSequenceId_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, dataLocality_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(17, lastMajorCompactionTs_);
      }
      for (int i = 0; i < storeCompleteSequenceId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, storeCompleteSequenceId_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.RegionLoad parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.RegionLoad prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code RegionLoad}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.RegionLoad, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.RegionLoadOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.RegionLoad.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        regionSpecifier_ = org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        stores_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        storefiles_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        storeUncompressedSizeMB_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        storefileSizeMB_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        memstoreSizeMB_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        storefileIndexSizeMB_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        readRequestsCount_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        writeRequestsCount_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        totalCompactingKVs_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000200);
        currentCompactedKVs_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000400);
        rootIndexSizeKB_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        totalStaticIndexSizeKB_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        totalStaticBloomSizeKB_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        completeSequenceId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        dataLocality_ = 0F;
        bitField0_ = (bitField0_ & ~0x00008000);
        lastMajorCompactionTs_ = 0L;
        bitField0_ = (bitField0_ & ~0x00010000);
        storeCompleteSequenceId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionLoad getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.RegionLoad.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionLoad build() {
        org.hbase.async.generated.ClusterStatusPB.RegionLoad result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.RegionLoad buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.RegionLoad result = new org.hbase.async.generated.ClusterStatusPB.RegionLoad(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.regionSpecifier_ = regionSpecifier_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.stores_ = stores_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.storefiles_ = storefiles_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.storeUncompressedSizeMB_ = storeUncompressedSizeMB_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.storefileSizeMB_ = storefileSizeMB_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.memstoreSizeMB_ = memstoreSizeMB_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.storefileIndexSizeMB_ = storefileIndexSizeMB_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.readRequestsCount_ = readRequestsCount_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.writeRequestsCount_ = writeRequestsCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.totalCompactingKVs_ = totalCompactingKVs_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.currentCompactedKVs_ = currentCompactedKVs_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rootIndexSizeKB_ = rootIndexSizeKB_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.totalStaticIndexSizeKB_ = totalStaticIndexSizeKB_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.totalStaticBloomSizeKB_ = totalStaticBloomSizeKB_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.completeSequenceId_ = completeSequenceId_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.dataLocality_ = dataLocality_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.lastMajorCompactionTs_ = lastMajorCompactionTs_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          storeCompleteSequenceId_ = java.util.Collections.unmodifiableList(storeCompleteSequenceId_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.storeCompleteSequenceId_ = storeCompleteSequenceId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.RegionLoad other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.RegionLoad.getDefaultInstance()) return this;
        if (other.hasRegionSpecifier()) {
          mergeRegionSpecifier(other.getRegionSpecifier());
        }
        if (other.hasStores()) {
          setStores(other.getStores());
        }
        if (other.hasStorefiles()) {
          setStorefiles(other.getStorefiles());
        }
        if (other.hasStoreUncompressedSizeMB()) {
          setStoreUncompressedSizeMB(other.getStoreUncompressedSizeMB());
        }
        if (other.hasStorefileSizeMB()) {
          setStorefileSizeMB(other.getStorefileSizeMB());
        }
        if (other.hasMemstoreSizeMB()) {
          setMemstoreSizeMB(other.getMemstoreSizeMB());
        }
        if (other.hasStorefileIndexSizeMB()) {
          setStorefileIndexSizeMB(other.getStorefileIndexSizeMB());
        }
        if (other.hasReadRequestsCount()) {
          setReadRequestsCount(other.getReadRequestsCount());
        }
        if (other.hasWriteRequestsCount()) {
          setWriteRequestsCount(other.getWriteRequestsCount());
        }
        if (other.hasTotalCompactingKVs()) {
          setTotalCompactingKVs(other.getTotalCompactingKVs());
        }
        if (other.hasCurrentCompactedKVs()) {
          setCurrentCompactedKVs(other.getCurrentCompactedKVs());
        }
        if (other.hasRootIndexSizeKB()) {
          setRootIndexSizeKB(other.getRootIndexSizeKB());
        }
        if (other.hasTotalStaticIndexSizeKB()) {
          setTotalStaticIndexSizeKB(other.getTotalStaticIndexSizeKB());
        }
        if (other.hasTotalStaticBloomSizeKB()) {
          setTotalStaticBloomSizeKB(other.getTotalStaticBloomSizeKB());
        }
        if (other.hasCompleteSequenceId()) {
          setCompleteSequenceId(other.getCompleteSequenceId());
        }
        if (other.hasDataLocality()) {
          setDataLocality(other.getDataLocality());
        }
        if (other.hasLastMajorCompactionTs()) {
          setLastMajorCompactionTs(other.getLastMajorCompactionTs());
        }
        if (!other.storeCompleteSequenceId_.isEmpty()) {
          if (storeCompleteSequenceId_.isEmpty()) {
            storeCompleteSequenceId_ = other.storeCompleteSequenceId_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureStoreCompleteSequenceIdIsMutable();
            storeCompleteSequenceId_.addAll(other.storeCompleteSequenceId_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRegionSpecifier()) {
          
          return false;
        }
        if (!getRegionSpecifier().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getStoreCompleteSequenceIdCount(); i++) {
          if (!getStoreCompleteSequenceId(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.RegionLoad parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.RegionLoad) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .RegionSpecifier region_specifier = 1;
      private org.hbase.async.generated.HBasePB.RegionSpecifier regionSpecifier_ = org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance();
      /**
       * <code>required .RegionSpecifier region_specifier = 1;</code>
       *
       * <pre>
       ** the region specifier 
       * </pre>
       */
      public boolean hasRegionSpecifier() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .RegionSpecifier region_specifier = 1;</code>
       *
       * <pre>
       ** the region specifier 
       * </pre>
       */
      public org.hbase.async.generated.HBasePB.RegionSpecifier getRegionSpecifier() {
        return regionSpecifier_;
      }
      /**
       * <code>required .RegionSpecifier region_specifier = 1;</code>
       *
       * <pre>
       ** the region specifier 
       * </pre>
       */
      public Builder setRegionSpecifier(org.hbase.async.generated.HBasePB.RegionSpecifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        regionSpecifier_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionSpecifier region_specifier = 1;</code>
       *
       * <pre>
       ** the region specifier 
       * </pre>
       */
      public Builder setRegionSpecifier(
          org.hbase.async.generated.HBasePB.RegionSpecifier.Builder builderForValue) {
        regionSpecifier_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionSpecifier region_specifier = 1;</code>
       *
       * <pre>
       ** the region specifier 
       * </pre>
       */
      public Builder mergeRegionSpecifier(org.hbase.async.generated.HBasePB.RegionSpecifier value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            regionSpecifier_ != org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance()) {
          regionSpecifier_ =
            org.hbase.async.generated.HBasePB.RegionSpecifier.newBuilder(regionSpecifier_).mergeFrom(value).buildPartial();
        } else {
          regionSpecifier_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .RegionSpecifier region_specifier = 1;</code>
       *
       * <pre>
       ** the region specifier 
       * </pre>
       */
      public Builder clearRegionSpecifier() {
        regionSpecifier_ = org.hbase.async.generated.HBasePB.RegionSpecifier.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional uint32 stores = 2;
      private int stores_ ;
      /**
       * <code>optional uint32 stores = 2;</code>
       *
       * <pre>
       ** the number of stores for the region 
       * </pre>
       */
      public boolean hasStores() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 stores = 2;</code>
       *
       * <pre>
       ** the number of stores for the region 
       * </pre>
       */
      public int getStores() {
        return stores_;
      }
      /**
       * <code>optional uint32 stores = 2;</code>
       *
       * <pre>
       ** the number of stores for the region 
       * </pre>
       */
      public Builder setStores(int value) {
        bitField0_ |= 0x00000002;
        stores_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 stores = 2;</code>
       *
       * <pre>
       ** the number of stores for the region 
       * </pre>
       */
      public Builder clearStores() {
        bitField0_ = (bitField0_ & ~0x00000002);
        stores_ = 0;
        
        return this;
      }

      // optional uint32 storefiles = 3;
      private int storefiles_ ;
      /**
       * <code>optional uint32 storefiles = 3;</code>
       *
       * <pre>
       ** the number of storefiles for the region 
       * </pre>
       */
      public boolean hasStorefiles() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 storefiles = 3;</code>
       *
       * <pre>
       ** the number of storefiles for the region 
       * </pre>
       */
      public int getStorefiles() {
        return storefiles_;
      }
      /**
       * <code>optional uint32 storefiles = 3;</code>
       *
       * <pre>
       ** the number of storefiles for the region 
       * </pre>
       */
      public Builder setStorefiles(int value) {
        bitField0_ |= 0x00000004;
        storefiles_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 storefiles = 3;</code>
       *
       * <pre>
       ** the number of storefiles for the region 
       * </pre>
       */
      public Builder clearStorefiles() {
        bitField0_ = (bitField0_ & ~0x00000004);
        storefiles_ = 0;
        
        return this;
      }

      // optional uint32 store_uncompressed_size_MB = 4;
      private int storeUncompressedSizeMB_ ;
      /**
       * <code>optional uint32 store_uncompressed_size_MB = 4;</code>
       *
       * <pre>
       ** the total size of the store files for the region, uncompressed, in MB 
       * </pre>
       */
      public boolean hasStoreUncompressedSizeMB() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 store_uncompressed_size_MB = 4;</code>
       *
       * <pre>
       ** the total size of the store files for the region, uncompressed, in MB 
       * </pre>
       */
      public int getStoreUncompressedSizeMB() {
        return storeUncompressedSizeMB_;
      }
      /**
       * <code>optional uint32 store_uncompressed_size_MB = 4;</code>
       *
       * <pre>
       ** the total size of the store files for the region, uncompressed, in MB 
       * </pre>
       */
      public Builder setStoreUncompressedSizeMB(int value) {
        bitField0_ |= 0x00000008;
        storeUncompressedSizeMB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 store_uncompressed_size_MB = 4;</code>
       *
       * <pre>
       ** the total size of the store files for the region, uncompressed, in MB 
       * </pre>
       */
      public Builder clearStoreUncompressedSizeMB() {
        bitField0_ = (bitField0_ & ~0x00000008);
        storeUncompressedSizeMB_ = 0;
        
        return this;
      }

      // optional uint32 storefile_size_MB = 5;
      private int storefileSizeMB_ ;
      /**
       * <code>optional uint32 storefile_size_MB = 5;</code>
       *
       * <pre>
       ** the current total size of the store files for the region, in MB 
       * </pre>
       */
      public boolean hasStorefileSizeMB() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 storefile_size_MB = 5;</code>
       *
       * <pre>
       ** the current total size of the store files for the region, in MB 
       * </pre>
       */
      public int getStorefileSizeMB() {
        return storefileSizeMB_;
      }
      /**
       * <code>optional uint32 storefile_size_MB = 5;</code>
       *
       * <pre>
       ** the current total size of the store files for the region, in MB 
       * </pre>
       */
      public Builder setStorefileSizeMB(int value) {
        bitField0_ |= 0x00000010;
        storefileSizeMB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 storefile_size_MB = 5;</code>
       *
       * <pre>
       ** the current total size of the store files for the region, in MB 
       * </pre>
       */
      public Builder clearStorefileSizeMB() {
        bitField0_ = (bitField0_ & ~0x00000010);
        storefileSizeMB_ = 0;
        
        return this;
      }

      // optional uint32 memstore_size_MB = 6;
      private int memstoreSizeMB_ ;
      /**
       * <code>optional uint32 memstore_size_MB = 6;</code>
       *
       * <pre>
       ** the current size of the memstore for the region, in MB 
       * </pre>
       */
      public boolean hasMemstoreSizeMB() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 memstore_size_MB = 6;</code>
       *
       * <pre>
       ** the current size of the memstore for the region, in MB 
       * </pre>
       */
      public int getMemstoreSizeMB() {
        return memstoreSizeMB_;
      }
      /**
       * <code>optional uint32 memstore_size_MB = 6;</code>
       *
       * <pre>
       ** the current size of the memstore for the region, in MB 
       * </pre>
       */
      public Builder setMemstoreSizeMB(int value) {
        bitField0_ |= 0x00000020;
        memstoreSizeMB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 memstore_size_MB = 6;</code>
       *
       * <pre>
       ** the current size of the memstore for the region, in MB 
       * </pre>
       */
      public Builder clearMemstoreSizeMB() {
        bitField0_ = (bitField0_ & ~0x00000020);
        memstoreSizeMB_ = 0;
        
        return this;
      }

      // optional uint32 storefile_index_size_MB = 7;
      private int storefileIndexSizeMB_ ;
      /**
       * <code>optional uint32 storefile_index_size_MB = 7;</code>
       *
       * <pre>
       **
       * The current total size of root-level store file indexes for the region,
       * in MB. The same as {&#64;link #rootIndexSizeKB} but in MB.
       * </pre>
       */
      public boolean hasStorefileIndexSizeMB() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 storefile_index_size_MB = 7;</code>
       *
       * <pre>
       **
       * The current total size of root-level store file indexes for the region,
       * in MB. The same as {&#64;link #rootIndexSizeKB} but in MB.
       * </pre>
       */
      public int getStorefileIndexSizeMB() {
        return storefileIndexSizeMB_;
      }
      /**
       * <code>optional uint32 storefile_index_size_MB = 7;</code>
       *
       * <pre>
       **
       * The current total size of root-level store file indexes for the region,
       * in MB. The same as {&#64;link #rootIndexSizeKB} but in MB.
       * </pre>
       */
      public Builder setStorefileIndexSizeMB(int value) {
        bitField0_ |= 0x00000040;
        storefileIndexSizeMB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 storefile_index_size_MB = 7;</code>
       *
       * <pre>
       **
       * The current total size of root-level store file indexes for the region,
       * in MB. The same as {&#64;link #rootIndexSizeKB} but in MB.
       * </pre>
       */
      public Builder clearStorefileIndexSizeMB() {
        bitField0_ = (bitField0_ & ~0x00000040);
        storefileIndexSizeMB_ = 0;
        
        return this;
      }

      // optional uint64 read_requests_count = 8;
      private long readRequestsCount_ ;
      /**
       * <code>optional uint64 read_requests_count = 8;</code>
       *
       * <pre>
       ** the current total read requests made to region 
       * </pre>
       */
      public boolean hasReadRequestsCount() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint64 read_requests_count = 8;</code>
       *
       * <pre>
       ** the current total read requests made to region 
       * </pre>
       */
      public long getReadRequestsCount() {
        return readRequestsCount_;
      }
      /**
       * <code>optional uint64 read_requests_count = 8;</code>
       *
       * <pre>
       ** the current total read requests made to region 
       * </pre>
       */
      public Builder setReadRequestsCount(long value) {
        bitField0_ |= 0x00000080;
        readRequestsCount_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 read_requests_count = 8;</code>
       *
       * <pre>
       ** the current total read requests made to region 
       * </pre>
       */
      public Builder clearReadRequestsCount() {
        bitField0_ = (bitField0_ & ~0x00000080);
        readRequestsCount_ = 0L;
        
        return this;
      }

      // optional uint64 write_requests_count = 9;
      private long writeRequestsCount_ ;
      /**
       * <code>optional uint64 write_requests_count = 9;</code>
       *
       * <pre>
       ** the current total write requests made to region 
       * </pre>
       */
      public boolean hasWriteRequestsCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint64 write_requests_count = 9;</code>
       *
       * <pre>
       ** the current total write requests made to region 
       * </pre>
       */
      public long getWriteRequestsCount() {
        return writeRequestsCount_;
      }
      /**
       * <code>optional uint64 write_requests_count = 9;</code>
       *
       * <pre>
       ** the current total write requests made to region 
       * </pre>
       */
      public Builder setWriteRequestsCount(long value) {
        bitField0_ |= 0x00000100;
        writeRequestsCount_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 write_requests_count = 9;</code>
       *
       * <pre>
       ** the current total write requests made to region 
       * </pre>
       */
      public Builder clearWriteRequestsCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        writeRequestsCount_ = 0L;
        
        return this;
      }

      // optional uint64 total_compacting_KVs = 10;
      private long totalCompactingKVs_ ;
      /**
       * <code>optional uint64 total_compacting_KVs = 10;</code>
       *
       * <pre>
       ** the total compacting key values in currently running compaction 
       * </pre>
       */
      public boolean hasTotalCompactingKVs() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint64 total_compacting_KVs = 10;</code>
       *
       * <pre>
       ** the total compacting key values in currently running compaction 
       * </pre>
       */
      public long getTotalCompactingKVs() {
        return totalCompactingKVs_;
      }
      /**
       * <code>optional uint64 total_compacting_KVs = 10;</code>
       *
       * <pre>
       ** the total compacting key values in currently running compaction 
       * </pre>
       */
      public Builder setTotalCompactingKVs(long value) {
        bitField0_ |= 0x00000200;
        totalCompactingKVs_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 total_compacting_KVs = 10;</code>
       *
       * <pre>
       ** the total compacting key values in currently running compaction 
       * </pre>
       */
      public Builder clearTotalCompactingKVs() {
        bitField0_ = (bitField0_ & ~0x00000200);
        totalCompactingKVs_ = 0L;
        
        return this;
      }

      // optional uint64 current_compacted_KVs = 11;
      private long currentCompactedKVs_ ;
      /**
       * <code>optional uint64 current_compacted_KVs = 11;</code>
       *
       * <pre>
       ** the completed count of key values in currently running compaction 
       * </pre>
       */
      public boolean hasCurrentCompactedKVs() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint64 current_compacted_KVs = 11;</code>
       *
       * <pre>
       ** the completed count of key values in currently running compaction 
       * </pre>
       */
      public long getCurrentCompactedKVs() {
        return currentCompactedKVs_;
      }
      /**
       * <code>optional uint64 current_compacted_KVs = 11;</code>
       *
       * <pre>
       ** the completed count of key values in currently running compaction 
       * </pre>
       */
      public Builder setCurrentCompactedKVs(long value) {
        bitField0_ |= 0x00000400;
        currentCompactedKVs_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 current_compacted_KVs = 11;</code>
       *
       * <pre>
       ** the completed count of key values in currently running compaction 
       * </pre>
       */
      public Builder clearCurrentCompactedKVs() {
        bitField0_ = (bitField0_ & ~0x00000400);
        currentCompactedKVs_ = 0L;
        
        return this;
      }

      // optional uint32 root_index_size_KB = 12;
      private int rootIndexSizeKB_ ;
      /**
       * <code>optional uint32 root_index_size_KB = 12;</code>
       *
       * <pre>
       ** The current total size of root-level indexes for the region, in KB. 
       * </pre>
       */
      public boolean hasRootIndexSizeKB() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 root_index_size_KB = 12;</code>
       *
       * <pre>
       ** The current total size of root-level indexes for the region, in KB. 
       * </pre>
       */
      public int getRootIndexSizeKB() {
        return rootIndexSizeKB_;
      }
      /**
       * <code>optional uint32 root_index_size_KB = 12;</code>
       *
       * <pre>
       ** The current total size of root-level indexes for the region, in KB. 
       * </pre>
       */
      public Builder setRootIndexSizeKB(int value) {
        bitField0_ |= 0x00000800;
        rootIndexSizeKB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 root_index_size_KB = 12;</code>
       *
       * <pre>
       ** The current total size of root-level indexes for the region, in KB. 
       * </pre>
       */
      public Builder clearRootIndexSizeKB() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rootIndexSizeKB_ = 0;
        
        return this;
      }

      // optional uint32 total_static_index_size_KB = 13;
      private int totalStaticIndexSizeKB_ ;
      /**
       * <code>optional uint32 total_static_index_size_KB = 13;</code>
       *
       * <pre>
       ** The total size of all index blocks, not just the root level, in KB. 
       * </pre>
       */
      public boolean hasTotalStaticIndexSizeKB() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 total_static_index_size_KB = 13;</code>
       *
       * <pre>
       ** The total size of all index blocks, not just the root level, in KB. 
       * </pre>
       */
      public int getTotalStaticIndexSizeKB() {
        return totalStaticIndexSizeKB_;
      }
      /**
       * <code>optional uint32 total_static_index_size_KB = 13;</code>
       *
       * <pre>
       ** The total size of all index blocks, not just the root level, in KB. 
       * </pre>
       */
      public Builder setTotalStaticIndexSizeKB(int value) {
        bitField0_ |= 0x00001000;
        totalStaticIndexSizeKB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 total_static_index_size_KB = 13;</code>
       *
       * <pre>
       ** The total size of all index blocks, not just the root level, in KB. 
       * </pre>
       */
      public Builder clearTotalStaticIndexSizeKB() {
        bitField0_ = (bitField0_ & ~0x00001000);
        totalStaticIndexSizeKB_ = 0;
        
        return this;
      }

      // optional uint32 total_static_bloom_size_KB = 14;
      private int totalStaticBloomSizeKB_ ;
      /**
       * <code>optional uint32 total_static_bloom_size_KB = 14;</code>
       *
       * <pre>
       **
       * The total size of all Bloom filter blocks, not just loaded into the
       * block cache, in KB.
       * </pre>
       */
      public boolean hasTotalStaticBloomSizeKB() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 total_static_bloom_size_KB = 14;</code>
       *
       * <pre>
       **
       * The total size of all Bloom filter blocks, not just loaded into the
       * block cache, in KB.
       * </pre>
       */
      public int getTotalStaticBloomSizeKB() {
        return totalStaticBloomSizeKB_;
      }
      /**
       * <code>optional uint32 total_static_bloom_size_KB = 14;</code>
       *
       * <pre>
       **
       * The total size of all Bloom filter blocks, not just loaded into the
       * block cache, in KB.
       * </pre>
       */
      public Builder setTotalStaticBloomSizeKB(int value) {
        bitField0_ |= 0x00002000;
        totalStaticBloomSizeKB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 total_static_bloom_size_KB = 14;</code>
       *
       * <pre>
       **
       * The total size of all Bloom filter blocks, not just loaded into the
       * block cache, in KB.
       * </pre>
       */
      public Builder clearTotalStaticBloomSizeKB() {
        bitField0_ = (bitField0_ & ~0x00002000);
        totalStaticBloomSizeKB_ = 0;
        
        return this;
      }

      // optional uint64 complete_sequence_id = 15;
      private long completeSequenceId_ ;
      /**
       * <code>optional uint64 complete_sequence_id = 15;</code>
       *
       * <pre>
       ** the most recent sequence Id from cache flush 
       * </pre>
       */
      public boolean hasCompleteSequenceId() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint64 complete_sequence_id = 15;</code>
       *
       * <pre>
       ** the most recent sequence Id from cache flush 
       * </pre>
       */
      public long getCompleteSequenceId() {
        return completeSequenceId_;
      }
      /**
       * <code>optional uint64 complete_sequence_id = 15;</code>
       *
       * <pre>
       ** the most recent sequence Id from cache flush 
       * </pre>
       */
      public Builder setCompleteSequenceId(long value) {
        bitField0_ |= 0x00004000;
        completeSequenceId_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 complete_sequence_id = 15;</code>
       *
       * <pre>
       ** the most recent sequence Id from cache flush 
       * </pre>
       */
      public Builder clearCompleteSequenceId() {
        bitField0_ = (bitField0_ & ~0x00004000);
        completeSequenceId_ = 0L;
        
        return this;
      }

      // optional float data_locality = 16;
      private float dataLocality_ ;
      /**
       * <code>optional float data_locality = 16;</code>
       *
       * <pre>
       ** The current data locality for region in the regionserver 
       * </pre>
       */
      public boolean hasDataLocality() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float data_locality = 16;</code>
       *
       * <pre>
       ** The current data locality for region in the regionserver 
       * </pre>
       */
      public float getDataLocality() {
        return dataLocality_;
      }
      /**
       * <code>optional float data_locality = 16;</code>
       *
       * <pre>
       ** The current data locality for region in the regionserver 
       * </pre>
       */
      public Builder setDataLocality(float value) {
        bitField0_ |= 0x00008000;
        dataLocality_ = value;
        
        return this;
      }
      /**
       * <code>optional float data_locality = 16;</code>
       *
       * <pre>
       ** The current data locality for region in the regionserver 
       * </pre>
       */
      public Builder clearDataLocality() {
        bitField0_ = (bitField0_ & ~0x00008000);
        dataLocality_ = 0F;
        
        return this;
      }

      // optional uint64 last_major_compaction_ts = 17 [default = 0];
      private long lastMajorCompactionTs_ ;
      /**
       * <code>optional uint64 last_major_compaction_ts = 17 [default = 0];</code>
       */
      public boolean hasLastMajorCompactionTs() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint64 last_major_compaction_ts = 17 [default = 0];</code>
       */
      public long getLastMajorCompactionTs() {
        return lastMajorCompactionTs_;
      }
      /**
       * <code>optional uint64 last_major_compaction_ts = 17 [default = 0];</code>
       */
      public Builder setLastMajorCompactionTs(long value) {
        bitField0_ |= 0x00010000;
        lastMajorCompactionTs_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 last_major_compaction_ts = 17 [default = 0];</code>
       */
      public Builder clearLastMajorCompactionTs() {
        bitField0_ = (bitField0_ & ~0x00010000);
        lastMajorCompactionTs_ = 0L;
        
        return this;
      }

      // repeated .StoreSequenceId store_complete_sequence_id = 18;
      private java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> storeCompleteSequenceId_ =
        java.util.Collections.emptyList();
      private void ensureStoreCompleteSequenceIdIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          storeCompleteSequenceId_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId>(storeCompleteSequenceId_);
          bitField0_ |= 0x00020000;
         }
      }

      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public java.util.List<org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> getStoreCompleteSequenceIdList() {
        return java.util.Collections.unmodifiableList(storeCompleteSequenceId_);
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public int getStoreCompleteSequenceIdCount() {
        return storeCompleteSequenceId_.size();
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public org.hbase.async.generated.ClusterStatusPB.StoreSequenceId getStoreCompleteSequenceId(int index) {
        return storeCompleteSequenceId_.get(index);
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder setStoreCompleteSequenceId(
          int index, org.hbase.async.generated.ClusterStatusPB.StoreSequenceId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStoreCompleteSequenceIdIsMutable();
        storeCompleteSequenceId_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder setStoreCompleteSequenceId(
          int index, org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.Builder builderForValue) {
        ensureStoreCompleteSequenceIdIsMutable();
        storeCompleteSequenceId_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder addStoreCompleteSequenceId(org.hbase.async.generated.ClusterStatusPB.StoreSequenceId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStoreCompleteSequenceIdIsMutable();
        storeCompleteSequenceId_.add(value);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder addStoreCompleteSequenceId(
          int index, org.hbase.async.generated.ClusterStatusPB.StoreSequenceId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStoreCompleteSequenceIdIsMutable();
        storeCompleteSequenceId_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder addStoreCompleteSequenceId(
          org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.Builder builderForValue) {
        ensureStoreCompleteSequenceIdIsMutable();
        storeCompleteSequenceId_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder addStoreCompleteSequenceId(
          int index, org.hbase.async.generated.ClusterStatusPB.StoreSequenceId.Builder builderForValue) {
        ensureStoreCompleteSequenceIdIsMutable();
        storeCompleteSequenceId_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder addAllStoreCompleteSequenceId(
          java.lang.Iterable<? extends org.hbase.async.generated.ClusterStatusPB.StoreSequenceId> values) {
        ensureStoreCompleteSequenceIdIsMutable();
        super.addAll(values, storeCompleteSequenceId_);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder clearStoreCompleteSequenceId() {
        storeCompleteSequenceId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);

        return this;
      }
      /**
       * <code>repeated .StoreSequenceId store_complete_sequence_id = 18;</code>
       *
       * <pre>
       ** the most recent sequence Id of store from cache flush 
       * </pre>
       */
      public Builder removeStoreCompleteSequenceId(int index) {
        ensureStoreCompleteSequenceIdIsMutable();
        storeCompleteSequenceId_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:RegionLoad)
    }

    static {
      defaultInstance = new RegionLoad(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RegionLoad)
  }

  public interface ReplicationLoadSinkOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint64 ageOfLastAppliedOp = 1;
    /**
     * <code>required uint64 ageOfLastAppliedOp = 1;</code>
     */
    boolean hasAgeOfLastAppliedOp();
    /**
     * <code>required uint64 ageOfLastAppliedOp = 1;</code>
     */
    long getAgeOfLastAppliedOp();

    // required uint64 timeStampsOfLastAppliedOp = 2;
    /**
     * <code>required uint64 timeStampsOfLastAppliedOp = 2;</code>
     */
    boolean hasTimeStampsOfLastAppliedOp();
    /**
     * <code>required uint64 timeStampsOfLastAppliedOp = 2;</code>
     */
    long getTimeStampsOfLastAppliedOp();
  }
  /**
   * Protobuf type {@code ReplicationLoadSink}
   */
  public static final class ReplicationLoadSink extends
      com.google.protobuf.GeneratedMessageLite
      implements ReplicationLoadSinkOrBuilder {
    // Use ReplicationLoadSink.newBuilder() to construct.
    private ReplicationLoadSink(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ReplicationLoadSink(boolean noInit) {}

    private static final ReplicationLoadSink defaultInstance;
    public static ReplicationLoadSink getDefaultInstance() {
      return defaultInstance;
    }

    public ReplicationLoadSink getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ReplicationLoadSink(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              ageOfLastAppliedOp_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              timeStampsOfLastAppliedOp_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ReplicationLoadSink> PARSER =
        new com.google.protobuf.AbstractParser<ReplicationLoadSink>() {
      public ReplicationLoadSink parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReplicationLoadSink(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReplicationLoadSink> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 ageOfLastAppliedOp = 1;
    public static final int AGEOFLASTAPPLIEDOP_FIELD_NUMBER = 1;
    private long ageOfLastAppliedOp_;
    /**
     * <code>required uint64 ageOfLastAppliedOp = 1;</code>
     */
    public boolean hasAgeOfLastAppliedOp() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 ageOfLastAppliedOp = 1;</code>
     */
    public long getAgeOfLastAppliedOp() {
      return ageOfLastAppliedOp_;
    }

    // required uint64 timeStampsOfLastAppliedOp = 2;
    public static final int TIMESTAMPSOFLASTAPPLIEDOP_FIELD_NUMBER = 2;
    private long timeStampsOfLastAppliedOp_;
    /**
     * <code>required uint64 timeStampsOfLastAppliedOp = 2;</code>
     */
    public boolean hasTimeStampsOfLastAppliedOp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 timeStampsOfLastAppliedOp = 2;</code>
     */
    public long getTimeStampsOfLastAppliedOp() {
      return timeStampsOfLastAppliedOp_;
    }

    private void initFields() {
      ageOfLastAppliedOp_ = 0L;
      timeStampsOfLastAppliedOp_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasAgeOfLastAppliedOp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimeStampsOfLastAppliedOp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, ageOfLastAppliedOp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, timeStampsOfLastAppliedOp_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, ageOfLastAppliedOp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, timeStampsOfLastAppliedOp_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ReplicationLoadSink}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSinkOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        ageOfLastAppliedOp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        timeStampsOfLastAppliedOp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink build() {
        org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink result = new org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.ageOfLastAppliedOp_ = ageOfLastAppliedOp_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.timeStampsOfLastAppliedOp_ = timeStampsOfLastAppliedOp_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.getDefaultInstance()) return this;
        if (other.hasAgeOfLastAppliedOp()) {
          setAgeOfLastAppliedOp(other.getAgeOfLastAppliedOp());
        }
        if (other.hasTimeStampsOfLastAppliedOp()) {
          setTimeStampsOfLastAppliedOp(other.getTimeStampsOfLastAppliedOp());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAgeOfLastAppliedOp()) {
          
          return false;
        }
        if (!hasTimeStampsOfLastAppliedOp()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 ageOfLastAppliedOp = 1;
      private long ageOfLastAppliedOp_ ;
      /**
       * <code>required uint64 ageOfLastAppliedOp = 1;</code>
       */
      public boolean hasAgeOfLastAppliedOp() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 ageOfLastAppliedOp = 1;</code>
       */
      public long getAgeOfLastAppliedOp() {
        return ageOfLastAppliedOp_;
      }
      /**
       * <code>required uint64 ageOfLastAppliedOp = 1;</code>
       */
      public Builder setAgeOfLastAppliedOp(long value) {
        bitField0_ |= 0x00000001;
        ageOfLastAppliedOp_ = value;
        
        return this;
      }
      /**
       * <code>required uint64 ageOfLastAppliedOp = 1;</code>
       */
      public Builder clearAgeOfLastAppliedOp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ageOfLastAppliedOp_ = 0L;
        
        return this;
      }

      // required uint64 timeStampsOfLastAppliedOp = 2;
      private long timeStampsOfLastAppliedOp_ ;
      /**
       * <code>required uint64 timeStampsOfLastAppliedOp = 2;</code>
       */
      public boolean hasTimeStampsOfLastAppliedOp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 timeStampsOfLastAppliedOp = 2;</code>
       */
      public long getTimeStampsOfLastAppliedOp() {
        return timeStampsOfLastAppliedOp_;
      }
      /**
       * <code>required uint64 timeStampsOfLastAppliedOp = 2;</code>
       */
      public Builder setTimeStampsOfLastAppliedOp(long value) {
        bitField0_ |= 0x00000002;
        timeStampsOfLastAppliedOp_ = value;
        
        return this;
      }
      /**
       * <code>required uint64 timeStampsOfLastAppliedOp = 2;</code>
       */
      public Builder clearTimeStampsOfLastAppliedOp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timeStampsOfLastAppliedOp_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ReplicationLoadSink)
    }

    static {
      defaultInstance = new ReplicationLoadSink(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ReplicationLoadSink)
  }

  public interface ReplicationLoadSourceOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string peerID = 1;
    /**
     * <code>required string peerID = 1;</code>
     */
    boolean hasPeerID();
    /**
     * <code>required string peerID = 1;</code>
     */
    java.lang.String getPeerID();
    /**
     * <code>required string peerID = 1;</code>
     */
    com.google.protobuf.ByteString
        getPeerIDBytes();

    // required uint64 ageOfLastShippedOp = 2;
    /**
     * <code>required uint64 ageOfLastShippedOp = 2;</code>
     */
    boolean hasAgeOfLastShippedOp();
    /**
     * <code>required uint64 ageOfLastShippedOp = 2;</code>
     */
    long getAgeOfLastShippedOp();

    // required uint32 sizeOfLogQueue = 3;
    /**
     * <code>required uint32 sizeOfLogQueue = 3;</code>
     */
    boolean hasSizeOfLogQueue();
    /**
     * <code>required uint32 sizeOfLogQueue = 3;</code>
     */
    int getSizeOfLogQueue();

    // required uint64 timeStampOfLastShippedOp = 4;
    /**
     * <code>required uint64 timeStampOfLastShippedOp = 4;</code>
     */
    boolean hasTimeStampOfLastShippedOp();
    /**
     * <code>required uint64 timeStampOfLastShippedOp = 4;</code>
     */
    long getTimeStampOfLastShippedOp();

    // required uint64 replicationLag = 5;
    /**
     * <code>required uint64 replicationLag = 5;</code>
     */
    boolean hasReplicationLag();
    /**
     * <code>required uint64 replicationLag = 5;</code>
     */
    long getReplicationLag();
  }
  /**
   * Protobuf type {@code ReplicationLoadSource}
   */
  public static final class ReplicationLoadSource extends
      com.google.protobuf.GeneratedMessageLite
      implements ReplicationLoadSourceOrBuilder {
    // Use ReplicationLoadSource.newBuilder() to construct.
    private ReplicationLoadSource(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ReplicationLoadSource(boolean noInit) {}

    private static final ReplicationLoadSource defaultInstance;
    public static ReplicationLoadSource getDefaultInstance() {
      return defaultInstance;
    }

    public ReplicationLoadSource getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ReplicationLoadSource(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              peerID_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              ageOfLastShippedOp_ = input.readUInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              sizeOfLogQueue_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              timeStampOfLastShippedOp_ = input.readUInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              replicationLag_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ReplicationLoadSource> PARSER =
        new com.google.protobuf.AbstractParser<ReplicationLoadSource>() {
      public ReplicationLoadSource parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReplicationLoadSource(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReplicationLoadSource> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string peerID = 1;
    public static final int PEERID_FIELD_NUMBER = 1;
    private java.lang.Object peerID_;
    /**
     * <code>required string peerID = 1;</code>
     */
    public boolean hasPeerID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string peerID = 1;</code>
     */
    public java.lang.String getPeerID() {
      java.lang.Object ref = peerID_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          peerID_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string peerID = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPeerIDBytes() {
      java.lang.Object ref = peerID_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        peerID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required uint64 ageOfLastShippedOp = 2;
    public static final int AGEOFLASTSHIPPEDOP_FIELD_NUMBER = 2;
    private long ageOfLastShippedOp_;
    /**
     * <code>required uint64 ageOfLastShippedOp = 2;</code>
     */
    public boolean hasAgeOfLastShippedOp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 ageOfLastShippedOp = 2;</code>
     */
    public long getAgeOfLastShippedOp() {
      return ageOfLastShippedOp_;
    }

    // required uint32 sizeOfLogQueue = 3;
    public static final int SIZEOFLOGQUEUE_FIELD_NUMBER = 3;
    private int sizeOfLogQueue_;
    /**
     * <code>required uint32 sizeOfLogQueue = 3;</code>
     */
    public boolean hasSizeOfLogQueue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 sizeOfLogQueue = 3;</code>
     */
    public int getSizeOfLogQueue() {
      return sizeOfLogQueue_;
    }

    // required uint64 timeStampOfLastShippedOp = 4;
    public static final int TIMESTAMPOFLASTSHIPPEDOP_FIELD_NUMBER = 4;
    private long timeStampOfLastShippedOp_;
    /**
     * <code>required uint64 timeStampOfLastShippedOp = 4;</code>
     */
    public boolean hasTimeStampOfLastShippedOp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint64 timeStampOfLastShippedOp = 4;</code>
     */
    public long getTimeStampOfLastShippedOp() {
      return timeStampOfLastShippedOp_;
    }

    // required uint64 replicationLag = 5;
    public static final int REPLICATIONLAG_FIELD_NUMBER = 5;
    private long replicationLag_;
    /**
     * <code>required uint64 replicationLag = 5;</code>
     */
    public boolean hasReplicationLag() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint64 replicationLag = 5;</code>
     */
    public long getReplicationLag() {
      return replicationLag_;
    }

    private void initFields() {
      peerID_ = "";
      ageOfLastShippedOp_ = 0L;
      sizeOfLogQueue_ = 0;
      timeStampOfLastShippedOp_ = 0L;
      replicationLag_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPeerID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAgeOfLastShippedOp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSizeOfLogQueue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimeStampOfLastShippedOp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReplicationLag()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getPeerIDBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, ageOfLastShippedOp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, sizeOfLogQueue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(4, timeStampOfLastShippedOp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt64(5, replicationLag_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getPeerIDBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, ageOfLastShippedOp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, sizeOfLogQueue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, timeStampOfLastShippedOp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, replicationLag_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ReplicationLoadSource}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSourceOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        peerID_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        ageOfLastShippedOp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        sizeOfLogQueue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        timeStampOfLastShippedOp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        replicationLag_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource build() {
        org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource result = new org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.peerID_ = peerID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.ageOfLastShippedOp_ = ageOfLastShippedOp_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sizeOfLogQueue_ = sizeOfLogQueue_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.timeStampOfLastShippedOp_ = timeStampOfLastShippedOp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.replicationLag_ = replicationLag_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource.getDefaultInstance()) return this;
        if (other.hasPeerID()) {
          bitField0_ |= 0x00000001;
          peerID_ = other.peerID_;
          
        }
        if (other.hasAgeOfLastShippedOp()) {
          setAgeOfLastShippedOp(other.getAgeOfLastShippedOp());
        }
        if (other.hasSizeOfLogQueue()) {
          setSizeOfLogQueue(other.getSizeOfLogQueue());
        }
        if (other.hasTimeStampOfLastShippedOp()) {
          setTimeStampOfLastShippedOp(other.getTimeStampOfLastShippedOp());
        }
        if (other.hasReplicationLag()) {
          setReplicationLag(other.getReplicationLag());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPeerID()) {
          
          return false;
        }
        if (!hasAgeOfLastShippedOp()) {
          
          return false;
        }
        if (!hasSizeOfLogQueue()) {
          
          return false;
        }
        if (!hasTimeStampOfLastShippedOp()) {
          
          return false;
        }
        if (!hasReplicationLag()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string peerID = 1;
      private java.lang.Object peerID_ = "";
      /**
       * <code>required string peerID = 1;</code>
       */
      public boolean hasPeerID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string peerID = 1;</code>
       */
      public java.lang.String getPeerID() {
        java.lang.Object ref = peerID_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          peerID_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string peerID = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPeerIDBytes() {
        java.lang.Object ref = peerID_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          peerID_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string peerID = 1;</code>
       */
      public Builder setPeerID(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        peerID_ = value;
        
        return this;
      }
      /**
       * <code>required string peerID = 1;</code>
       */
      public Builder clearPeerID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        peerID_ = getDefaultInstance().getPeerID();
        
        return this;
      }
      /**
       * <code>required string peerID = 1;</code>
       */
      public Builder setPeerIDBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        peerID_ = value;
        
        return this;
      }

      // required uint64 ageOfLastShippedOp = 2;
      private long ageOfLastShippedOp_ ;
      /**
       * <code>required uint64 ageOfLastShippedOp = 2;</code>
       */
      public boolean hasAgeOfLastShippedOp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 ageOfLastShippedOp = 2;</code>
       */
      public long getAgeOfLastShippedOp() {
        return ageOfLastShippedOp_;
      }
      /**
       * <code>required uint64 ageOfLastShippedOp = 2;</code>
       */
      public Builder setAgeOfLastShippedOp(long value) {
        bitField0_ |= 0x00000002;
        ageOfLastShippedOp_ = value;
        
        return this;
      }
      /**
       * <code>required uint64 ageOfLastShippedOp = 2;</code>
       */
      public Builder clearAgeOfLastShippedOp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ageOfLastShippedOp_ = 0L;
        
        return this;
      }

      // required uint32 sizeOfLogQueue = 3;
      private int sizeOfLogQueue_ ;
      /**
       * <code>required uint32 sizeOfLogQueue = 3;</code>
       */
      public boolean hasSizeOfLogQueue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 sizeOfLogQueue = 3;</code>
       */
      public int getSizeOfLogQueue() {
        return sizeOfLogQueue_;
      }
      /**
       * <code>required uint32 sizeOfLogQueue = 3;</code>
       */
      public Builder setSizeOfLogQueue(int value) {
        bitField0_ |= 0x00000004;
        sizeOfLogQueue_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 sizeOfLogQueue = 3;</code>
       */
      public Builder clearSizeOfLogQueue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sizeOfLogQueue_ = 0;
        
        return this;
      }

      // required uint64 timeStampOfLastShippedOp = 4;
      private long timeStampOfLastShippedOp_ ;
      /**
       * <code>required uint64 timeStampOfLastShippedOp = 4;</code>
       */
      public boolean hasTimeStampOfLastShippedOp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint64 timeStampOfLastShippedOp = 4;</code>
       */
      public long getTimeStampOfLastShippedOp() {
        return timeStampOfLastShippedOp_;
      }
      /**
       * <code>required uint64 timeStampOfLastShippedOp = 4;</code>
       */
      public Builder setTimeStampOfLastShippedOp(long value) {
        bitField0_ |= 0x00000008;
        timeStampOfLastShippedOp_ = value;
        
        return this;
      }
      /**
       * <code>required uint64 timeStampOfLastShippedOp = 4;</code>
       */
      public Builder clearTimeStampOfLastShippedOp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        timeStampOfLastShippedOp_ = 0L;
        
        return this;
      }

      // required uint64 replicationLag = 5;
      private long replicationLag_ ;
      /**
       * <code>required uint64 replicationLag = 5;</code>
       */
      public boolean hasReplicationLag() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint64 replicationLag = 5;</code>
       */
      public long getReplicationLag() {
        return replicationLag_;
      }
      /**
       * <code>required uint64 replicationLag = 5;</code>
       */
      public Builder setReplicationLag(long value) {
        bitField0_ |= 0x00000010;
        replicationLag_ = value;
        
        return this;
      }
      /**
       * <code>required uint64 replicationLag = 5;</code>
       */
      public Builder clearReplicationLag() {
        bitField0_ = (bitField0_ & ~0x00000010);
        replicationLag_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ReplicationLoadSource)
    }

    static {
      defaultInstance = new ReplicationLoadSource(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ReplicationLoadSource)
  }

  public interface ServerLoadOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional uint64 number_of_requests = 1;
    /**
     * <code>optional uint64 number_of_requests = 1;</code>
     *
     * <pre>
     ** Number of requests since last report. 
     * </pre>
     */
    boolean hasNumberOfRequests();
    /**
     * <code>optional uint64 number_of_requests = 1;</code>
     *
     * <pre>
     ** Number of requests since last report. 
     * </pre>
     */
    long getNumberOfRequests();

    // optional uint64 total_number_of_requests = 2;
    /**
     * <code>optional uint64 total_number_of_requests = 2;</code>
     *
     * <pre>
     ** Total Number of requests from the start of the region server. 
     * </pre>
     */
    boolean hasTotalNumberOfRequests();
    /**
     * <code>optional uint64 total_number_of_requests = 2;</code>
     *
     * <pre>
     ** Total Number of requests from the start of the region server. 
     * </pre>
     */
    long getTotalNumberOfRequests();

    // optional uint32 used_heap_MB = 3;
    /**
     * <code>optional uint32 used_heap_MB = 3;</code>
     *
     * <pre>
     ** the amount of used heap, in MB. 
     * </pre>
     */
    boolean hasUsedHeapMB();
    /**
     * <code>optional uint32 used_heap_MB = 3;</code>
     *
     * <pre>
     ** the amount of used heap, in MB. 
     * </pre>
     */
    int getUsedHeapMB();

    // optional uint32 max_heap_MB = 4;
    /**
     * <code>optional uint32 max_heap_MB = 4;</code>
     *
     * <pre>
     ** the maximum allowable size of the heap, in MB. 
     * </pre>
     */
    boolean hasMaxHeapMB();
    /**
     * <code>optional uint32 max_heap_MB = 4;</code>
     *
     * <pre>
     ** the maximum allowable size of the heap, in MB. 
     * </pre>
     */
    int getMaxHeapMB();

    // repeated .RegionLoad region_loads = 5;
    /**
     * <code>repeated .RegionLoad region_loads = 5;</code>
     *
     * <pre>
     ** Information on the load of individual regions. 
     * </pre>
     */
    java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionLoad> 
        getRegionLoadsList();
    /**
     * <code>repeated .RegionLoad region_loads = 5;</code>
     *
     * <pre>
     ** Information on the load of individual regions. 
     * </pre>
     */
    org.hbase.async.generated.ClusterStatusPB.RegionLoad getRegionLoads(int index);
    /**
     * <code>repeated .RegionLoad region_loads = 5;</code>
     *
     * <pre>
     ** Information on the load of individual regions. 
     * </pre>
     */
    int getRegionLoadsCount();

    // repeated .Coprocessor coprocessors = 6;
    /**
     * <code>repeated .Coprocessor coprocessors = 6;</code>
     *
     * <pre>
     **
     * Regionserver-level coprocessors, e.g., WALObserver implementations.
     * Region-level coprocessors, on the other hand, are stored inside RegionLoad
     * objects.
     * </pre>
     */
    java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> 
        getCoprocessorsList();
    /**
     * <code>repeated .Coprocessor coprocessors = 6;</code>
     *
     * <pre>
     **
     * Regionserver-level coprocessors, e.g., WALObserver implementations.
     * Region-level coprocessors, on the other hand, are stored inside RegionLoad
     * objects.
     * </pre>
     */
    org.hbase.async.generated.HBasePB.Coprocessor getCoprocessors(int index);
    /**
     * <code>repeated .Coprocessor coprocessors = 6;</code>
     *
     * <pre>
     **
     * Regionserver-level coprocessors, e.g., WALObserver implementations.
     * Region-level coprocessors, on the other hand, are stored inside RegionLoad
     * objects.
     * </pre>
     */
    int getCoprocessorsCount();

    // optional uint64 report_start_time = 7;
    /**
     * <code>optional uint64 report_start_time = 7;</code>
     *
     * <pre>
     **
     * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
     * time is measured as the difference, measured in milliseconds, between the current time
     * and midnight, January 1, 1970 UTC.
     * </pre>
     */
    boolean hasReportStartTime();
    /**
     * <code>optional uint64 report_start_time = 7;</code>
     *
     * <pre>
     **
     * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
     * time is measured as the difference, measured in milliseconds, between the current time
     * and midnight, January 1, 1970 UTC.
     * </pre>
     */
    long getReportStartTime();

    // optional uint64 report_end_time = 8;
    /**
     * <code>optional uint64 report_end_time = 8;</code>
     *
     * <pre>
     **
     * Time when report was generated.
     * time is measured as the difference, measured in milliseconds, between the current time
     * and midnight, January 1, 1970 UTC.
     * </pre>
     */
    boolean hasReportEndTime();
    /**
     * <code>optional uint64 report_end_time = 8;</code>
     *
     * <pre>
     **
     * Time when report was generated.
     * time is measured as the difference, measured in milliseconds, between the current time
     * and midnight, January 1, 1970 UTC.
     * </pre>
     */
    long getReportEndTime();

    // optional uint32 info_server_port = 9;
    /**
     * <code>optional uint32 info_server_port = 9;</code>
     *
     * <pre>
     **
     * The port number that this region server is hosing an info server on.
     * </pre>
     */
    boolean hasInfoServerPort();
    /**
     * <code>optional uint32 info_server_port = 9;</code>
     *
     * <pre>
     **
     * The port number that this region server is hosing an info server on.
     * </pre>
     */
    int getInfoServerPort();

    // repeated .ReplicationLoadSource replLoadSource = 10;
    /**
     * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
     *
     * <pre>
     **
     * The replicationLoadSource for the replication Source status of this region server.
     * </pre>
     */
    java.util.List<org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource> 
        getReplLoadSourceList();
    /**
     * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
     *
     * <pre>
     **
     * The replicationLoadSource for the replication Source status of this region server.
     * </pre>
     */
    org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource getReplLoadSource(int index);
    /**
     * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
     *
     * <pre>
     **
     * The replicationLoadSource for the replication Source status of this region server.
     * </pre>
     */
    int getReplLoadSourceCount();

    // optional .ReplicationLoadSink replLoadSink = 11;
    /**
     * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
     *
     * <pre>
     **
     * The replicationLoadSink for the replication Sink status of this region server.
     * </pre>
     */
    boolean hasReplLoadSink();
    /**
     * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
     *
     * <pre>
     **
     * The replicationLoadSink for the replication Sink status of this region server.
     * </pre>
     */
    org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink getReplLoadSink();
  }
  /**
   * Protobuf type {@code ServerLoad}
   */
  public static final class ServerLoad extends
      com.google.protobuf.GeneratedMessageLite
      implements ServerLoadOrBuilder {
    // Use ServerLoad.newBuilder() to construct.
    private ServerLoad(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ServerLoad(boolean noInit) {}

    private static final ServerLoad defaultInstance;
    public static ServerLoad getDefaultInstance() {
      return defaultInstance;
    }

    public ServerLoad getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ServerLoad(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              numberOfRequests_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              totalNumberOfRequests_ = input.readUInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              usedHeapMB_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              maxHeapMB_ = input.readUInt32();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                regionLoads_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.RegionLoad>();
                mutable_bitField0_ |= 0x00000010;
              }
              regionLoads_.add(input.readMessage(org.hbase.async.generated.ClusterStatusPB.RegionLoad.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                coprocessors_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.Coprocessor>();
                mutable_bitField0_ |= 0x00000020;
              }
              coprocessors_.add(input.readMessage(org.hbase.async.generated.HBasePB.Coprocessor.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              reportStartTime_ = input.readUInt64();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              reportEndTime_ = input.readUInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              infoServerPort_ = input.readUInt32();
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                replLoadSource_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource>();
                mutable_bitField0_ |= 0x00000200;
              }
              replLoadSource_.add(input.readMessage(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource.PARSER, extensionRegistry));
              break;
            }
            case 90: {
              org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = replLoadSink_.toBuilder();
              }
              replLoadSink_ = input.readMessage(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(replLoadSink_);
                replLoadSink_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          regionLoads_ = java.util.Collections.unmodifiableList(regionLoads_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          coprocessors_ = java.util.Collections.unmodifiableList(coprocessors_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          replLoadSource_ = java.util.Collections.unmodifiableList(replLoadSource_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ServerLoad> PARSER =
        new com.google.protobuf.AbstractParser<ServerLoad>() {
      public ServerLoad parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ServerLoad(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ServerLoad> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint64 number_of_requests = 1;
    public static final int NUMBER_OF_REQUESTS_FIELD_NUMBER = 1;
    private long numberOfRequests_;
    /**
     * <code>optional uint64 number_of_requests = 1;</code>
     *
     * <pre>
     ** Number of requests since last report. 
     * </pre>
     */
    public boolean hasNumberOfRequests() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 number_of_requests = 1;</code>
     *
     * <pre>
     ** Number of requests since last report. 
     * </pre>
     */
    public long getNumberOfRequests() {
      return numberOfRequests_;
    }

    // optional uint64 total_number_of_requests = 2;
    public static final int TOTAL_NUMBER_OF_REQUESTS_FIELD_NUMBER = 2;
    private long totalNumberOfRequests_;
    /**
     * <code>optional uint64 total_number_of_requests = 2;</code>
     *
     * <pre>
     ** Total Number of requests from the start of the region server. 
     * </pre>
     */
    public boolean hasTotalNumberOfRequests() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 total_number_of_requests = 2;</code>
     *
     * <pre>
     ** Total Number of requests from the start of the region server. 
     * </pre>
     */
    public long getTotalNumberOfRequests() {
      return totalNumberOfRequests_;
    }

    // optional uint32 used_heap_MB = 3;
    public static final int USED_HEAP_MB_FIELD_NUMBER = 3;
    private int usedHeapMB_;
    /**
     * <code>optional uint32 used_heap_MB = 3;</code>
     *
     * <pre>
     ** the amount of used heap, in MB. 
     * </pre>
     */
    public boolean hasUsedHeapMB() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 used_heap_MB = 3;</code>
     *
     * <pre>
     ** the amount of used heap, in MB. 
     * </pre>
     */
    public int getUsedHeapMB() {
      return usedHeapMB_;
    }

    // optional uint32 max_heap_MB = 4;
    public static final int MAX_HEAP_MB_FIELD_NUMBER = 4;
    private int maxHeapMB_;
    /**
     * <code>optional uint32 max_heap_MB = 4;</code>
     *
     * <pre>
     ** the maximum allowable size of the heap, in MB. 
     * </pre>
     */
    public boolean hasMaxHeapMB() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 max_heap_MB = 4;</code>
     *
     * <pre>
     ** the maximum allowable size of the heap, in MB. 
     * </pre>
     */
    public int getMaxHeapMB() {
      return maxHeapMB_;
    }

    // repeated .RegionLoad region_loads = 5;
    public static final int REGION_LOADS_FIELD_NUMBER = 5;
    private java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionLoad> regionLoads_;
    /**
     * <code>repeated .RegionLoad region_loads = 5;</code>
     *
     * <pre>
     ** Information on the load of individual regions. 
     * </pre>
     */
    public java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionLoad> getRegionLoadsList() {
      return regionLoads_;
    }
    /**
     * <code>repeated .RegionLoad region_loads = 5;</code>
     *
     * <pre>
     ** Information on the load of individual regions. 
     * </pre>
     */
    public java.util.List<? extends org.hbase.async.generated.ClusterStatusPB.RegionLoadOrBuilder> 
        getRegionLoadsOrBuilderList() {
      return regionLoads_;
    }
    /**
     * <code>repeated .RegionLoad region_loads = 5;</code>
     *
     * <pre>
     ** Information on the load of individual regions. 
     * </pre>
     */
    public int getRegionLoadsCount() {
      return regionLoads_.size();
    }
    /**
     * <code>repeated .RegionLoad region_loads = 5;</code>
     *
     * <pre>
     ** Information on the load of individual regions. 
     * </pre>
     */
    public org.hbase.async.generated.ClusterStatusPB.RegionLoad getRegionLoads(int index) {
      return regionLoads_.get(index);
    }
    /**
     * <code>repeated .RegionLoad region_loads = 5;</code>
     *
     * <pre>
     ** Information on the load of individual regions. 
     * </pre>
     */
    public org.hbase.async.generated.ClusterStatusPB.RegionLoadOrBuilder getRegionLoadsOrBuilder(
        int index) {
      return regionLoads_.get(index);
    }

    // repeated .Coprocessor coprocessors = 6;
    public static final int COPROCESSORS_FIELD_NUMBER = 6;
    private java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> coprocessors_;
    /**
     * <code>repeated .Coprocessor coprocessors = 6;</code>
     *
     * <pre>
     **
     * Regionserver-level coprocessors, e.g., WALObserver implementations.
     * Region-level coprocessors, on the other hand, are stored inside RegionLoad
     * objects.
     * </pre>
     */
    public java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> getCoprocessorsList() {
      return coprocessors_;
    }
    /**
     * <code>repeated .Coprocessor coprocessors = 6;</code>
     *
     * <pre>
     **
     * Regionserver-level coprocessors, e.g., WALObserver implementations.
     * Region-level coprocessors, on the other hand, are stored inside RegionLoad
     * objects.
     * </pre>
     */
    public java.util.List<? extends org.hbase.async.generated.HBasePB.CoprocessorOrBuilder> 
        getCoprocessorsOrBuilderList() {
      return coprocessors_;
    }
    /**
     * <code>repeated .Coprocessor coprocessors = 6;</code>
     *
     * <pre>
     **
     * Regionserver-level coprocessors, e.g., WALObserver implementations.
     * Region-level coprocessors, on the other hand, are stored inside RegionLoad
     * objects.
     * </pre>
     */
    public int getCoprocessorsCount() {
      return coprocessors_.size();
    }
    /**
     * <code>repeated .Coprocessor coprocessors = 6;</code>
     *
     * <pre>
     **
     * Regionserver-level coprocessors, e.g., WALObserver implementations.
     * Region-level coprocessors, on the other hand, are stored inside RegionLoad
     * objects.
     * </pre>
     */
    public org.hbase.async.generated.HBasePB.Coprocessor getCoprocessors(int index) {
      return coprocessors_.get(index);
    }
    /**
     * <code>repeated .Coprocessor coprocessors = 6;</code>
     *
     * <pre>
     **
     * Regionserver-level coprocessors, e.g., WALObserver implementations.
     * Region-level coprocessors, on the other hand, are stored inside RegionLoad
     * objects.
     * </pre>
     */
    public org.hbase.async.generated.HBasePB.CoprocessorOrBuilder getCoprocessorsOrBuilder(
        int index) {
      return coprocessors_.get(index);
    }

    // optional uint64 report_start_time = 7;
    public static final int REPORT_START_TIME_FIELD_NUMBER = 7;
    private long reportStartTime_;
    /**
     * <code>optional uint64 report_start_time = 7;</code>
     *
     * <pre>
     **
     * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
     * time is measured as the difference, measured in milliseconds, between the current time
     * and midnight, January 1, 1970 UTC.
     * </pre>
     */
    public boolean hasReportStartTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint64 report_start_time = 7;</code>
     *
     * <pre>
     **
     * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
     * time is measured as the difference, measured in milliseconds, between the current time
     * and midnight, January 1, 1970 UTC.
     * </pre>
     */
    public long getReportStartTime() {
      return reportStartTime_;
    }

    // optional uint64 report_end_time = 8;
    public static final int REPORT_END_TIME_FIELD_NUMBER = 8;
    private long reportEndTime_;
    /**
     * <code>optional uint64 report_end_time = 8;</code>
     *
     * <pre>
     **
     * Time when report was generated.
     * time is measured as the difference, measured in milliseconds, between the current time
     * and midnight, January 1, 1970 UTC.
     * </pre>
     */
    public boolean hasReportEndTime() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint64 report_end_time = 8;</code>
     *
     * <pre>
     **
     * Time when report was generated.
     * time is measured as the difference, measured in milliseconds, between the current time
     * and midnight, January 1, 1970 UTC.
     * </pre>
     */
    public long getReportEndTime() {
      return reportEndTime_;
    }

    // optional uint32 info_server_port = 9;
    public static final int INFO_SERVER_PORT_FIELD_NUMBER = 9;
    private int infoServerPort_;
    /**
     * <code>optional uint32 info_server_port = 9;</code>
     *
     * <pre>
     **
     * The port number that this region server is hosing an info server on.
     * </pre>
     */
    public boolean hasInfoServerPort() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 info_server_port = 9;</code>
     *
     * <pre>
     **
     * The port number that this region server is hosing an info server on.
     * </pre>
     */
    public int getInfoServerPort() {
      return infoServerPort_;
    }

    // repeated .ReplicationLoadSource replLoadSource = 10;
    public static final int REPLLOADSOURCE_FIELD_NUMBER = 10;
    private java.util.List<org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource> replLoadSource_;
    /**
     * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
     *
     * <pre>
     **
     * The replicationLoadSource for the replication Source status of this region server.
     * </pre>
     */
    public java.util.List<org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource> getReplLoadSourceList() {
      return replLoadSource_;
    }
    /**
     * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
     *
     * <pre>
     **
     * The replicationLoadSource for the replication Source status of this region server.
     * </pre>
     */
    public java.util.List<? extends org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSourceOrBuilder> 
        getReplLoadSourceOrBuilderList() {
      return replLoadSource_;
    }
    /**
     * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
     *
     * <pre>
     **
     * The replicationLoadSource for the replication Source status of this region server.
     * </pre>
     */
    public int getReplLoadSourceCount() {
      return replLoadSource_.size();
    }
    /**
     * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
     *
     * <pre>
     **
     * The replicationLoadSource for the replication Source status of this region server.
     * </pre>
     */
    public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource getReplLoadSource(int index) {
      return replLoadSource_.get(index);
    }
    /**
     * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
     *
     * <pre>
     **
     * The replicationLoadSource for the replication Source status of this region server.
     * </pre>
     */
    public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSourceOrBuilder getReplLoadSourceOrBuilder(
        int index) {
      return replLoadSource_.get(index);
    }

    // optional .ReplicationLoadSink replLoadSink = 11;
    public static final int REPLLOADSINK_FIELD_NUMBER = 11;
    private org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink replLoadSink_;
    /**
     * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
     *
     * <pre>
     **
     * The replicationLoadSink for the replication Sink status of this region server.
     * </pre>
     */
    public boolean hasReplLoadSink() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
     *
     * <pre>
     **
     * The replicationLoadSink for the replication Sink status of this region server.
     * </pre>
     */
    public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink getReplLoadSink() {
      return replLoadSink_;
    }

    private void initFields() {
      numberOfRequests_ = 0L;
      totalNumberOfRequests_ = 0L;
      usedHeapMB_ = 0;
      maxHeapMB_ = 0;
      regionLoads_ = java.util.Collections.emptyList();
      coprocessors_ = java.util.Collections.emptyList();
      reportStartTime_ = 0L;
      reportEndTime_ = 0L;
      infoServerPort_ = 0;
      replLoadSource_ = java.util.Collections.emptyList();
      replLoadSink_ = org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getRegionLoadsCount(); i++) {
        if (!getRegionLoads(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getCoprocessorsCount(); i++) {
        if (!getCoprocessors(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getReplLoadSourceCount(); i++) {
        if (!getReplLoadSource(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReplLoadSink()) {
        if (!getReplLoadSink().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, numberOfRequests_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, totalNumberOfRequests_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, usedHeapMB_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, maxHeapMB_);
      }
      for (int i = 0; i < regionLoads_.size(); i++) {
        output.writeMessage(5, regionLoads_.get(i));
      }
      for (int i = 0; i < coprocessors_.size(); i++) {
        output.writeMessage(6, coprocessors_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt64(7, reportStartTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt64(8, reportEndTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(9, infoServerPort_);
      }
      for (int i = 0; i < replLoadSource_.size(); i++) {
        output.writeMessage(10, replLoadSource_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(11, replLoadSink_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, numberOfRequests_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, totalNumberOfRequests_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, usedHeapMB_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, maxHeapMB_);
      }
      for (int i = 0; i < regionLoads_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, regionLoads_.get(i));
      }
      for (int i = 0; i < coprocessors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, coprocessors_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, reportStartTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, reportEndTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, infoServerPort_);
      }
      for (int i = 0; i < replLoadSource_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, replLoadSource_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, replLoadSink_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ServerLoad parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.ServerLoad prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ServerLoad}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.ServerLoad, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.ServerLoadOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.ServerLoad.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        numberOfRequests_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        totalNumberOfRequests_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        usedHeapMB_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxHeapMB_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        regionLoads_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        coprocessors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        reportStartTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        reportEndTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        infoServerPort_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        replLoadSource_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        replLoadSink_ = org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.ServerLoad getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.ServerLoad.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.ServerLoad build() {
        org.hbase.async.generated.ClusterStatusPB.ServerLoad result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.ServerLoad buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.ServerLoad result = new org.hbase.async.generated.ClusterStatusPB.ServerLoad(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numberOfRequests_ = numberOfRequests_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.totalNumberOfRequests_ = totalNumberOfRequests_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.usedHeapMB_ = usedHeapMB_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxHeapMB_ = maxHeapMB_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          regionLoads_ = java.util.Collections.unmodifiableList(regionLoads_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.regionLoads_ = regionLoads_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          coprocessors_ = java.util.Collections.unmodifiableList(coprocessors_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.coprocessors_ = coprocessors_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.reportStartTime_ = reportStartTime_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reportEndTime_ = reportEndTime_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.infoServerPort_ = infoServerPort_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          replLoadSource_ = java.util.Collections.unmodifiableList(replLoadSource_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.replLoadSource_ = replLoadSource_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000080;
        }
        result.replLoadSink_ = replLoadSink_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.ServerLoad other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.ServerLoad.getDefaultInstance()) return this;
        if (other.hasNumberOfRequests()) {
          setNumberOfRequests(other.getNumberOfRequests());
        }
        if (other.hasTotalNumberOfRequests()) {
          setTotalNumberOfRequests(other.getTotalNumberOfRequests());
        }
        if (other.hasUsedHeapMB()) {
          setUsedHeapMB(other.getUsedHeapMB());
        }
        if (other.hasMaxHeapMB()) {
          setMaxHeapMB(other.getMaxHeapMB());
        }
        if (!other.regionLoads_.isEmpty()) {
          if (regionLoads_.isEmpty()) {
            regionLoads_ = other.regionLoads_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureRegionLoadsIsMutable();
            regionLoads_.addAll(other.regionLoads_);
          }
          
        }
        if (!other.coprocessors_.isEmpty()) {
          if (coprocessors_.isEmpty()) {
            coprocessors_ = other.coprocessors_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureCoprocessorsIsMutable();
            coprocessors_.addAll(other.coprocessors_);
          }
          
        }
        if (other.hasReportStartTime()) {
          setReportStartTime(other.getReportStartTime());
        }
        if (other.hasReportEndTime()) {
          setReportEndTime(other.getReportEndTime());
        }
        if (other.hasInfoServerPort()) {
          setInfoServerPort(other.getInfoServerPort());
        }
        if (!other.replLoadSource_.isEmpty()) {
          if (replLoadSource_.isEmpty()) {
            replLoadSource_ = other.replLoadSource_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureReplLoadSourceIsMutable();
            replLoadSource_.addAll(other.replLoadSource_);
          }
          
        }
        if (other.hasReplLoadSink()) {
          mergeReplLoadSink(other.getReplLoadSink());
        }
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getRegionLoadsCount(); i++) {
          if (!getRegionLoads(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getCoprocessorsCount(); i++) {
          if (!getCoprocessors(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getReplLoadSourceCount(); i++) {
          if (!getReplLoadSource(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasReplLoadSink()) {
          if (!getReplLoadSink().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.ServerLoad parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.ServerLoad) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint64 number_of_requests = 1;
      private long numberOfRequests_ ;
      /**
       * <code>optional uint64 number_of_requests = 1;</code>
       *
       * <pre>
       ** Number of requests since last report. 
       * </pre>
       */
      public boolean hasNumberOfRequests() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 number_of_requests = 1;</code>
       *
       * <pre>
       ** Number of requests since last report. 
       * </pre>
       */
      public long getNumberOfRequests() {
        return numberOfRequests_;
      }
      /**
       * <code>optional uint64 number_of_requests = 1;</code>
       *
       * <pre>
       ** Number of requests since last report. 
       * </pre>
       */
      public Builder setNumberOfRequests(long value) {
        bitField0_ |= 0x00000001;
        numberOfRequests_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 number_of_requests = 1;</code>
       *
       * <pre>
       ** Number of requests since last report. 
       * </pre>
       */
      public Builder clearNumberOfRequests() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numberOfRequests_ = 0L;
        
        return this;
      }

      // optional uint64 total_number_of_requests = 2;
      private long totalNumberOfRequests_ ;
      /**
       * <code>optional uint64 total_number_of_requests = 2;</code>
       *
       * <pre>
       ** Total Number of requests from the start of the region server. 
       * </pre>
       */
      public boolean hasTotalNumberOfRequests() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 total_number_of_requests = 2;</code>
       *
       * <pre>
       ** Total Number of requests from the start of the region server. 
       * </pre>
       */
      public long getTotalNumberOfRequests() {
        return totalNumberOfRequests_;
      }
      /**
       * <code>optional uint64 total_number_of_requests = 2;</code>
       *
       * <pre>
       ** Total Number of requests from the start of the region server. 
       * </pre>
       */
      public Builder setTotalNumberOfRequests(long value) {
        bitField0_ |= 0x00000002;
        totalNumberOfRequests_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 total_number_of_requests = 2;</code>
       *
       * <pre>
       ** Total Number of requests from the start of the region server. 
       * </pre>
       */
      public Builder clearTotalNumberOfRequests() {
        bitField0_ = (bitField0_ & ~0x00000002);
        totalNumberOfRequests_ = 0L;
        
        return this;
      }

      // optional uint32 used_heap_MB = 3;
      private int usedHeapMB_ ;
      /**
       * <code>optional uint32 used_heap_MB = 3;</code>
       *
       * <pre>
       ** the amount of used heap, in MB. 
       * </pre>
       */
      public boolean hasUsedHeapMB() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 used_heap_MB = 3;</code>
       *
       * <pre>
       ** the amount of used heap, in MB. 
       * </pre>
       */
      public int getUsedHeapMB() {
        return usedHeapMB_;
      }
      /**
       * <code>optional uint32 used_heap_MB = 3;</code>
       *
       * <pre>
       ** the amount of used heap, in MB. 
       * </pre>
       */
      public Builder setUsedHeapMB(int value) {
        bitField0_ |= 0x00000004;
        usedHeapMB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 used_heap_MB = 3;</code>
       *
       * <pre>
       ** the amount of used heap, in MB. 
       * </pre>
       */
      public Builder clearUsedHeapMB() {
        bitField0_ = (bitField0_ & ~0x00000004);
        usedHeapMB_ = 0;
        
        return this;
      }

      // optional uint32 max_heap_MB = 4;
      private int maxHeapMB_ ;
      /**
       * <code>optional uint32 max_heap_MB = 4;</code>
       *
       * <pre>
       ** the maximum allowable size of the heap, in MB. 
       * </pre>
       */
      public boolean hasMaxHeapMB() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 max_heap_MB = 4;</code>
       *
       * <pre>
       ** the maximum allowable size of the heap, in MB. 
       * </pre>
       */
      public int getMaxHeapMB() {
        return maxHeapMB_;
      }
      /**
       * <code>optional uint32 max_heap_MB = 4;</code>
       *
       * <pre>
       ** the maximum allowable size of the heap, in MB. 
       * </pre>
       */
      public Builder setMaxHeapMB(int value) {
        bitField0_ |= 0x00000008;
        maxHeapMB_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 max_heap_MB = 4;</code>
       *
       * <pre>
       ** the maximum allowable size of the heap, in MB. 
       * </pre>
       */
      public Builder clearMaxHeapMB() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxHeapMB_ = 0;
        
        return this;
      }

      // repeated .RegionLoad region_loads = 5;
      private java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionLoad> regionLoads_ =
        java.util.Collections.emptyList();
      private void ensureRegionLoadsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          regionLoads_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.RegionLoad>(regionLoads_);
          bitField0_ |= 0x00000010;
         }
      }

      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionLoad> getRegionLoadsList() {
        return java.util.Collections.unmodifiableList(regionLoads_);
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public int getRegionLoadsCount() {
        return regionLoads_.size();
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public org.hbase.async.generated.ClusterStatusPB.RegionLoad getRegionLoads(int index) {
        return regionLoads_.get(index);
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder setRegionLoads(
          int index, org.hbase.async.generated.ClusterStatusPB.RegionLoad value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionLoadsIsMutable();
        regionLoads_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder setRegionLoads(
          int index, org.hbase.async.generated.ClusterStatusPB.RegionLoad.Builder builderForValue) {
        ensureRegionLoadsIsMutable();
        regionLoads_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder addRegionLoads(org.hbase.async.generated.ClusterStatusPB.RegionLoad value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionLoadsIsMutable();
        regionLoads_.add(value);

        return this;
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder addRegionLoads(
          int index, org.hbase.async.generated.ClusterStatusPB.RegionLoad value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionLoadsIsMutable();
        regionLoads_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder addRegionLoads(
          org.hbase.async.generated.ClusterStatusPB.RegionLoad.Builder builderForValue) {
        ensureRegionLoadsIsMutable();
        regionLoads_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder addRegionLoads(
          int index, org.hbase.async.generated.ClusterStatusPB.RegionLoad.Builder builderForValue) {
        ensureRegionLoadsIsMutable();
        regionLoads_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder addAllRegionLoads(
          java.lang.Iterable<? extends org.hbase.async.generated.ClusterStatusPB.RegionLoad> values) {
        ensureRegionLoadsIsMutable();
        super.addAll(values, regionLoads_);

        return this;
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder clearRegionLoads() {
        regionLoads_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);

        return this;
      }
      /**
       * <code>repeated .RegionLoad region_loads = 5;</code>
       *
       * <pre>
       ** Information on the load of individual regions. 
       * </pre>
       */
      public Builder removeRegionLoads(int index) {
        ensureRegionLoadsIsMutable();
        regionLoads_.remove(index);

        return this;
      }

      // repeated .Coprocessor coprocessors = 6;
      private java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> coprocessors_ =
        java.util.Collections.emptyList();
      private void ensureCoprocessorsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          coprocessors_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.Coprocessor>(coprocessors_);
          bitField0_ |= 0x00000020;
         }
      }

      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> getCoprocessorsList() {
        return java.util.Collections.unmodifiableList(coprocessors_);
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public int getCoprocessorsCount() {
        return coprocessors_.size();
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public org.hbase.async.generated.HBasePB.Coprocessor getCoprocessors(int index) {
        return coprocessors_.get(index);
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder setCoprocessors(
          int index, org.hbase.async.generated.HBasePB.Coprocessor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCoprocessorsIsMutable();
        coprocessors_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder setCoprocessors(
          int index, org.hbase.async.generated.HBasePB.Coprocessor.Builder builderForValue) {
        ensureCoprocessorsIsMutable();
        coprocessors_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder addCoprocessors(org.hbase.async.generated.HBasePB.Coprocessor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCoprocessorsIsMutable();
        coprocessors_.add(value);

        return this;
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder addCoprocessors(
          int index, org.hbase.async.generated.HBasePB.Coprocessor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCoprocessorsIsMutable();
        coprocessors_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder addCoprocessors(
          org.hbase.async.generated.HBasePB.Coprocessor.Builder builderForValue) {
        ensureCoprocessorsIsMutable();
        coprocessors_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder addCoprocessors(
          int index, org.hbase.async.generated.HBasePB.Coprocessor.Builder builderForValue) {
        ensureCoprocessorsIsMutable();
        coprocessors_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder addAllCoprocessors(
          java.lang.Iterable<? extends org.hbase.async.generated.HBasePB.Coprocessor> values) {
        ensureCoprocessorsIsMutable();
        super.addAll(values, coprocessors_);

        return this;
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder clearCoprocessors() {
        coprocessors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);

        return this;
      }
      /**
       * <code>repeated .Coprocessor coprocessors = 6;</code>
       *
       * <pre>
       **
       * Regionserver-level coprocessors, e.g., WALObserver implementations.
       * Region-level coprocessors, on the other hand, are stored inside RegionLoad
       * objects.
       * </pre>
       */
      public Builder removeCoprocessors(int index) {
        ensureCoprocessorsIsMutable();
        coprocessors_.remove(index);

        return this;
      }

      // optional uint64 report_start_time = 7;
      private long reportStartTime_ ;
      /**
       * <code>optional uint64 report_start_time = 7;</code>
       *
       * <pre>
       **
       * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
       * time is measured as the difference, measured in milliseconds, between the current time
       * and midnight, January 1, 1970 UTC.
       * </pre>
       */
      public boolean hasReportStartTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint64 report_start_time = 7;</code>
       *
       * <pre>
       **
       * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
       * time is measured as the difference, measured in milliseconds, between the current time
       * and midnight, January 1, 1970 UTC.
       * </pre>
       */
      public long getReportStartTime() {
        return reportStartTime_;
      }
      /**
       * <code>optional uint64 report_start_time = 7;</code>
       *
       * <pre>
       **
       * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
       * time is measured as the difference, measured in milliseconds, between the current time
       * and midnight, January 1, 1970 UTC.
       * </pre>
       */
      public Builder setReportStartTime(long value) {
        bitField0_ |= 0x00000040;
        reportStartTime_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 report_start_time = 7;</code>
       *
       * <pre>
       **
       * Time when incremental (non-total) counts began being calculated (e.g. number_of_requests)
       * time is measured as the difference, measured in milliseconds, between the current time
       * and midnight, January 1, 1970 UTC.
       * </pre>
       */
      public Builder clearReportStartTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        reportStartTime_ = 0L;
        
        return this;
      }

      // optional uint64 report_end_time = 8;
      private long reportEndTime_ ;
      /**
       * <code>optional uint64 report_end_time = 8;</code>
       *
       * <pre>
       **
       * Time when report was generated.
       * time is measured as the difference, measured in milliseconds, between the current time
       * and midnight, January 1, 1970 UTC.
       * </pre>
       */
      public boolean hasReportEndTime() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint64 report_end_time = 8;</code>
       *
       * <pre>
       **
       * Time when report was generated.
       * time is measured as the difference, measured in milliseconds, between the current time
       * and midnight, January 1, 1970 UTC.
       * </pre>
       */
      public long getReportEndTime() {
        return reportEndTime_;
      }
      /**
       * <code>optional uint64 report_end_time = 8;</code>
       *
       * <pre>
       **
       * Time when report was generated.
       * time is measured as the difference, measured in milliseconds, between the current time
       * and midnight, January 1, 1970 UTC.
       * </pre>
       */
      public Builder setReportEndTime(long value) {
        bitField0_ |= 0x00000080;
        reportEndTime_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 report_end_time = 8;</code>
       *
       * <pre>
       **
       * Time when report was generated.
       * time is measured as the difference, measured in milliseconds, between the current time
       * and midnight, January 1, 1970 UTC.
       * </pre>
       */
      public Builder clearReportEndTime() {
        bitField0_ = (bitField0_ & ~0x00000080);
        reportEndTime_ = 0L;
        
        return this;
      }

      // optional uint32 info_server_port = 9;
      private int infoServerPort_ ;
      /**
       * <code>optional uint32 info_server_port = 9;</code>
       *
       * <pre>
       **
       * The port number that this region server is hosing an info server on.
       * </pre>
       */
      public boolean hasInfoServerPort() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 info_server_port = 9;</code>
       *
       * <pre>
       **
       * The port number that this region server is hosing an info server on.
       * </pre>
       */
      public int getInfoServerPort() {
        return infoServerPort_;
      }
      /**
       * <code>optional uint32 info_server_port = 9;</code>
       *
       * <pre>
       **
       * The port number that this region server is hosing an info server on.
       * </pre>
       */
      public Builder setInfoServerPort(int value) {
        bitField0_ |= 0x00000100;
        infoServerPort_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 info_server_port = 9;</code>
       *
       * <pre>
       **
       * The port number that this region server is hosing an info server on.
       * </pre>
       */
      public Builder clearInfoServerPort() {
        bitField0_ = (bitField0_ & ~0x00000100);
        infoServerPort_ = 0;
        
        return this;
      }

      // repeated .ReplicationLoadSource replLoadSource = 10;
      private java.util.List<org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource> replLoadSource_ =
        java.util.Collections.emptyList();
      private void ensureReplLoadSourceIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          replLoadSource_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource>(replLoadSource_);
          bitField0_ |= 0x00000200;
         }
      }

      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public java.util.List<org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource> getReplLoadSourceList() {
        return java.util.Collections.unmodifiableList(replLoadSource_);
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public int getReplLoadSourceCount() {
        return replLoadSource_.size();
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource getReplLoadSource(int index) {
        return replLoadSource_.get(index);
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder setReplLoadSource(
          int index, org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReplLoadSourceIsMutable();
        replLoadSource_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder setReplLoadSource(
          int index, org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource.Builder builderForValue) {
        ensureReplLoadSourceIsMutable();
        replLoadSource_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder addReplLoadSource(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReplLoadSourceIsMutable();
        replLoadSource_.add(value);

        return this;
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder addReplLoadSource(
          int index, org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReplLoadSourceIsMutable();
        replLoadSource_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder addReplLoadSource(
          org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource.Builder builderForValue) {
        ensureReplLoadSourceIsMutable();
        replLoadSource_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder addReplLoadSource(
          int index, org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource.Builder builderForValue) {
        ensureReplLoadSourceIsMutable();
        replLoadSource_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder addAllReplLoadSource(
          java.lang.Iterable<? extends org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSource> values) {
        ensureReplLoadSourceIsMutable();
        super.addAll(values, replLoadSource_);

        return this;
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder clearReplLoadSource() {
        replLoadSource_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);

        return this;
      }
      /**
       * <code>repeated .ReplicationLoadSource replLoadSource = 10;</code>
       *
       * <pre>
       **
       * The replicationLoadSource for the replication Source status of this region server.
       * </pre>
       */
      public Builder removeReplLoadSource(int index) {
        ensureReplLoadSourceIsMutable();
        replLoadSource_.remove(index);

        return this;
      }

      // optional .ReplicationLoadSink replLoadSink = 11;
      private org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink replLoadSink_ = org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.getDefaultInstance();
      /**
       * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
       *
       * <pre>
       **
       * The replicationLoadSink for the replication Sink status of this region server.
       * </pre>
       */
      public boolean hasReplLoadSink() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
       *
       * <pre>
       **
       * The replicationLoadSink for the replication Sink status of this region server.
       * </pre>
       */
      public org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink getReplLoadSink() {
        return replLoadSink_;
      }
      /**
       * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
       *
       * <pre>
       **
       * The replicationLoadSink for the replication Sink status of this region server.
       * </pre>
       */
      public Builder setReplLoadSink(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink value) {
        if (value == null) {
          throw new NullPointerException();
        }
        replLoadSink_ = value;

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
       *
       * <pre>
       **
       * The replicationLoadSink for the replication Sink status of this region server.
       * </pre>
       */
      public Builder setReplLoadSink(
          org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.Builder builderForValue) {
        replLoadSink_ = builderForValue.build();

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
       *
       * <pre>
       **
       * The replicationLoadSink for the replication Sink status of this region server.
       * </pre>
       */
      public Builder mergeReplLoadSink(org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink value) {
        if (((bitField0_ & 0x00000400) == 0x00000400) &&
            replLoadSink_ != org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.getDefaultInstance()) {
          replLoadSink_ =
            org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.newBuilder(replLoadSink_).mergeFrom(value).buildPartial();
        } else {
          replLoadSink_ = value;
        }

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .ReplicationLoadSink replLoadSink = 11;</code>
       *
       * <pre>
       **
       * The replicationLoadSink for the replication Sink status of this region server.
       * </pre>
       */
      public Builder clearReplLoadSink() {
        replLoadSink_ = org.hbase.async.generated.ClusterStatusPB.ReplicationLoadSink.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ServerLoad)
    }

    static {
      defaultInstance = new ServerLoad(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ServerLoad)
  }

  public interface LiveServerInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .ServerName server = 1;
    /**
     * <code>required .ServerName server = 1;</code>
     */
    boolean hasServer();
    /**
     * <code>required .ServerName server = 1;</code>
     */
    org.hbase.async.generated.HBasePB.ServerName getServer();

    // required .ServerLoad server_load = 2;
    /**
     * <code>required .ServerLoad server_load = 2;</code>
     */
    boolean hasServerLoad();
    /**
     * <code>required .ServerLoad server_load = 2;</code>
     */
    org.hbase.async.generated.ClusterStatusPB.ServerLoad getServerLoad();
  }
  /**
   * Protobuf type {@code LiveServerInfo}
   */
  public static final class LiveServerInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements LiveServerInfoOrBuilder {
    // Use LiveServerInfo.newBuilder() to construct.
    private LiveServerInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LiveServerInfo(boolean noInit) {}

    private static final LiveServerInfo defaultInstance;
    public static LiveServerInfo getDefaultInstance() {
      return defaultInstance;
    }

    public LiveServerInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LiveServerInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.hbase.async.generated.HBasePB.ServerName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = server_.toBuilder();
              }
              server_ = input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(server_);
                server_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.hbase.async.generated.ClusterStatusPB.ServerLoad.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = serverLoad_.toBuilder();
              }
              serverLoad_ = input.readMessage(org.hbase.async.generated.ClusterStatusPB.ServerLoad.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(serverLoad_);
                serverLoad_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LiveServerInfo> PARSER =
        new com.google.protobuf.AbstractParser<LiveServerInfo>() {
      public LiveServerInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiveServerInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LiveServerInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .ServerName server = 1;
    public static final int SERVER_FIELD_NUMBER = 1;
    private org.hbase.async.generated.HBasePB.ServerName server_;
    /**
     * <code>required .ServerName server = 1;</code>
     */
    public boolean hasServer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ServerName server = 1;</code>
     */
    public org.hbase.async.generated.HBasePB.ServerName getServer() {
      return server_;
    }

    // required .ServerLoad server_load = 2;
    public static final int SERVER_LOAD_FIELD_NUMBER = 2;
    private org.hbase.async.generated.ClusterStatusPB.ServerLoad serverLoad_;
    /**
     * <code>required .ServerLoad server_load = 2;</code>
     */
    public boolean hasServerLoad() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .ServerLoad server_load = 2;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.ServerLoad getServerLoad() {
      return serverLoad_;
    }

    private void initFields() {
      server_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      serverLoad_ = org.hbase.async.generated.ClusterStatusPB.ServerLoad.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasServer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasServerLoad()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getServer().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getServerLoad().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, server_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, serverLoad_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, server_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, serverLoad_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.LiveServerInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code LiveServerInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.LiveServerInfo, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.LiveServerInfoOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.LiveServerInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        server_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        serverLoad_ = org.hbase.async.generated.ClusterStatusPB.ServerLoad.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.LiveServerInfo getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.LiveServerInfo.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.LiveServerInfo build() {
        org.hbase.async.generated.ClusterStatusPB.LiveServerInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.LiveServerInfo buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.LiveServerInfo result = new org.hbase.async.generated.ClusterStatusPB.LiveServerInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.server_ = server_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.serverLoad_ = serverLoad_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.LiveServerInfo other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.LiveServerInfo.getDefaultInstance()) return this;
        if (other.hasServer()) {
          mergeServer(other.getServer());
        }
        if (other.hasServerLoad()) {
          mergeServerLoad(other.getServerLoad());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasServer()) {
          
          return false;
        }
        if (!hasServerLoad()) {
          
          return false;
        }
        if (!getServer().isInitialized()) {
          
          return false;
        }
        if (!getServerLoad().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.LiveServerInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.LiveServerInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .ServerName server = 1;
      private org.hbase.async.generated.HBasePB.ServerName server_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      /**
       * <code>required .ServerName server = 1;</code>
       */
      public boolean hasServer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ServerName server = 1;</code>
       */
      public org.hbase.async.generated.HBasePB.ServerName getServer() {
        return server_;
      }
      /**
       * <code>required .ServerName server = 1;</code>
       */
      public Builder setServer(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        server_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName server = 1;</code>
       */
      public Builder setServer(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        server_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName server = 1;</code>
       */
      public Builder mergeServer(org.hbase.async.generated.HBasePB.ServerName value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            server_ != org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance()) {
          server_ =
            org.hbase.async.generated.HBasePB.ServerName.newBuilder(server_).mergeFrom(value).buildPartial();
        } else {
          server_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName server = 1;</code>
       */
      public Builder clearServer() {
        server_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // required .ServerLoad server_load = 2;
      private org.hbase.async.generated.ClusterStatusPB.ServerLoad serverLoad_ = org.hbase.async.generated.ClusterStatusPB.ServerLoad.getDefaultInstance();
      /**
       * <code>required .ServerLoad server_load = 2;</code>
       */
      public boolean hasServerLoad() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .ServerLoad server_load = 2;</code>
       */
      public org.hbase.async.generated.ClusterStatusPB.ServerLoad getServerLoad() {
        return serverLoad_;
      }
      /**
       * <code>required .ServerLoad server_load = 2;</code>
       */
      public Builder setServerLoad(org.hbase.async.generated.ClusterStatusPB.ServerLoad value) {
        if (value == null) {
          throw new NullPointerException();
        }
        serverLoad_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .ServerLoad server_load = 2;</code>
       */
      public Builder setServerLoad(
          org.hbase.async.generated.ClusterStatusPB.ServerLoad.Builder builderForValue) {
        serverLoad_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .ServerLoad server_load = 2;</code>
       */
      public Builder mergeServerLoad(org.hbase.async.generated.ClusterStatusPB.ServerLoad value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            serverLoad_ != org.hbase.async.generated.ClusterStatusPB.ServerLoad.getDefaultInstance()) {
          serverLoad_ =
            org.hbase.async.generated.ClusterStatusPB.ServerLoad.newBuilder(serverLoad_).mergeFrom(value).buildPartial();
        } else {
          serverLoad_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .ServerLoad server_load = 2;</code>
       */
      public Builder clearServerLoad() {
        serverLoad_ = org.hbase.async.generated.ClusterStatusPB.ServerLoad.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:LiveServerInfo)
    }

    static {
      defaultInstance = new LiveServerInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:LiveServerInfo)
  }

  public interface ClusterStatusOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional .HBaseVersionFileContent hbase_version = 1;
    /**
     * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
     */
    boolean hasHbaseVersion();
    /**
     * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
     */
    org.hbase.async.generated.FSPB.HBaseVersionFileContent getHbaseVersion();

    // repeated .LiveServerInfo live_servers = 2;
    /**
     * <code>repeated .LiveServerInfo live_servers = 2;</code>
     */
    java.util.List<org.hbase.async.generated.ClusterStatusPB.LiveServerInfo> 
        getLiveServersList();
    /**
     * <code>repeated .LiveServerInfo live_servers = 2;</code>
     */
    org.hbase.async.generated.ClusterStatusPB.LiveServerInfo getLiveServers(int index);
    /**
     * <code>repeated .LiveServerInfo live_servers = 2;</code>
     */
    int getLiveServersCount();

    // repeated .ServerName dead_servers = 3;
    /**
     * <code>repeated .ServerName dead_servers = 3;</code>
     */
    java.util.List<org.hbase.async.generated.HBasePB.ServerName> 
        getDeadServersList();
    /**
     * <code>repeated .ServerName dead_servers = 3;</code>
     */
    org.hbase.async.generated.HBasePB.ServerName getDeadServers(int index);
    /**
     * <code>repeated .ServerName dead_servers = 3;</code>
     */
    int getDeadServersCount();

    // repeated .RegionInTransition regions_in_transition = 4;
    /**
     * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
     */
    java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionInTransition> 
        getRegionsInTransitionList();
    /**
     * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
     */
    org.hbase.async.generated.ClusterStatusPB.RegionInTransition getRegionsInTransition(int index);
    /**
     * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
     */
    int getRegionsInTransitionCount();

    // optional .ClusterId cluster_id = 5;
    /**
     * <code>optional .ClusterId cluster_id = 5;</code>
     */
    boolean hasClusterId();
    /**
     * <code>optional .ClusterId cluster_id = 5;</code>
     */
    org.hbase.async.generated.ClusterIdPB.ClusterId getClusterId();

    // repeated .Coprocessor master_coprocessors = 6;
    /**
     * <code>repeated .Coprocessor master_coprocessors = 6;</code>
     */
    java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> 
        getMasterCoprocessorsList();
    /**
     * <code>repeated .Coprocessor master_coprocessors = 6;</code>
     */
    org.hbase.async.generated.HBasePB.Coprocessor getMasterCoprocessors(int index);
    /**
     * <code>repeated .Coprocessor master_coprocessors = 6;</code>
     */
    int getMasterCoprocessorsCount();

    // optional .ServerName master = 7;
    /**
     * <code>optional .ServerName master = 7;</code>
     */
    boolean hasMaster();
    /**
     * <code>optional .ServerName master = 7;</code>
     */
    org.hbase.async.generated.HBasePB.ServerName getMaster();

    // repeated .ServerName backup_masters = 8;
    /**
     * <code>repeated .ServerName backup_masters = 8;</code>
     */
    java.util.List<org.hbase.async.generated.HBasePB.ServerName> 
        getBackupMastersList();
    /**
     * <code>repeated .ServerName backup_masters = 8;</code>
     */
    org.hbase.async.generated.HBasePB.ServerName getBackupMasters(int index);
    /**
     * <code>repeated .ServerName backup_masters = 8;</code>
     */
    int getBackupMastersCount();

    // optional bool balancer_on = 9;
    /**
     * <code>optional bool balancer_on = 9;</code>
     */
    boolean hasBalancerOn();
    /**
     * <code>optional bool balancer_on = 9;</code>
     */
    boolean getBalancerOn();
  }
  /**
   * Protobuf type {@code ClusterStatus}
   */
  public static final class ClusterStatus extends
      com.google.protobuf.GeneratedMessageLite
      implements ClusterStatusOrBuilder {
    // Use ClusterStatus.newBuilder() to construct.
    private ClusterStatus(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ClusterStatus(boolean noInit) {}

    private static final ClusterStatus defaultInstance;
    public static ClusterStatus getDefaultInstance() {
      return defaultInstance;
    }

    public ClusterStatus getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ClusterStatus(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.hbase.async.generated.FSPB.HBaseVersionFileContent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = hbaseVersion_.toBuilder();
              }
              hbaseVersion_ = input.readMessage(org.hbase.async.generated.FSPB.HBaseVersionFileContent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hbaseVersion_);
                hbaseVersion_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                liveServers_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.LiveServerInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              liveServers_.add(input.readMessage(org.hbase.async.generated.ClusterStatusPB.LiveServerInfo.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                deadServers_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.ServerName>();
                mutable_bitField0_ |= 0x00000004;
              }
              deadServers_.add(input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                regionsInTransition_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.RegionInTransition>();
                mutable_bitField0_ |= 0x00000008;
              }
              regionsInTransition_.add(input.readMessage(org.hbase.async.generated.ClusterStatusPB.RegionInTransition.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              org.hbase.async.generated.ClusterIdPB.ClusterId.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = clusterId_.toBuilder();
              }
              clusterId_ = input.readMessage(org.hbase.async.generated.ClusterIdPB.ClusterId.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(clusterId_);
                clusterId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                masterCoprocessors_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.Coprocessor>();
                mutable_bitField0_ |= 0x00000020;
              }
              masterCoprocessors_.add(input.readMessage(org.hbase.async.generated.HBasePB.Coprocessor.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              org.hbase.async.generated.HBasePB.ServerName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = master_.toBuilder();
              }
              master_ = input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(master_);
                master_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                backupMasters_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.ServerName>();
                mutable_bitField0_ |= 0x00000080;
              }
              backupMasters_.add(input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry));
              break;
            }
            case 72: {
              bitField0_ |= 0x00000008;
              balancerOn_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          liveServers_ = java.util.Collections.unmodifiableList(liveServers_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          deadServers_ = java.util.Collections.unmodifiableList(deadServers_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          regionsInTransition_ = java.util.Collections.unmodifiableList(regionsInTransition_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          masterCoprocessors_ = java.util.Collections.unmodifiableList(masterCoprocessors_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          backupMasters_ = java.util.Collections.unmodifiableList(backupMasters_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ClusterStatus> PARSER =
        new com.google.protobuf.AbstractParser<ClusterStatus>() {
      public ClusterStatus parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClusterStatus(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ClusterStatus> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .HBaseVersionFileContent hbase_version = 1;
    public static final int HBASE_VERSION_FIELD_NUMBER = 1;
    private org.hbase.async.generated.FSPB.HBaseVersionFileContent hbaseVersion_;
    /**
     * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
     */
    public boolean hasHbaseVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
     */
    public org.hbase.async.generated.FSPB.HBaseVersionFileContent getHbaseVersion() {
      return hbaseVersion_;
    }

    // repeated .LiveServerInfo live_servers = 2;
    public static final int LIVE_SERVERS_FIELD_NUMBER = 2;
    private java.util.List<org.hbase.async.generated.ClusterStatusPB.LiveServerInfo> liveServers_;
    /**
     * <code>repeated .LiveServerInfo live_servers = 2;</code>
     */
    public java.util.List<org.hbase.async.generated.ClusterStatusPB.LiveServerInfo> getLiveServersList() {
      return liveServers_;
    }
    /**
     * <code>repeated .LiveServerInfo live_servers = 2;</code>
     */
    public java.util.List<? extends org.hbase.async.generated.ClusterStatusPB.LiveServerInfoOrBuilder> 
        getLiveServersOrBuilderList() {
      return liveServers_;
    }
    /**
     * <code>repeated .LiveServerInfo live_servers = 2;</code>
     */
    public int getLiveServersCount() {
      return liveServers_.size();
    }
    /**
     * <code>repeated .LiveServerInfo live_servers = 2;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.LiveServerInfo getLiveServers(int index) {
      return liveServers_.get(index);
    }
    /**
     * <code>repeated .LiveServerInfo live_servers = 2;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.LiveServerInfoOrBuilder getLiveServersOrBuilder(
        int index) {
      return liveServers_.get(index);
    }

    // repeated .ServerName dead_servers = 3;
    public static final int DEAD_SERVERS_FIELD_NUMBER = 3;
    private java.util.List<org.hbase.async.generated.HBasePB.ServerName> deadServers_;
    /**
     * <code>repeated .ServerName dead_servers = 3;</code>
     */
    public java.util.List<org.hbase.async.generated.HBasePB.ServerName> getDeadServersList() {
      return deadServers_;
    }
    /**
     * <code>repeated .ServerName dead_servers = 3;</code>
     */
    public java.util.List<? extends org.hbase.async.generated.HBasePB.ServerNameOrBuilder> 
        getDeadServersOrBuilderList() {
      return deadServers_;
    }
    /**
     * <code>repeated .ServerName dead_servers = 3;</code>
     */
    public int getDeadServersCount() {
      return deadServers_.size();
    }
    /**
     * <code>repeated .ServerName dead_servers = 3;</code>
     */
    public org.hbase.async.generated.HBasePB.ServerName getDeadServers(int index) {
      return deadServers_.get(index);
    }
    /**
     * <code>repeated .ServerName dead_servers = 3;</code>
     */
    public org.hbase.async.generated.HBasePB.ServerNameOrBuilder getDeadServersOrBuilder(
        int index) {
      return deadServers_.get(index);
    }

    // repeated .RegionInTransition regions_in_transition = 4;
    public static final int REGIONS_IN_TRANSITION_FIELD_NUMBER = 4;
    private java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionInTransition> regionsInTransition_;
    /**
     * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
     */
    public java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionInTransition> getRegionsInTransitionList() {
      return regionsInTransition_;
    }
    /**
     * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
     */
    public java.util.List<? extends org.hbase.async.generated.ClusterStatusPB.RegionInTransitionOrBuilder> 
        getRegionsInTransitionOrBuilderList() {
      return regionsInTransition_;
    }
    /**
     * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
     */
    public int getRegionsInTransitionCount() {
      return regionsInTransition_.size();
    }
    /**
     * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.RegionInTransition getRegionsInTransition(int index) {
      return regionsInTransition_.get(index);
    }
    /**
     * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
     */
    public org.hbase.async.generated.ClusterStatusPB.RegionInTransitionOrBuilder getRegionsInTransitionOrBuilder(
        int index) {
      return regionsInTransition_.get(index);
    }

    // optional .ClusterId cluster_id = 5;
    public static final int CLUSTER_ID_FIELD_NUMBER = 5;
    private org.hbase.async.generated.ClusterIdPB.ClusterId clusterId_;
    /**
     * <code>optional .ClusterId cluster_id = 5;</code>
     */
    public boolean hasClusterId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .ClusterId cluster_id = 5;</code>
     */
    public org.hbase.async.generated.ClusterIdPB.ClusterId getClusterId() {
      return clusterId_;
    }

    // repeated .Coprocessor master_coprocessors = 6;
    public static final int MASTER_COPROCESSORS_FIELD_NUMBER = 6;
    private java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> masterCoprocessors_;
    /**
     * <code>repeated .Coprocessor master_coprocessors = 6;</code>
     */
    public java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> getMasterCoprocessorsList() {
      return masterCoprocessors_;
    }
    /**
     * <code>repeated .Coprocessor master_coprocessors = 6;</code>
     */
    public java.util.List<? extends org.hbase.async.generated.HBasePB.CoprocessorOrBuilder> 
        getMasterCoprocessorsOrBuilderList() {
      return masterCoprocessors_;
    }
    /**
     * <code>repeated .Coprocessor master_coprocessors = 6;</code>
     */
    public int getMasterCoprocessorsCount() {
      return masterCoprocessors_.size();
    }
    /**
     * <code>repeated .Coprocessor master_coprocessors = 6;</code>
     */
    public org.hbase.async.generated.HBasePB.Coprocessor getMasterCoprocessors(int index) {
      return masterCoprocessors_.get(index);
    }
    /**
     * <code>repeated .Coprocessor master_coprocessors = 6;</code>
     */
    public org.hbase.async.generated.HBasePB.CoprocessorOrBuilder getMasterCoprocessorsOrBuilder(
        int index) {
      return masterCoprocessors_.get(index);
    }

    // optional .ServerName master = 7;
    public static final int MASTER_FIELD_NUMBER = 7;
    private org.hbase.async.generated.HBasePB.ServerName master_;
    /**
     * <code>optional .ServerName master = 7;</code>
     */
    public boolean hasMaster() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .ServerName master = 7;</code>
     */
    public org.hbase.async.generated.HBasePB.ServerName getMaster() {
      return master_;
    }

    // repeated .ServerName backup_masters = 8;
    public static final int BACKUP_MASTERS_FIELD_NUMBER = 8;
    private java.util.List<org.hbase.async.generated.HBasePB.ServerName> backupMasters_;
    /**
     * <code>repeated .ServerName backup_masters = 8;</code>
     */
    public java.util.List<org.hbase.async.generated.HBasePB.ServerName> getBackupMastersList() {
      return backupMasters_;
    }
    /**
     * <code>repeated .ServerName backup_masters = 8;</code>
     */
    public java.util.List<? extends org.hbase.async.generated.HBasePB.ServerNameOrBuilder> 
        getBackupMastersOrBuilderList() {
      return backupMasters_;
    }
    /**
     * <code>repeated .ServerName backup_masters = 8;</code>
     */
    public int getBackupMastersCount() {
      return backupMasters_.size();
    }
    /**
     * <code>repeated .ServerName backup_masters = 8;</code>
     */
    public org.hbase.async.generated.HBasePB.ServerName getBackupMasters(int index) {
      return backupMasters_.get(index);
    }
    /**
     * <code>repeated .ServerName backup_masters = 8;</code>
     */
    public org.hbase.async.generated.HBasePB.ServerNameOrBuilder getBackupMastersOrBuilder(
        int index) {
      return backupMasters_.get(index);
    }

    // optional bool balancer_on = 9;
    public static final int BALANCER_ON_FIELD_NUMBER = 9;
    private boolean balancerOn_;
    /**
     * <code>optional bool balancer_on = 9;</code>
     */
    public boolean hasBalancerOn() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool balancer_on = 9;</code>
     */
    public boolean getBalancerOn() {
      return balancerOn_;
    }

    private void initFields() {
      hbaseVersion_ = org.hbase.async.generated.FSPB.HBaseVersionFileContent.getDefaultInstance();
      liveServers_ = java.util.Collections.emptyList();
      deadServers_ = java.util.Collections.emptyList();
      regionsInTransition_ = java.util.Collections.emptyList();
      clusterId_ = org.hbase.async.generated.ClusterIdPB.ClusterId.getDefaultInstance();
      masterCoprocessors_ = java.util.Collections.emptyList();
      master_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      backupMasters_ = java.util.Collections.emptyList();
      balancerOn_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasHbaseVersion()) {
        if (!getHbaseVersion().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getLiveServersCount(); i++) {
        if (!getLiveServers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getDeadServersCount(); i++) {
        if (!getDeadServers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getRegionsInTransitionCount(); i++) {
        if (!getRegionsInTransition(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasClusterId()) {
        if (!getClusterId().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMasterCoprocessorsCount(); i++) {
        if (!getMasterCoprocessors(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMaster()) {
        if (!getMaster().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBackupMastersCount(); i++) {
        if (!getBackupMasters(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, hbaseVersion_);
      }
      for (int i = 0; i < liveServers_.size(); i++) {
        output.writeMessage(2, liveServers_.get(i));
      }
      for (int i = 0; i < deadServers_.size(); i++) {
        output.writeMessage(3, deadServers_.get(i));
      }
      for (int i = 0; i < regionsInTransition_.size(); i++) {
        output.writeMessage(4, regionsInTransition_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(5, clusterId_);
      }
      for (int i = 0; i < masterCoprocessors_.size(); i++) {
        output.writeMessage(6, masterCoprocessors_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(7, master_);
      }
      for (int i = 0; i < backupMasters_.size(); i++) {
        output.writeMessage(8, backupMasters_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(9, balancerOn_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, hbaseVersion_);
      }
      for (int i = 0; i < liveServers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, liveServers_.get(i));
      }
      for (int i = 0; i < deadServers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, deadServers_.get(i));
      }
      for (int i = 0; i < regionsInTransition_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, regionsInTransition_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, clusterId_);
      }
      for (int i = 0; i < masterCoprocessors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, masterCoprocessors_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, master_);
      }
      for (int i = 0; i < backupMasters_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, backupMasters_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, balancerOn_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ClusterStatusPB.ClusterStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ClusterStatusPB.ClusterStatus prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ClusterStatus}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ClusterStatusPB.ClusterStatus, Builder>
        implements org.hbase.async.generated.ClusterStatusPB.ClusterStatusOrBuilder {
      // Construct using org.hbase.async.generated.ClusterStatusPB.ClusterStatus.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        hbaseVersion_ = org.hbase.async.generated.FSPB.HBaseVersionFileContent.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        liveServers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        deadServers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        regionsInTransition_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        clusterId_ = org.hbase.async.generated.ClusterIdPB.ClusterId.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        masterCoprocessors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        master_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        backupMasters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        balancerOn_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ClusterStatusPB.ClusterStatus getDefaultInstanceForType() {
        return org.hbase.async.generated.ClusterStatusPB.ClusterStatus.getDefaultInstance();
      }

      public org.hbase.async.generated.ClusterStatusPB.ClusterStatus build() {
        org.hbase.async.generated.ClusterStatusPB.ClusterStatus result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ClusterStatusPB.ClusterStatus buildPartial() {
        org.hbase.async.generated.ClusterStatusPB.ClusterStatus result = new org.hbase.async.generated.ClusterStatusPB.ClusterStatus(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hbaseVersion_ = hbaseVersion_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          liveServers_ = java.util.Collections.unmodifiableList(liveServers_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.liveServers_ = liveServers_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          deadServers_ = java.util.Collections.unmodifiableList(deadServers_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.deadServers_ = deadServers_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          regionsInTransition_ = java.util.Collections.unmodifiableList(regionsInTransition_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.regionsInTransition_ = regionsInTransition_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.clusterId_ = clusterId_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          masterCoprocessors_ = java.util.Collections.unmodifiableList(masterCoprocessors_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.masterCoprocessors_ = masterCoprocessors_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        result.master_ = master_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          backupMasters_ = java.util.Collections.unmodifiableList(backupMasters_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.backupMasters_ = backupMasters_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.balancerOn_ = balancerOn_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ClusterStatusPB.ClusterStatus other) {
        if (other == org.hbase.async.generated.ClusterStatusPB.ClusterStatus.getDefaultInstance()) return this;
        if (other.hasHbaseVersion()) {
          mergeHbaseVersion(other.getHbaseVersion());
        }
        if (!other.liveServers_.isEmpty()) {
          if (liveServers_.isEmpty()) {
            liveServers_ = other.liveServers_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLiveServersIsMutable();
            liveServers_.addAll(other.liveServers_);
          }
          
        }
        if (!other.deadServers_.isEmpty()) {
          if (deadServers_.isEmpty()) {
            deadServers_ = other.deadServers_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDeadServersIsMutable();
            deadServers_.addAll(other.deadServers_);
          }
          
        }
        if (!other.regionsInTransition_.isEmpty()) {
          if (regionsInTransition_.isEmpty()) {
            regionsInTransition_ = other.regionsInTransition_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureRegionsInTransitionIsMutable();
            regionsInTransition_.addAll(other.regionsInTransition_);
          }
          
        }
        if (other.hasClusterId()) {
          mergeClusterId(other.getClusterId());
        }
        if (!other.masterCoprocessors_.isEmpty()) {
          if (masterCoprocessors_.isEmpty()) {
            masterCoprocessors_ = other.masterCoprocessors_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureMasterCoprocessorsIsMutable();
            masterCoprocessors_.addAll(other.masterCoprocessors_);
          }
          
        }
        if (other.hasMaster()) {
          mergeMaster(other.getMaster());
        }
        if (!other.backupMasters_.isEmpty()) {
          if (backupMasters_.isEmpty()) {
            backupMasters_ = other.backupMasters_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureBackupMastersIsMutable();
            backupMasters_.addAll(other.backupMasters_);
          }
          
        }
        if (other.hasBalancerOn()) {
          setBalancerOn(other.getBalancerOn());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (hasHbaseVersion()) {
          if (!getHbaseVersion().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getLiveServersCount(); i++) {
          if (!getLiveServers(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getDeadServersCount(); i++) {
          if (!getDeadServers(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getRegionsInTransitionCount(); i++) {
          if (!getRegionsInTransition(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasClusterId()) {
          if (!getClusterId().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getMasterCoprocessorsCount(); i++) {
          if (!getMasterCoprocessors(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasMaster()) {
          if (!getMaster().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getBackupMastersCount(); i++) {
          if (!getBackupMasters(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ClusterStatusPB.ClusterStatus parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ClusterStatusPB.ClusterStatus) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .HBaseVersionFileContent hbase_version = 1;
      private org.hbase.async.generated.FSPB.HBaseVersionFileContent hbaseVersion_ = org.hbase.async.generated.FSPB.HBaseVersionFileContent.getDefaultInstance();
      /**
       * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
       */
      public boolean hasHbaseVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
       */
      public org.hbase.async.generated.FSPB.HBaseVersionFileContent getHbaseVersion() {
        return hbaseVersion_;
      }
      /**
       * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
       */
      public Builder setHbaseVersion(org.hbase.async.generated.FSPB.HBaseVersionFileContent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        hbaseVersion_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
       */
      public Builder setHbaseVersion(
          org.hbase.async.generated.FSPB.HBaseVersionFileContent.Builder builderForValue) {
        hbaseVersion_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
       */
      public Builder mergeHbaseVersion(org.hbase.async.generated.FSPB.HBaseVersionFileContent value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            hbaseVersion_ != org.hbase.async.generated.FSPB.HBaseVersionFileContent.getDefaultInstance()) {
          hbaseVersion_ =
            org.hbase.async.generated.FSPB.HBaseVersionFileContent.newBuilder(hbaseVersion_).mergeFrom(value).buildPartial();
        } else {
          hbaseVersion_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .HBaseVersionFileContent hbase_version = 1;</code>
       */
      public Builder clearHbaseVersion() {
        hbaseVersion_ = org.hbase.async.generated.FSPB.HBaseVersionFileContent.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // repeated .LiveServerInfo live_servers = 2;
      private java.util.List<org.hbase.async.generated.ClusterStatusPB.LiveServerInfo> liveServers_ =
        java.util.Collections.emptyList();
      private void ensureLiveServersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          liveServers_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.LiveServerInfo>(liveServers_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public java.util.List<org.hbase.async.generated.ClusterStatusPB.LiveServerInfo> getLiveServersList() {
        return java.util.Collections.unmodifiableList(liveServers_);
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public int getLiveServersCount() {
        return liveServers_.size();
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public org.hbase.async.generated.ClusterStatusPB.LiveServerInfo getLiveServers(int index) {
        return liveServers_.get(index);
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder setLiveServers(
          int index, org.hbase.async.generated.ClusterStatusPB.LiveServerInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLiveServersIsMutable();
        liveServers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder setLiveServers(
          int index, org.hbase.async.generated.ClusterStatusPB.LiveServerInfo.Builder builderForValue) {
        ensureLiveServersIsMutable();
        liveServers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder addLiveServers(org.hbase.async.generated.ClusterStatusPB.LiveServerInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLiveServersIsMutable();
        liveServers_.add(value);

        return this;
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder addLiveServers(
          int index, org.hbase.async.generated.ClusterStatusPB.LiveServerInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLiveServersIsMutable();
        liveServers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder addLiveServers(
          org.hbase.async.generated.ClusterStatusPB.LiveServerInfo.Builder builderForValue) {
        ensureLiveServersIsMutable();
        liveServers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder addLiveServers(
          int index, org.hbase.async.generated.ClusterStatusPB.LiveServerInfo.Builder builderForValue) {
        ensureLiveServersIsMutable();
        liveServers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder addAllLiveServers(
          java.lang.Iterable<? extends org.hbase.async.generated.ClusterStatusPB.LiveServerInfo> values) {
        ensureLiveServersIsMutable();
        super.addAll(values, liveServers_);

        return this;
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder clearLiveServers() {
        liveServers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .LiveServerInfo live_servers = 2;</code>
       */
      public Builder removeLiveServers(int index) {
        ensureLiveServersIsMutable();
        liveServers_.remove(index);

        return this;
      }

      // repeated .ServerName dead_servers = 3;
      private java.util.List<org.hbase.async.generated.HBasePB.ServerName> deadServers_ =
        java.util.Collections.emptyList();
      private void ensureDeadServersIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          deadServers_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.ServerName>(deadServers_);
          bitField0_ |= 0x00000004;
         }
      }

      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public java.util.List<org.hbase.async.generated.HBasePB.ServerName> getDeadServersList() {
        return java.util.Collections.unmodifiableList(deadServers_);
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public int getDeadServersCount() {
        return deadServers_.size();
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public org.hbase.async.generated.HBasePB.ServerName getDeadServers(int index) {
        return deadServers_.get(index);
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder setDeadServers(
          int index, org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeadServersIsMutable();
        deadServers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder setDeadServers(
          int index, org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        ensureDeadServersIsMutable();
        deadServers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder addDeadServers(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeadServersIsMutable();
        deadServers_.add(value);

        return this;
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder addDeadServers(
          int index, org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeadServersIsMutable();
        deadServers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder addDeadServers(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        ensureDeadServersIsMutable();
        deadServers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder addDeadServers(
          int index, org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        ensureDeadServersIsMutable();
        deadServers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder addAllDeadServers(
          java.lang.Iterable<? extends org.hbase.async.generated.HBasePB.ServerName> values) {
        ensureDeadServersIsMutable();
        super.addAll(values, deadServers_);

        return this;
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder clearDeadServers() {
        deadServers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);

        return this;
      }
      /**
       * <code>repeated .ServerName dead_servers = 3;</code>
       */
      public Builder removeDeadServers(int index) {
        ensureDeadServersIsMutable();
        deadServers_.remove(index);

        return this;
      }

      // repeated .RegionInTransition regions_in_transition = 4;
      private java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionInTransition> regionsInTransition_ =
        java.util.Collections.emptyList();
      private void ensureRegionsInTransitionIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          regionsInTransition_ = new java.util.ArrayList<org.hbase.async.generated.ClusterStatusPB.RegionInTransition>(regionsInTransition_);
          bitField0_ |= 0x00000008;
         }
      }

      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public java.util.List<org.hbase.async.generated.ClusterStatusPB.RegionInTransition> getRegionsInTransitionList() {
        return java.util.Collections.unmodifiableList(regionsInTransition_);
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public int getRegionsInTransitionCount() {
        return regionsInTransition_.size();
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public org.hbase.async.generated.ClusterStatusPB.RegionInTransition getRegionsInTransition(int index) {
        return regionsInTransition_.get(index);
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder setRegionsInTransition(
          int index, org.hbase.async.generated.ClusterStatusPB.RegionInTransition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionsInTransitionIsMutable();
        regionsInTransition_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder setRegionsInTransition(
          int index, org.hbase.async.generated.ClusterStatusPB.RegionInTransition.Builder builderForValue) {
        ensureRegionsInTransitionIsMutable();
        regionsInTransition_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder addRegionsInTransition(org.hbase.async.generated.ClusterStatusPB.RegionInTransition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionsInTransitionIsMutable();
        regionsInTransition_.add(value);

        return this;
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder addRegionsInTransition(
          int index, org.hbase.async.generated.ClusterStatusPB.RegionInTransition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionsInTransitionIsMutable();
        regionsInTransition_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder addRegionsInTransition(
          org.hbase.async.generated.ClusterStatusPB.RegionInTransition.Builder builderForValue) {
        ensureRegionsInTransitionIsMutable();
        regionsInTransition_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder addRegionsInTransition(
          int index, org.hbase.async.generated.ClusterStatusPB.RegionInTransition.Builder builderForValue) {
        ensureRegionsInTransitionIsMutable();
        regionsInTransition_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder addAllRegionsInTransition(
          java.lang.Iterable<? extends org.hbase.async.generated.ClusterStatusPB.RegionInTransition> values) {
        ensureRegionsInTransitionIsMutable();
        super.addAll(values, regionsInTransition_);

        return this;
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder clearRegionsInTransition() {
        regionsInTransition_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);

        return this;
      }
      /**
       * <code>repeated .RegionInTransition regions_in_transition = 4;</code>
       */
      public Builder removeRegionsInTransition(int index) {
        ensureRegionsInTransitionIsMutable();
        regionsInTransition_.remove(index);

        return this;
      }

      // optional .ClusterId cluster_id = 5;
      private org.hbase.async.generated.ClusterIdPB.ClusterId clusterId_ = org.hbase.async.generated.ClusterIdPB.ClusterId.getDefaultInstance();
      /**
       * <code>optional .ClusterId cluster_id = 5;</code>
       */
      public boolean hasClusterId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .ClusterId cluster_id = 5;</code>
       */
      public org.hbase.async.generated.ClusterIdPB.ClusterId getClusterId() {
        return clusterId_;
      }
      /**
       * <code>optional .ClusterId cluster_id = 5;</code>
       */
      public Builder setClusterId(org.hbase.async.generated.ClusterIdPB.ClusterId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        clusterId_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .ClusterId cluster_id = 5;</code>
       */
      public Builder setClusterId(
          org.hbase.async.generated.ClusterIdPB.ClusterId.Builder builderForValue) {
        clusterId_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .ClusterId cluster_id = 5;</code>
       */
      public Builder mergeClusterId(org.hbase.async.generated.ClusterIdPB.ClusterId value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            clusterId_ != org.hbase.async.generated.ClusterIdPB.ClusterId.getDefaultInstance()) {
          clusterId_ =
            org.hbase.async.generated.ClusterIdPB.ClusterId.newBuilder(clusterId_).mergeFrom(value).buildPartial();
        } else {
          clusterId_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .ClusterId cluster_id = 5;</code>
       */
      public Builder clearClusterId() {
        clusterId_ = org.hbase.async.generated.ClusterIdPB.ClusterId.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // repeated .Coprocessor master_coprocessors = 6;
      private java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> masterCoprocessors_ =
        java.util.Collections.emptyList();
      private void ensureMasterCoprocessorsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          masterCoprocessors_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.Coprocessor>(masterCoprocessors_);
          bitField0_ |= 0x00000020;
         }
      }

      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public java.util.List<org.hbase.async.generated.HBasePB.Coprocessor> getMasterCoprocessorsList() {
        return java.util.Collections.unmodifiableList(masterCoprocessors_);
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public int getMasterCoprocessorsCount() {
        return masterCoprocessors_.size();
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public org.hbase.async.generated.HBasePB.Coprocessor getMasterCoprocessors(int index) {
        return masterCoprocessors_.get(index);
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder setMasterCoprocessors(
          int index, org.hbase.async.generated.HBasePB.Coprocessor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMasterCoprocessorsIsMutable();
        masterCoprocessors_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder setMasterCoprocessors(
          int index, org.hbase.async.generated.HBasePB.Coprocessor.Builder builderForValue) {
        ensureMasterCoprocessorsIsMutable();
        masterCoprocessors_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder addMasterCoprocessors(org.hbase.async.generated.HBasePB.Coprocessor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMasterCoprocessorsIsMutable();
        masterCoprocessors_.add(value);

        return this;
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder addMasterCoprocessors(
          int index, org.hbase.async.generated.HBasePB.Coprocessor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMasterCoprocessorsIsMutable();
        masterCoprocessors_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder addMasterCoprocessors(
          org.hbase.async.generated.HBasePB.Coprocessor.Builder builderForValue) {
        ensureMasterCoprocessorsIsMutable();
        masterCoprocessors_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder addMasterCoprocessors(
          int index, org.hbase.async.generated.HBasePB.Coprocessor.Builder builderForValue) {
        ensureMasterCoprocessorsIsMutable();
        masterCoprocessors_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder addAllMasterCoprocessors(
          java.lang.Iterable<? extends org.hbase.async.generated.HBasePB.Coprocessor> values) {
        ensureMasterCoprocessorsIsMutable();
        super.addAll(values, masterCoprocessors_);

        return this;
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder clearMasterCoprocessors() {
        masterCoprocessors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);

        return this;
      }
      /**
       * <code>repeated .Coprocessor master_coprocessors = 6;</code>
       */
      public Builder removeMasterCoprocessors(int index) {
        ensureMasterCoprocessorsIsMutable();
        masterCoprocessors_.remove(index);

        return this;
      }

      // optional .ServerName master = 7;
      private org.hbase.async.generated.HBasePB.ServerName master_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      /**
       * <code>optional .ServerName master = 7;</code>
       */
      public boolean hasMaster() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .ServerName master = 7;</code>
       */
      public org.hbase.async.generated.HBasePB.ServerName getMaster() {
        return master_;
      }
      /**
       * <code>optional .ServerName master = 7;</code>
       */
      public Builder setMaster(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        master_ = value;

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .ServerName master = 7;</code>
       */
      public Builder setMaster(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        master_ = builderForValue.build();

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .ServerName master = 7;</code>
       */
      public Builder mergeMaster(org.hbase.async.generated.HBasePB.ServerName value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            master_ != org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance()) {
          master_ =
            org.hbase.async.generated.HBasePB.ServerName.newBuilder(master_).mergeFrom(value).buildPartial();
        } else {
          master_ = value;
        }

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .ServerName master = 7;</code>
       */
      public Builder clearMaster() {
        master_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // repeated .ServerName backup_masters = 8;
      private java.util.List<org.hbase.async.generated.HBasePB.ServerName> backupMasters_ =
        java.util.Collections.emptyList();
      private void ensureBackupMastersIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          backupMasters_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.ServerName>(backupMasters_);
          bitField0_ |= 0x00000080;
         }
      }

      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public java.util.List<org.hbase.async.generated.HBasePB.ServerName> getBackupMastersList() {
        return java.util.Collections.unmodifiableList(backupMasters_);
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public int getBackupMastersCount() {
        return backupMasters_.size();
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public org.hbase.async.generated.HBasePB.ServerName getBackupMasters(int index) {
        return backupMasters_.get(index);
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder setBackupMasters(
          int index, org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBackupMastersIsMutable();
        backupMasters_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder setBackupMasters(
          int index, org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        ensureBackupMastersIsMutable();
        backupMasters_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder addBackupMasters(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBackupMastersIsMutable();
        backupMasters_.add(value);

        return this;
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder addBackupMasters(
          int index, org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBackupMastersIsMutable();
        backupMasters_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder addBackupMasters(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        ensureBackupMastersIsMutable();
        backupMasters_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder addBackupMasters(
          int index, org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        ensureBackupMastersIsMutable();
        backupMasters_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder addAllBackupMasters(
          java.lang.Iterable<? extends org.hbase.async.generated.HBasePB.ServerName> values) {
        ensureBackupMastersIsMutable();
        super.addAll(values, backupMasters_);

        return this;
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder clearBackupMasters() {
        backupMasters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);

        return this;
      }
      /**
       * <code>repeated .ServerName backup_masters = 8;</code>
       */
      public Builder removeBackupMasters(int index) {
        ensureBackupMastersIsMutable();
        backupMasters_.remove(index);

        return this;
      }

      // optional bool balancer_on = 9;
      private boolean balancerOn_ ;
      /**
       * <code>optional bool balancer_on = 9;</code>
       */
      public boolean hasBalancerOn() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool balancer_on = 9;</code>
       */
      public boolean getBalancerOn() {
        return balancerOn_;
      }
      /**
       * <code>optional bool balancer_on = 9;</code>
       */
      public Builder setBalancerOn(boolean value) {
        bitField0_ |= 0x00000100;
        balancerOn_ = value;
        
        return this;
      }
      /**
       * <code>optional bool balancer_on = 9;</code>
       */
      public Builder clearBalancerOn() {
        bitField0_ = (bitField0_ & ~0x00000100);
        balancerOn_ = false;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ClusterStatus)
    }

    static {
      defaultInstance = new ClusterStatus(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ClusterStatus)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
