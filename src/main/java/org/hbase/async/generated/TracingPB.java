// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tracing.proto

package org.hbase.async.generated;

public final class TracingPB {
  private TracingPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface RPCTInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional int64 trace_id = 1;
    /**
     * <code>optional int64 trace_id = 1;</code>
     */
    boolean hasTraceId();
    /**
     * <code>optional int64 trace_id = 1;</code>
     */
    long getTraceId();

    // optional int64 parent_id = 2;
    /**
     * <code>optional int64 parent_id = 2;</code>
     */
    boolean hasParentId();
    /**
     * <code>optional int64 parent_id = 2;</code>
     */
    long getParentId();
  }
  /**
   * Protobuf type {@code RPCTInfo}
   *
   * <pre>
   *Used to pass through the information necessary to continue
   *a trace after an RPC is made. All we need is the traceid
   *(so we know the overarching trace this message is a part of), and
   *the id of the current span when this message was sent, so we know
   *what span caused the new span we will create when this message is received.
   * </pre>
   */
  public static final class RPCTInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements RPCTInfoOrBuilder {
    // Use RPCTInfo.newBuilder() to construct.
    private RPCTInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RPCTInfo(boolean noInit) {}

    private static final RPCTInfo defaultInstance;
    public static RPCTInfo getDefaultInstance() {
      return defaultInstance;
    }

    public RPCTInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RPCTInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              traceId_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              parentId_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RPCTInfo> PARSER =
        new com.google.protobuf.AbstractParser<RPCTInfo>() {
      public RPCTInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RPCTInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RPCTInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 trace_id = 1;
    public static final int TRACE_ID_FIELD_NUMBER = 1;
    private long traceId_;
    /**
     * <code>optional int64 trace_id = 1;</code>
     */
    public boolean hasTraceId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 trace_id = 1;</code>
     */
    public long getTraceId() {
      return traceId_;
    }

    // optional int64 parent_id = 2;
    public static final int PARENT_ID_FIELD_NUMBER = 2;
    private long parentId_;
    /**
     * <code>optional int64 parent_id = 2;</code>
     */
    public boolean hasParentId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 parent_id = 2;</code>
     */
    public long getParentId() {
      return parentId_;
    }

    private void initFields() {
      traceId_ = 0L;
      parentId_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, traceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, parentId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, traceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, parentId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.TracingPB.RPCTInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.TracingPB.RPCTInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.TracingPB.RPCTInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code RPCTInfo}
     *
     * <pre>
     *Used to pass through the information necessary to continue
     *a trace after an RPC is made. All we need is the traceid
     *(so we know the overarching trace this message is a part of), and
     *the id of the current span when this message was sent, so we know
     *what span caused the new span we will create when this message is received.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.TracingPB.RPCTInfo, Builder>
        implements org.hbase.async.generated.TracingPB.RPCTInfoOrBuilder {
      // Construct using org.hbase.async.generated.TracingPB.RPCTInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        traceId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        parentId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.TracingPB.RPCTInfo getDefaultInstanceForType() {
        return org.hbase.async.generated.TracingPB.RPCTInfo.getDefaultInstance();
      }

      public org.hbase.async.generated.TracingPB.RPCTInfo build() {
        org.hbase.async.generated.TracingPB.RPCTInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.TracingPB.RPCTInfo buildPartial() {
        org.hbase.async.generated.TracingPB.RPCTInfo result = new org.hbase.async.generated.TracingPB.RPCTInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.traceId_ = traceId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.parentId_ = parentId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.TracingPB.RPCTInfo other) {
        if (other == org.hbase.async.generated.TracingPB.RPCTInfo.getDefaultInstance()) return this;
        if (other.hasTraceId()) {
          setTraceId(other.getTraceId());
        }
        if (other.hasParentId()) {
          setParentId(other.getParentId());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.TracingPB.RPCTInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.TracingPB.RPCTInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 trace_id = 1;
      private long traceId_ ;
      /**
       * <code>optional int64 trace_id = 1;</code>
       */
      public boolean hasTraceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 trace_id = 1;</code>
       */
      public long getTraceId() {
        return traceId_;
      }
      /**
       * <code>optional int64 trace_id = 1;</code>
       */
      public Builder setTraceId(long value) {
        bitField0_ |= 0x00000001;
        traceId_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 trace_id = 1;</code>
       */
      public Builder clearTraceId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        traceId_ = 0L;
        
        return this;
      }

      // optional int64 parent_id = 2;
      private long parentId_ ;
      /**
       * <code>optional int64 parent_id = 2;</code>
       */
      public boolean hasParentId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 parent_id = 2;</code>
       */
      public long getParentId() {
        return parentId_;
      }
      /**
       * <code>optional int64 parent_id = 2;</code>
       */
      public Builder setParentId(long value) {
        bitField0_ |= 0x00000002;
        parentId_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 parent_id = 2;</code>
       */
      public Builder clearParentId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        parentId_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RPCTInfo)
    }

    static {
      defaultInstance = new RPCTInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RPCTInfo)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
