// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZooKeeper.proto

package org.hbase.async.generated;

public final class ZooKeeperPB {
  private ZooKeeperPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface MetaRegionServerOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .ServerName server = 1;
    /**
     * <code>required .ServerName server = 1;</code>
     *
     * <pre>
     * The ServerName hosting the meta region currently, or destination server,
     * if meta region is in transition.
     * </pre>
     */
    boolean hasServer();
    /**
     * <code>required .ServerName server = 1;</code>
     *
     * <pre>
     * The ServerName hosting the meta region currently, or destination server,
     * if meta region is in transition.
     * </pre>
     */
    org.hbase.async.generated.HBasePB.ServerName getServer();

    // optional uint32 rpc_version = 2;
    /**
     * <code>optional uint32 rpc_version = 2;</code>
     *
     * <pre>
     * The major version of the rpc the server speaks.  This is used so that
     * clients connecting to the cluster can have prior knowledge of what version
     * to send to a RegionServer.  AsyncHBase will use this to detect versions.
     * </pre>
     */
    boolean hasRpcVersion();
    /**
     * <code>optional uint32 rpc_version = 2;</code>
     *
     * <pre>
     * The major version of the rpc the server speaks.  This is used so that
     * clients connecting to the cluster can have prior knowledge of what version
     * to send to a RegionServer.  AsyncHBase will use this to detect versions.
     * </pre>
     */
    int getRpcVersion();

    // optional .RegionState.State state = 3;
    /**
     * <code>optional .RegionState.State state = 3;</code>
     *
     * <pre>
     * State of the region transition. OPEN means fully operational 'hbase:meta'
     * </pre>
     */
    boolean hasState();
    /**
     * <code>optional .RegionState.State state = 3;</code>
     *
     * <pre>
     * State of the region transition. OPEN means fully operational 'hbase:meta'
     * </pre>
     */
    org.hbase.async.generated.ClusterStatusPB.RegionState.State getState();
  }
  /**
   * Protobuf type {@code MetaRegionServer}
   *
   * <pre>
   **
   * Content of the meta-region-server znode.
   * </pre>
   */
  public static final class MetaRegionServer extends
      com.google.protobuf.GeneratedMessageLite
      implements MetaRegionServerOrBuilder {
    // Use MetaRegionServer.newBuilder() to construct.
    private MetaRegionServer(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private MetaRegionServer(boolean noInit) {}

    private static final MetaRegionServer defaultInstance;
    public static MetaRegionServer getDefaultInstance() {
      return defaultInstance;
    }

    public MetaRegionServer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private MetaRegionServer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.hbase.async.generated.HBasePB.ServerName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = server_.toBuilder();
              }
              server_ = input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(server_);
                server_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rpcVersion_ = input.readUInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.hbase.async.generated.ClusterStatusPB.RegionState.State value = org.hbase.async.generated.ClusterStatusPB.RegionState.State.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000004;
                state_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MetaRegionServer> PARSER =
        new com.google.protobuf.AbstractParser<MetaRegionServer>() {
      public MetaRegionServer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MetaRegionServer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MetaRegionServer> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .ServerName server = 1;
    public static final int SERVER_FIELD_NUMBER = 1;
    private org.hbase.async.generated.HBasePB.ServerName server_;
    /**
     * <code>required .ServerName server = 1;</code>
     *
     * <pre>
     * The ServerName hosting the meta region currently, or destination server,
     * if meta region is in transition.
     * </pre>
     */
    public boolean hasServer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ServerName server = 1;</code>
     *
     * <pre>
     * The ServerName hosting the meta region currently, or destination server,
     * if meta region is in transition.
     * </pre>
     */
    public org.hbase.async.generated.HBasePB.ServerName getServer() {
      return server_;
    }

    // optional uint32 rpc_version = 2;
    public static final int RPC_VERSION_FIELD_NUMBER = 2;
    private int rpcVersion_;
    /**
     * <code>optional uint32 rpc_version = 2;</code>
     *
     * <pre>
     * The major version of the rpc the server speaks.  This is used so that
     * clients connecting to the cluster can have prior knowledge of what version
     * to send to a RegionServer.  AsyncHBase will use this to detect versions.
     * </pre>
     */
    public boolean hasRpcVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 rpc_version = 2;</code>
     *
     * <pre>
     * The major version of the rpc the server speaks.  This is used so that
     * clients connecting to the cluster can have prior knowledge of what version
     * to send to a RegionServer.  AsyncHBase will use this to detect versions.
     * </pre>
     */
    public int getRpcVersion() {
      return rpcVersion_;
    }

    // optional .RegionState.State state = 3;
    public static final int STATE_FIELD_NUMBER = 3;
    private org.hbase.async.generated.ClusterStatusPB.RegionState.State state_;
    /**
     * <code>optional .RegionState.State state = 3;</code>
     *
     * <pre>
     * State of the region transition. OPEN means fully operational 'hbase:meta'
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .RegionState.State state = 3;</code>
     *
     * <pre>
     * State of the region transition. OPEN means fully operational 'hbase:meta'
     * </pre>
     */
    public org.hbase.async.generated.ClusterStatusPB.RegionState.State getState() {
      return state_;
    }

    private void initFields() {
      server_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      rpcVersion_ = 0;
      state_ = org.hbase.async.generated.ClusterStatusPB.RegionState.State.OFFLINE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasServer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getServer().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, server_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, rpcVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, state_.getNumber());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, server_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, rpcVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, state_.getNumber());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.MetaRegionServer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code MetaRegionServer}
     *
     * <pre>
     **
     * Content of the meta-region-server znode.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.MetaRegionServer, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.MetaRegionServerOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.MetaRegionServer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        server_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        rpcVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        state_ = org.hbase.async.generated.ClusterStatusPB.RegionState.State.OFFLINE;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.MetaRegionServer getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.MetaRegionServer.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.MetaRegionServer build() {
        org.hbase.async.generated.ZooKeeperPB.MetaRegionServer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.MetaRegionServer buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.MetaRegionServer result = new org.hbase.async.generated.ZooKeeperPB.MetaRegionServer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.server_ = server_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rpcVersion_ = rpcVersion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.state_ = state_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.MetaRegionServer other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.MetaRegionServer.getDefaultInstance()) return this;
        if (other.hasServer()) {
          mergeServer(other.getServer());
        }
        if (other.hasRpcVersion()) {
          setRpcVersion(other.getRpcVersion());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasServer()) {
          
          return false;
        }
        if (!getServer().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.MetaRegionServer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.MetaRegionServer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .ServerName server = 1;
      private org.hbase.async.generated.HBasePB.ServerName server_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      /**
       * <code>required .ServerName server = 1;</code>
       *
       * <pre>
       * The ServerName hosting the meta region currently, or destination server,
       * if meta region is in transition.
       * </pre>
       */
      public boolean hasServer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ServerName server = 1;</code>
       *
       * <pre>
       * The ServerName hosting the meta region currently, or destination server,
       * if meta region is in transition.
       * </pre>
       */
      public org.hbase.async.generated.HBasePB.ServerName getServer() {
        return server_;
      }
      /**
       * <code>required .ServerName server = 1;</code>
       *
       * <pre>
       * The ServerName hosting the meta region currently, or destination server,
       * if meta region is in transition.
       * </pre>
       */
      public Builder setServer(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        server_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName server = 1;</code>
       *
       * <pre>
       * The ServerName hosting the meta region currently, or destination server,
       * if meta region is in transition.
       * </pre>
       */
      public Builder setServer(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        server_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName server = 1;</code>
       *
       * <pre>
       * The ServerName hosting the meta region currently, or destination server,
       * if meta region is in transition.
       * </pre>
       */
      public Builder mergeServer(org.hbase.async.generated.HBasePB.ServerName value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            server_ != org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance()) {
          server_ =
            org.hbase.async.generated.HBasePB.ServerName.newBuilder(server_).mergeFrom(value).buildPartial();
        } else {
          server_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName server = 1;</code>
       *
       * <pre>
       * The ServerName hosting the meta region currently, or destination server,
       * if meta region is in transition.
       * </pre>
       */
      public Builder clearServer() {
        server_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional uint32 rpc_version = 2;
      private int rpcVersion_ ;
      /**
       * <code>optional uint32 rpc_version = 2;</code>
       *
       * <pre>
       * The major version of the rpc the server speaks.  This is used so that
       * clients connecting to the cluster can have prior knowledge of what version
       * to send to a RegionServer.  AsyncHBase will use this to detect versions.
       * </pre>
       */
      public boolean hasRpcVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 rpc_version = 2;</code>
       *
       * <pre>
       * The major version of the rpc the server speaks.  This is used so that
       * clients connecting to the cluster can have prior knowledge of what version
       * to send to a RegionServer.  AsyncHBase will use this to detect versions.
       * </pre>
       */
      public int getRpcVersion() {
        return rpcVersion_;
      }
      /**
       * <code>optional uint32 rpc_version = 2;</code>
       *
       * <pre>
       * The major version of the rpc the server speaks.  This is used so that
       * clients connecting to the cluster can have prior knowledge of what version
       * to send to a RegionServer.  AsyncHBase will use this to detect versions.
       * </pre>
       */
      public Builder setRpcVersion(int value) {
        bitField0_ |= 0x00000002;
        rpcVersion_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 rpc_version = 2;</code>
       *
       * <pre>
       * The major version of the rpc the server speaks.  This is used so that
       * clients connecting to the cluster can have prior knowledge of what version
       * to send to a RegionServer.  AsyncHBase will use this to detect versions.
       * </pre>
       */
      public Builder clearRpcVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rpcVersion_ = 0;
        
        return this;
      }

      // optional .RegionState.State state = 3;
      private org.hbase.async.generated.ClusterStatusPB.RegionState.State state_ = org.hbase.async.generated.ClusterStatusPB.RegionState.State.OFFLINE;
      /**
       * <code>optional .RegionState.State state = 3;</code>
       *
       * <pre>
       * State of the region transition. OPEN means fully operational 'hbase:meta'
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .RegionState.State state = 3;</code>
       *
       * <pre>
       * State of the region transition. OPEN means fully operational 'hbase:meta'
       * </pre>
       */
      public org.hbase.async.generated.ClusterStatusPB.RegionState.State getState() {
        return state_;
      }
      /**
       * <code>optional .RegionState.State state = 3;</code>
       *
       * <pre>
       * State of the region transition. OPEN means fully operational 'hbase:meta'
       * </pre>
       */
      public Builder setState(org.hbase.async.generated.ClusterStatusPB.RegionState.State value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        state_ = value;
        
        return this;
      }
      /**
       * <code>optional .RegionState.State state = 3;</code>
       *
       * <pre>
       * State of the region transition. OPEN means fully operational 'hbase:meta'
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000004);
        state_ = org.hbase.async.generated.ClusterStatusPB.RegionState.State.OFFLINE;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:MetaRegionServer)
    }

    static {
      defaultInstance = new MetaRegionServer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:MetaRegionServer)
  }

  public interface MasterOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .ServerName master = 1;
    /**
     * <code>required .ServerName master = 1;</code>
     *
     * <pre>
     * The ServerName of the current Master
     * </pre>
     */
    boolean hasMaster();
    /**
     * <code>required .ServerName master = 1;</code>
     *
     * <pre>
     * The ServerName of the current Master
     * </pre>
     */
    org.hbase.async.generated.HBasePB.ServerName getMaster();

    // optional uint32 rpc_version = 2;
    /**
     * <code>optional uint32 rpc_version = 2;</code>
     *
     * <pre>
     * Major RPC version so that clients can know what version the master can accept.
     * </pre>
     */
    boolean hasRpcVersion();
    /**
     * <code>optional uint32 rpc_version = 2;</code>
     *
     * <pre>
     * Major RPC version so that clients can know what version the master can accept.
     * </pre>
     */
    int getRpcVersion();

    // optional uint32 info_port = 3;
    /**
     * <code>optional uint32 info_port = 3;</code>
     */
    boolean hasInfoPort();
    /**
     * <code>optional uint32 info_port = 3;</code>
     */
    int getInfoPort();
  }
  /**
   * Protobuf type {@code Master}
   *
   * <pre>
   **
   * Content of the master znode.
   * </pre>
   */
  public static final class Master extends
      com.google.protobuf.GeneratedMessageLite
      implements MasterOrBuilder {
    // Use Master.newBuilder() to construct.
    private Master(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Master(boolean noInit) {}

    private static final Master defaultInstance;
    public static Master getDefaultInstance() {
      return defaultInstance;
    }

    public Master getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Master(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.hbase.async.generated.HBasePB.ServerName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = master_.toBuilder();
              }
              master_ = input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(master_);
                master_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rpcVersion_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              infoPort_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Master> PARSER =
        new com.google.protobuf.AbstractParser<Master>() {
      public Master parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Master(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Master> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .ServerName master = 1;
    public static final int MASTER_FIELD_NUMBER = 1;
    private org.hbase.async.generated.HBasePB.ServerName master_;
    /**
     * <code>required .ServerName master = 1;</code>
     *
     * <pre>
     * The ServerName of the current Master
     * </pre>
     */
    public boolean hasMaster() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ServerName master = 1;</code>
     *
     * <pre>
     * The ServerName of the current Master
     * </pre>
     */
    public org.hbase.async.generated.HBasePB.ServerName getMaster() {
      return master_;
    }

    // optional uint32 rpc_version = 2;
    public static final int RPC_VERSION_FIELD_NUMBER = 2;
    private int rpcVersion_;
    /**
     * <code>optional uint32 rpc_version = 2;</code>
     *
     * <pre>
     * Major RPC version so that clients can know what version the master can accept.
     * </pre>
     */
    public boolean hasRpcVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 rpc_version = 2;</code>
     *
     * <pre>
     * Major RPC version so that clients can know what version the master can accept.
     * </pre>
     */
    public int getRpcVersion() {
      return rpcVersion_;
    }

    // optional uint32 info_port = 3;
    public static final int INFO_PORT_FIELD_NUMBER = 3;
    private int infoPort_;
    /**
     * <code>optional uint32 info_port = 3;</code>
     */
    public boolean hasInfoPort() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 info_port = 3;</code>
     */
    public int getInfoPort() {
      return infoPort_;
    }

    private void initFields() {
      master_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      rpcVersion_ = 0;
      infoPort_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMaster()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMaster().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, master_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, rpcVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, infoPort_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, master_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, rpcVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, infoPort_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.Master parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Master parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.Master prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code Master}
     *
     * <pre>
     **
     * Content of the master znode.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.Master, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.MasterOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.Master.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        master_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        rpcVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        infoPort_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.Master getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.Master.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.Master build() {
        org.hbase.async.generated.ZooKeeperPB.Master result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.Master buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.Master result = new org.hbase.async.generated.ZooKeeperPB.Master(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.master_ = master_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rpcVersion_ = rpcVersion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.infoPort_ = infoPort_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.Master other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.Master.getDefaultInstance()) return this;
        if (other.hasMaster()) {
          mergeMaster(other.getMaster());
        }
        if (other.hasRpcVersion()) {
          setRpcVersion(other.getRpcVersion());
        }
        if (other.hasInfoPort()) {
          setInfoPort(other.getInfoPort());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMaster()) {
          
          return false;
        }
        if (!getMaster().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.Master parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.Master) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .ServerName master = 1;
      private org.hbase.async.generated.HBasePB.ServerName master_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      /**
       * <code>required .ServerName master = 1;</code>
       *
       * <pre>
       * The ServerName of the current Master
       * </pre>
       */
      public boolean hasMaster() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ServerName master = 1;</code>
       *
       * <pre>
       * The ServerName of the current Master
       * </pre>
       */
      public org.hbase.async.generated.HBasePB.ServerName getMaster() {
        return master_;
      }
      /**
       * <code>required .ServerName master = 1;</code>
       *
       * <pre>
       * The ServerName of the current Master
       * </pre>
       */
      public Builder setMaster(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        master_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName master = 1;</code>
       *
       * <pre>
       * The ServerName of the current Master
       * </pre>
       */
      public Builder setMaster(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        master_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName master = 1;</code>
       *
       * <pre>
       * The ServerName of the current Master
       * </pre>
       */
      public Builder mergeMaster(org.hbase.async.generated.HBasePB.ServerName value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            master_ != org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance()) {
          master_ =
            org.hbase.async.generated.HBasePB.ServerName.newBuilder(master_).mergeFrom(value).buildPartial();
        } else {
          master_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerName master = 1;</code>
       *
       * <pre>
       * The ServerName of the current Master
       * </pre>
       */
      public Builder clearMaster() {
        master_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional uint32 rpc_version = 2;
      private int rpcVersion_ ;
      /**
       * <code>optional uint32 rpc_version = 2;</code>
       *
       * <pre>
       * Major RPC version so that clients can know what version the master can accept.
       * </pre>
       */
      public boolean hasRpcVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 rpc_version = 2;</code>
       *
       * <pre>
       * Major RPC version so that clients can know what version the master can accept.
       * </pre>
       */
      public int getRpcVersion() {
        return rpcVersion_;
      }
      /**
       * <code>optional uint32 rpc_version = 2;</code>
       *
       * <pre>
       * Major RPC version so that clients can know what version the master can accept.
       * </pre>
       */
      public Builder setRpcVersion(int value) {
        bitField0_ |= 0x00000002;
        rpcVersion_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 rpc_version = 2;</code>
       *
       * <pre>
       * Major RPC version so that clients can know what version the master can accept.
       * </pre>
       */
      public Builder clearRpcVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rpcVersion_ = 0;
        
        return this;
      }

      // optional uint32 info_port = 3;
      private int infoPort_ ;
      /**
       * <code>optional uint32 info_port = 3;</code>
       */
      public boolean hasInfoPort() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 info_port = 3;</code>
       */
      public int getInfoPort() {
        return infoPort_;
      }
      /**
       * <code>optional uint32 info_port = 3;</code>
       */
      public Builder setInfoPort(int value) {
        bitField0_ |= 0x00000004;
        infoPort_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 info_port = 3;</code>
       */
      public Builder clearInfoPort() {
        bitField0_ = (bitField0_ & ~0x00000004);
        infoPort_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Master)
    }

    static {
      defaultInstance = new Master(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Master)
  }

  public interface ClusterUpOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string start_date = 1;
    /**
     * <code>required string start_date = 1;</code>
     *
     * <pre>
     * If this znode is present, cluster is up.  Currently
     * the data is cluster start_date.
     * </pre>
     */
    boolean hasStartDate();
    /**
     * <code>required string start_date = 1;</code>
     *
     * <pre>
     * If this znode is present, cluster is up.  Currently
     * the data is cluster start_date.
     * </pre>
     */
    java.lang.String getStartDate();
    /**
     * <code>required string start_date = 1;</code>
     *
     * <pre>
     * If this znode is present, cluster is up.  Currently
     * the data is cluster start_date.
     * </pre>
     */
    com.google.protobuf.ByteString
        getStartDateBytes();
  }
  /**
   * Protobuf type {@code ClusterUp}
   *
   * <pre>
   **
   * Content of the '/hbase/running', cluster state, znode.
   * </pre>
   */
  public static final class ClusterUp extends
      com.google.protobuf.GeneratedMessageLite
      implements ClusterUpOrBuilder {
    // Use ClusterUp.newBuilder() to construct.
    private ClusterUp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ClusterUp(boolean noInit) {}

    private static final ClusterUp defaultInstance;
    public static ClusterUp getDefaultInstance() {
      return defaultInstance;
    }

    public ClusterUp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ClusterUp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              startDate_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ClusterUp> PARSER =
        new com.google.protobuf.AbstractParser<ClusterUp>() {
      public ClusterUp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClusterUp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ClusterUp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string start_date = 1;
    public static final int START_DATE_FIELD_NUMBER = 1;
    private java.lang.Object startDate_;
    /**
     * <code>required string start_date = 1;</code>
     *
     * <pre>
     * If this znode is present, cluster is up.  Currently
     * the data is cluster start_date.
     * </pre>
     */
    public boolean hasStartDate() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string start_date = 1;</code>
     *
     * <pre>
     * If this znode is present, cluster is up.  Currently
     * the data is cluster start_date.
     * </pre>
     */
    public java.lang.String getStartDate() {
      java.lang.Object ref = startDate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startDate_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string start_date = 1;</code>
     *
     * <pre>
     * If this znode is present, cluster is up.  Currently
     * the data is cluster start_date.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStartDateBytes() {
      java.lang.Object ref = startDate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startDate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      startDate_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasStartDate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getStartDateBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getStartDateBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ClusterUp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.ClusterUp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ClusterUp}
     *
     * <pre>
     **
     * Content of the '/hbase/running', cluster state, znode.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.ClusterUp, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.ClusterUpOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.ClusterUp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        startDate_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.ClusterUp getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.ClusterUp.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.ClusterUp build() {
        org.hbase.async.generated.ZooKeeperPB.ClusterUp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.ClusterUp buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.ClusterUp result = new org.hbase.async.generated.ZooKeeperPB.ClusterUp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startDate_ = startDate_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.ClusterUp other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.ClusterUp.getDefaultInstance()) return this;
        if (other.hasStartDate()) {
          bitField0_ |= 0x00000001;
          startDate_ = other.startDate_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStartDate()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.ClusterUp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.ClusterUp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string start_date = 1;
      private java.lang.Object startDate_ = "";
      /**
       * <code>required string start_date = 1;</code>
       *
       * <pre>
       * If this znode is present, cluster is up.  Currently
       * the data is cluster start_date.
       * </pre>
       */
      public boolean hasStartDate() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string start_date = 1;</code>
       *
       * <pre>
       * If this znode is present, cluster is up.  Currently
       * the data is cluster start_date.
       * </pre>
       */
      public java.lang.String getStartDate() {
        java.lang.Object ref = startDate_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          startDate_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string start_date = 1;</code>
       *
       * <pre>
       * If this znode is present, cluster is up.  Currently
       * the data is cluster start_date.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStartDateBytes() {
        java.lang.Object ref = startDate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startDate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string start_date = 1;</code>
       *
       * <pre>
       * If this znode is present, cluster is up.  Currently
       * the data is cluster start_date.
       * </pre>
       */
      public Builder setStartDate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        startDate_ = value;
        
        return this;
      }
      /**
       * <code>required string start_date = 1;</code>
       *
       * <pre>
       * If this znode is present, cluster is up.  Currently
       * the data is cluster start_date.
       * </pre>
       */
      public Builder clearStartDate() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startDate_ = getDefaultInstance().getStartDate();
        
        return this;
      }
      /**
       * <code>required string start_date = 1;</code>
       *
       * <pre>
       * If this znode is present, cluster is up.  Currently
       * the data is cluster start_date.
       * </pre>
       */
      public Builder setStartDateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        startDate_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ClusterUp)
    }

    static {
      defaultInstance = new ClusterUp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ClusterUp)
  }

  public interface RegionTransitionOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 event_type_code = 1;
    /**
     * <code>required uint32 event_type_code = 1;</code>
     *
     * <pre>
     * Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
     * </pre>
     */
    boolean hasEventTypeCode();
    /**
     * <code>required uint32 event_type_code = 1;</code>
     *
     * <pre>
     * Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
     * </pre>
     */
    int getEventTypeCode();

    // required bytes region_name = 2;
    /**
     * <code>required bytes region_name = 2;</code>
     *
     * <pre>
     * Full regionname in bytes
     * </pre>
     */
    boolean hasRegionName();
    /**
     * <code>required bytes region_name = 2;</code>
     *
     * <pre>
     * Full regionname in bytes
     * </pre>
     */
    com.google.protobuf.ByteString getRegionName();

    // required uint64 create_time = 3;
    /**
     * <code>required uint64 create_time = 3;</code>
     */
    boolean hasCreateTime();
    /**
     * <code>required uint64 create_time = 3;</code>
     */
    long getCreateTime();

    // required .ServerName server_name = 4;
    /**
     * <code>required .ServerName server_name = 4;</code>
     *
     * <pre>
     * The region server where the transition will happen or is happening
     * </pre>
     */
    boolean hasServerName();
    /**
     * <code>required .ServerName server_name = 4;</code>
     *
     * <pre>
     * The region server where the transition will happen or is happening
     * </pre>
     */
    org.hbase.async.generated.HBasePB.ServerName getServerName();

    // optional bytes payload = 5;
    /**
     * <code>optional bytes payload = 5;</code>
     */
    boolean hasPayload();
    /**
     * <code>optional bytes payload = 5;</code>
     */
    com.google.protobuf.ByteString getPayload();
  }
  /**
   * Protobuf type {@code RegionTransition}
   *
   * <pre>
   **
   * What we write under unassigned up in zookeeper as a region moves through
   * open/close, etc., regions.  Details a region in transition.
   * </pre>
   */
  public static final class RegionTransition extends
      com.google.protobuf.GeneratedMessageLite
      implements RegionTransitionOrBuilder {
    // Use RegionTransition.newBuilder() to construct.
    private RegionTransition(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RegionTransition(boolean noInit) {}

    private static final RegionTransition defaultInstance;
    public static RegionTransition getDefaultInstance() {
      return defaultInstance;
    }

    public RegionTransition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RegionTransition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              eventTypeCode_ = input.readUInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              regionName_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              createTime_ = input.readUInt64();
              break;
            }
            case 34: {
              org.hbase.async.generated.HBasePB.ServerName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = serverName_.toBuilder();
              }
              serverName_ = input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(serverName_);
                serverName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              payload_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RegionTransition> PARSER =
        new com.google.protobuf.AbstractParser<RegionTransition>() {
      public RegionTransition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegionTransition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegionTransition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 event_type_code = 1;
    public static final int EVENT_TYPE_CODE_FIELD_NUMBER = 1;
    private int eventTypeCode_;
    /**
     * <code>required uint32 event_type_code = 1;</code>
     *
     * <pre>
     * Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
     * </pre>
     */
    public boolean hasEventTypeCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 event_type_code = 1;</code>
     *
     * <pre>
     * Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
     * </pre>
     */
    public int getEventTypeCode() {
      return eventTypeCode_;
    }

    // required bytes region_name = 2;
    public static final int REGION_NAME_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString regionName_;
    /**
     * <code>required bytes region_name = 2;</code>
     *
     * <pre>
     * Full regionname in bytes
     * </pre>
     */
    public boolean hasRegionName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes region_name = 2;</code>
     *
     * <pre>
     * Full regionname in bytes
     * </pre>
     */
    public com.google.protobuf.ByteString getRegionName() {
      return regionName_;
    }

    // required uint64 create_time = 3;
    public static final int CREATE_TIME_FIELD_NUMBER = 3;
    private long createTime_;
    /**
     * <code>required uint64 create_time = 3;</code>
     */
    public boolean hasCreateTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint64 create_time = 3;</code>
     */
    public long getCreateTime() {
      return createTime_;
    }

    // required .ServerName server_name = 4;
    public static final int SERVER_NAME_FIELD_NUMBER = 4;
    private org.hbase.async.generated.HBasePB.ServerName serverName_;
    /**
     * <code>required .ServerName server_name = 4;</code>
     *
     * <pre>
     * The region server where the transition will happen or is happening
     * </pre>
     */
    public boolean hasServerName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .ServerName server_name = 4;</code>
     *
     * <pre>
     * The region server where the transition will happen or is happening
     * </pre>
     */
    public org.hbase.async.generated.HBasePB.ServerName getServerName() {
      return serverName_;
    }

    // optional bytes payload = 5;
    public static final int PAYLOAD_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString payload_;
    /**
     * <code>optional bytes payload = 5;</code>
     */
    public boolean hasPayload() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes payload = 5;</code>
     */
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    private void initFields() {
      eventTypeCode_ = 0;
      regionName_ = com.google.protobuf.ByteString.EMPTY;
      createTime_ = 0L;
      serverName_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      payload_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasEventTypeCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRegionName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCreateTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasServerName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getServerName().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, eventTypeCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, regionName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, createTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, serverName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, payload_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, eventTypeCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, regionName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, createTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, serverName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, payload_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.RegionTransition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.RegionTransition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code RegionTransition}
     *
     * <pre>
     **
     * What we write under unassigned up in zookeeper as a region moves through
     * open/close, etc., regions.  Details a region in transition.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.RegionTransition, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.RegionTransitionOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.RegionTransition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        eventTypeCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        regionName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        createTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        serverName_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        payload_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.RegionTransition getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.RegionTransition.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.RegionTransition build() {
        org.hbase.async.generated.ZooKeeperPB.RegionTransition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.RegionTransition buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.RegionTransition result = new org.hbase.async.generated.ZooKeeperPB.RegionTransition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.eventTypeCode_ = eventTypeCode_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.regionName_ = regionName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.createTime_ = createTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.serverName_ = serverName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.payload_ = payload_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.RegionTransition other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.RegionTransition.getDefaultInstance()) return this;
        if (other.hasEventTypeCode()) {
          setEventTypeCode(other.getEventTypeCode());
        }
        if (other.hasRegionName()) {
          setRegionName(other.getRegionName());
        }
        if (other.hasCreateTime()) {
          setCreateTime(other.getCreateTime());
        }
        if (other.hasServerName()) {
          mergeServerName(other.getServerName());
        }
        if (other.hasPayload()) {
          setPayload(other.getPayload());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasEventTypeCode()) {
          
          return false;
        }
        if (!hasRegionName()) {
          
          return false;
        }
        if (!hasCreateTime()) {
          
          return false;
        }
        if (!hasServerName()) {
          
          return false;
        }
        if (!getServerName().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.RegionTransition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.RegionTransition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 event_type_code = 1;
      private int eventTypeCode_ ;
      /**
       * <code>required uint32 event_type_code = 1;</code>
       *
       * <pre>
       * Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
       * </pre>
       */
      public boolean hasEventTypeCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 event_type_code = 1;</code>
       *
       * <pre>
       * Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
       * </pre>
       */
      public int getEventTypeCode() {
        return eventTypeCode_;
      }
      /**
       * <code>required uint32 event_type_code = 1;</code>
       *
       * <pre>
       * Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
       * </pre>
       */
      public Builder setEventTypeCode(int value) {
        bitField0_ |= 0x00000001;
        eventTypeCode_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 event_type_code = 1;</code>
       *
       * <pre>
       * Code for EventType gotten by doing o.a.h.h.EventHandler.EventType.getCode()
       * </pre>
       */
      public Builder clearEventTypeCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        eventTypeCode_ = 0;
        
        return this;
      }

      // required bytes region_name = 2;
      private com.google.protobuf.ByteString regionName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes region_name = 2;</code>
       *
       * <pre>
       * Full regionname in bytes
       * </pre>
       */
      public boolean hasRegionName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes region_name = 2;</code>
       *
       * <pre>
       * Full regionname in bytes
       * </pre>
       */
      public com.google.protobuf.ByteString getRegionName() {
        return regionName_;
      }
      /**
       * <code>required bytes region_name = 2;</code>
       *
       * <pre>
       * Full regionname in bytes
       * </pre>
       */
      public Builder setRegionName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        regionName_ = value;
        
        return this;
      }
      /**
       * <code>required bytes region_name = 2;</code>
       *
       * <pre>
       * Full regionname in bytes
       * </pre>
       */
      public Builder clearRegionName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        regionName_ = getDefaultInstance().getRegionName();
        
        return this;
      }

      // required uint64 create_time = 3;
      private long createTime_ ;
      /**
       * <code>required uint64 create_time = 3;</code>
       */
      public boolean hasCreateTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint64 create_time = 3;</code>
       */
      public long getCreateTime() {
        return createTime_;
      }
      /**
       * <code>required uint64 create_time = 3;</code>
       */
      public Builder setCreateTime(long value) {
        bitField0_ |= 0x00000004;
        createTime_ = value;
        
        return this;
      }
      /**
       * <code>required uint64 create_time = 3;</code>
       */
      public Builder clearCreateTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        createTime_ = 0L;
        
        return this;
      }

      // required .ServerName server_name = 4;
      private org.hbase.async.generated.HBasePB.ServerName serverName_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      /**
       * <code>required .ServerName server_name = 4;</code>
       *
       * <pre>
       * The region server where the transition will happen or is happening
       * </pre>
       */
      public boolean hasServerName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .ServerName server_name = 4;</code>
       *
       * <pre>
       * The region server where the transition will happen or is happening
       * </pre>
       */
      public org.hbase.async.generated.HBasePB.ServerName getServerName() {
        return serverName_;
      }
      /**
       * <code>required .ServerName server_name = 4;</code>
       *
       * <pre>
       * The region server where the transition will happen or is happening
       * </pre>
       */
      public Builder setServerName(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        serverName_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .ServerName server_name = 4;</code>
       *
       * <pre>
       * The region server where the transition will happen or is happening
       * </pre>
       */
      public Builder setServerName(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        serverName_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .ServerName server_name = 4;</code>
       *
       * <pre>
       * The region server where the transition will happen or is happening
       * </pre>
       */
      public Builder mergeServerName(org.hbase.async.generated.HBasePB.ServerName value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            serverName_ != org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance()) {
          serverName_ =
            org.hbase.async.generated.HBasePB.ServerName.newBuilder(serverName_).mergeFrom(value).buildPartial();
        } else {
          serverName_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .ServerName server_name = 4;</code>
       *
       * <pre>
       * The region server where the transition will happen or is happening
       * </pre>
       */
      public Builder clearServerName() {
        serverName_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional bytes payload = 5;
      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes payload = 5;</code>
       */
      public boolean hasPayload() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes payload = 5;</code>
       */
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <code>optional bytes payload = 5;</code>
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        payload_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes payload = 5;</code>
       */
      public Builder clearPayload() {
        bitField0_ = (bitField0_ & ~0x00000010);
        payload_ = getDefaultInstance().getPayload();
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RegionTransition)
    }

    static {
      defaultInstance = new RegionTransition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RegionTransition)
  }

  public interface SplitLogTaskOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .SplitLogTask.State state = 1;
    /**
     * <code>required .SplitLogTask.State state = 1;</code>
     */
    boolean hasState();
    /**
     * <code>required .SplitLogTask.State state = 1;</code>
     */
    org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State getState();

    // required .ServerName server_name = 2;
    /**
     * <code>required .ServerName server_name = 2;</code>
     */
    boolean hasServerName();
    /**
     * <code>required .ServerName server_name = 2;</code>
     */
    org.hbase.async.generated.HBasePB.ServerName getServerName();

    // optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];
    /**
     * <code>optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];</code>
     */
    boolean hasMode();
    /**
     * <code>optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];</code>
     */
    org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode getMode();
  }
  /**
   * Protobuf type {@code SplitLogTask}
   *
   * <pre>
   **
   * WAL SplitLog directory znodes have this for content.  Used doing distributed
   * WAL splitting.  Holds current state and name of server that originated split.
   * </pre>
   */
  public static final class SplitLogTask extends
      com.google.protobuf.GeneratedMessageLite
      implements SplitLogTaskOrBuilder {
    // Use SplitLogTask.newBuilder() to construct.
    private SplitLogTask(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private SplitLogTask(boolean noInit) {}

    private static final SplitLogTask defaultInstance;
    public static SplitLogTask getDefaultInstance() {
      return defaultInstance;
    }

    public SplitLogTask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private SplitLogTask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State value = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
            case 18: {
              org.hbase.async.generated.HBasePB.ServerName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = serverName_.toBuilder();
              }
              serverName_ = input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(serverName_);
                serverName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode value = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000004;
                mode_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<SplitLogTask> PARSER =
        new com.google.protobuf.AbstractParser<SplitLogTask>() {
      public SplitLogTask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SplitLogTask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SplitLogTask> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code SplitLogTask.State}
     */
    public enum State
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNASSIGNED = 0;</code>
       */
      UNASSIGNED(0, 0),
      /**
       * <code>OWNED = 1;</code>
       */
      OWNED(1, 1),
      /**
       * <code>RESIGNED = 2;</code>
       */
      RESIGNED(2, 2),
      /**
       * <code>DONE = 3;</code>
       */
      DONE(3, 3),
      /**
       * <code>ERR = 4;</code>
       */
      ERR(4, 4),
      ;

      /**
       * <code>UNASSIGNED = 0;</code>
       */
      public static final int UNASSIGNED_VALUE = 0;
      /**
       * <code>OWNED = 1;</code>
       */
      public static final int OWNED_VALUE = 1;
      /**
       * <code>RESIGNED = 2;</code>
       */
      public static final int RESIGNED_VALUE = 2;
      /**
       * <code>DONE = 3;</code>
       */
      public static final int DONE_VALUE = 3;
      /**
       * <code>ERR = 4;</code>
       */
      public static final int ERR_VALUE = 4;


      public final int getNumber() { return value; }

      public static State valueOf(int value) {
        switch (value) {
          case 0: return UNASSIGNED;
          case 1: return OWNED;
          case 2: return RESIGNED;
          case 3: return DONE;
          case 4: return ERR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<State>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<State>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<State>() {
              public State findValueByNumber(int number) {
                return State.valueOf(number);
              }
            };

      private final int value;

      private State(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:SplitLogTask.State)
    }

    /**
     * Protobuf enum {@code SplitLogTask.RecoveryMode}
     */
    public enum RecoveryMode
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0, 0),
      /**
       * <code>LOG_SPLITTING = 1;</code>
       */
      LOG_SPLITTING(1, 1),
      /**
       * <code>LOG_REPLAY = 2;</code>
       */
      LOG_REPLAY(2, 2),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <code>LOG_SPLITTING = 1;</code>
       */
      public static final int LOG_SPLITTING_VALUE = 1;
      /**
       * <code>LOG_REPLAY = 2;</code>
       */
      public static final int LOG_REPLAY_VALUE = 2;


      public final int getNumber() { return value; }

      public static RecoveryMode valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return LOG_SPLITTING;
          case 2: return LOG_REPLAY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RecoveryMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RecoveryMode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RecoveryMode>() {
              public RecoveryMode findValueByNumber(int number) {
                return RecoveryMode.valueOf(number);
              }
            };

      private final int value;

      private RecoveryMode(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:SplitLogTask.RecoveryMode)
    }

    private int bitField0_;
    // required .SplitLogTask.State state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State state_;
    /**
     * <code>required .SplitLogTask.State state = 1;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .SplitLogTask.State state = 1;</code>
     */
    public org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State getState() {
      return state_;
    }

    // required .ServerName server_name = 2;
    public static final int SERVER_NAME_FIELD_NUMBER = 2;
    private org.hbase.async.generated.HBasePB.ServerName serverName_;
    /**
     * <code>required .ServerName server_name = 2;</code>
     */
    public boolean hasServerName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .ServerName server_name = 2;</code>
     */
    public org.hbase.async.generated.HBasePB.ServerName getServerName() {
      return serverName_;
    }

    // optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];
    public static final int MODE_FIELD_NUMBER = 3;
    private org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode mode_;
    /**
     * <code>optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];</code>
     */
    public boolean hasMode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];</code>
     */
    public org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode getMode() {
      return mode_;
    }

    private void initFields() {
      state_ = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State.UNASSIGNED;
      serverName_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      mode_ = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode.UNKNOWN;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasServerName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getServerName().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, serverName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, mode_.getNumber());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, serverName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, mode_.getNumber());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SplitLogTask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.SplitLogTask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code SplitLogTask}
     *
     * <pre>
     **
     * WAL SplitLog directory znodes have this for content.  Used doing distributed
     * WAL splitting.  Holds current state and name of server that originated split.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.SplitLogTask, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.SplitLogTaskOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.SplitLogTask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        state_ = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State.UNASSIGNED;
        bitField0_ = (bitField0_ & ~0x00000001);
        serverName_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        mode_ = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode.UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.SplitLogTask getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.SplitLogTask.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.SplitLogTask build() {
        org.hbase.async.generated.ZooKeeperPB.SplitLogTask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.SplitLogTask buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.SplitLogTask result = new org.hbase.async.generated.ZooKeeperPB.SplitLogTask(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.serverName_ = serverName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mode_ = mode_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.SplitLogTask other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.SplitLogTask.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasServerName()) {
          mergeServerName(other.getServerName());
        }
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        if (!hasServerName()) {
          
          return false;
        }
        if (!getServerName().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.SplitLogTask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.SplitLogTask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .SplitLogTask.State state = 1;
      private org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State state_ = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State.UNASSIGNED;
      /**
       * <code>required .SplitLogTask.State state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .SplitLogTask.State state = 1;</code>
       */
      public org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State getState() {
        return state_;
      }
      /**
       * <code>required .SplitLogTask.State state = 1;</code>
       */
      public Builder setState(org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        
        return this;
      }
      /**
       * <code>required .SplitLogTask.State state = 1;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.State.UNASSIGNED;
        
        return this;
      }

      // required .ServerName server_name = 2;
      private org.hbase.async.generated.HBasePB.ServerName serverName_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      /**
       * <code>required .ServerName server_name = 2;</code>
       */
      public boolean hasServerName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .ServerName server_name = 2;</code>
       */
      public org.hbase.async.generated.HBasePB.ServerName getServerName() {
        return serverName_;
      }
      /**
       * <code>required .ServerName server_name = 2;</code>
       */
      public Builder setServerName(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        serverName_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .ServerName server_name = 2;</code>
       */
      public Builder setServerName(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        serverName_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .ServerName server_name = 2;</code>
       */
      public Builder mergeServerName(org.hbase.async.generated.HBasePB.ServerName value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            serverName_ != org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance()) {
          serverName_ =
            org.hbase.async.generated.HBasePB.ServerName.newBuilder(serverName_).mergeFrom(value).buildPartial();
        } else {
          serverName_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .ServerName server_name = 2;</code>
       */
      public Builder clearServerName() {
        serverName_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];
      private org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode mode_ = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode.UNKNOWN;
      /**
       * <code>optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];</code>
       */
      public boolean hasMode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];</code>
       */
      public org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode getMode() {
        return mode_;
      }
      /**
       * <code>optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];</code>
       */
      public Builder setMode(org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        mode_ = value;
        
        return this;
      }
      /**
       * <code>optional .SplitLogTask.RecoveryMode mode = 3 [default = UNKNOWN];</code>
       */
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mode_ = org.hbase.async.generated.ZooKeeperPB.SplitLogTask.RecoveryMode.UNKNOWN;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SplitLogTask)
    }

    static {
      defaultInstance = new SplitLogTask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SplitLogTask)
  }

  public interface TableOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .Table.State state = 1 [default = ENABLED];
    /**
     * <code>required .Table.State state = 1 [default = ENABLED];</code>
     *
     * <pre>
     * This is the table's state.  If no znode for a table,
     * its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
     * for more.
     * </pre>
     */
    boolean hasState();
    /**
     * <code>required .Table.State state = 1 [default = ENABLED];</code>
     *
     * <pre>
     * This is the table's state.  If no znode for a table,
     * its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
     * for more.
     * </pre>
     */
    org.hbase.async.generated.ZooKeeperPB.Table.State getState();
  }
  /**
   * Protobuf type {@code Table}
   *
   * <pre>
   **
   * The znode that holds state of table.
   * </pre>
   */
  public static final class Table extends
      com.google.protobuf.GeneratedMessageLite
      implements TableOrBuilder {
    // Use Table.newBuilder() to construct.
    private Table(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Table(boolean noInit) {}

    private static final Table defaultInstance;
    public static Table getDefaultInstance() {
      return defaultInstance;
    }

    public Table getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Table(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.hbase.async.generated.ZooKeeperPB.Table.State value = org.hbase.async.generated.ZooKeeperPB.Table.State.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Table> PARSER =
        new com.google.protobuf.AbstractParser<Table>() {
      public Table parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Table(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Table> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Table.State}
     *
     * <pre>
     * Table's current state
     * </pre>
     */
    public enum State
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>ENABLED = 0;</code>
       */
      ENABLED(0, 0),
      /**
       * <code>DISABLED = 1;</code>
       */
      DISABLED(1, 1),
      /**
       * <code>DISABLING = 2;</code>
       */
      DISABLING(2, 2),
      /**
       * <code>ENABLING = 3;</code>
       */
      ENABLING(3, 3),
      ;

      /**
       * <code>ENABLED = 0;</code>
       */
      public static final int ENABLED_VALUE = 0;
      /**
       * <code>DISABLED = 1;</code>
       */
      public static final int DISABLED_VALUE = 1;
      /**
       * <code>DISABLING = 2;</code>
       */
      public static final int DISABLING_VALUE = 2;
      /**
       * <code>ENABLING = 3;</code>
       */
      public static final int ENABLING_VALUE = 3;


      public final int getNumber() { return value; }

      public static State valueOf(int value) {
        switch (value) {
          case 0: return ENABLED;
          case 1: return DISABLED;
          case 2: return DISABLING;
          case 3: return ENABLING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<State>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<State>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<State>() {
              public State findValueByNumber(int number) {
                return State.valueOf(number);
              }
            };

      private final int value;

      private State(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Table.State)
    }

    private int bitField0_;
    // required .Table.State state = 1 [default = ENABLED];
    public static final int STATE_FIELD_NUMBER = 1;
    private org.hbase.async.generated.ZooKeeperPB.Table.State state_;
    /**
     * <code>required .Table.State state = 1 [default = ENABLED];</code>
     *
     * <pre>
     * This is the table's state.  If no znode for a table,
     * its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
     * for more.
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .Table.State state = 1 [default = ENABLED];</code>
     *
     * <pre>
     * This is the table's state.  If no znode for a table,
     * its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
     * for more.
     * </pre>
     */
    public org.hbase.async.generated.ZooKeeperPB.Table.State getState() {
      return state_;
    }

    private void initFields() {
      state_ = org.hbase.async.generated.ZooKeeperPB.Table.State.ENABLED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.Table parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.Table parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.Table prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code Table}
     *
     * <pre>
     **
     * The znode that holds state of table.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.Table, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.TableOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.Table.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        state_ = org.hbase.async.generated.ZooKeeperPB.Table.State.ENABLED;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.Table getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.Table.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.Table build() {
        org.hbase.async.generated.ZooKeeperPB.Table result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.Table buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.Table result = new org.hbase.async.generated.ZooKeeperPB.Table(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.Table other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.Table.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.Table parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.Table) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .Table.State state = 1 [default = ENABLED];
      private org.hbase.async.generated.ZooKeeperPB.Table.State state_ = org.hbase.async.generated.ZooKeeperPB.Table.State.ENABLED;
      /**
       * <code>required .Table.State state = 1 [default = ENABLED];</code>
       *
       * <pre>
       * This is the table's state.  If no znode for a table,
       * its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
       * for more.
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .Table.State state = 1 [default = ENABLED];</code>
       *
       * <pre>
       * This is the table's state.  If no znode for a table,
       * its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
       * for more.
       * </pre>
       */
      public org.hbase.async.generated.ZooKeeperPB.Table.State getState() {
        return state_;
      }
      /**
       * <code>required .Table.State state = 1 [default = ENABLED];</code>
       *
       * <pre>
       * This is the table's state.  If no znode for a table,
       * its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
       * for more.
       * </pre>
       */
      public Builder setState(org.hbase.async.generated.ZooKeeperPB.Table.State value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        
        return this;
      }
      /**
       * <code>required .Table.State state = 1 [default = ENABLED];</code>
       *
       * <pre>
       * This is the table's state.  If no znode for a table,
       * its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
       * for more.
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = org.hbase.async.generated.ZooKeeperPB.Table.State.ENABLED;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Table)
    }

    static {
      defaultInstance = new Table(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Table)
  }

  public interface ReplicationPeerOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string clusterkey = 1;
    /**
     * <code>required string clusterkey = 1;</code>
     *
     * <pre>
     * clusterkey is the concatenation of the slave cluster's
     * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
     * </pre>
     */
    boolean hasClusterkey();
    /**
     * <code>required string clusterkey = 1;</code>
     *
     * <pre>
     * clusterkey is the concatenation of the slave cluster's
     * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
     * </pre>
     */
    java.lang.String getClusterkey();
    /**
     * <code>required string clusterkey = 1;</code>
     *
     * <pre>
     * clusterkey is the concatenation of the slave cluster's
     * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
     * </pre>
     */
    com.google.protobuf.ByteString
        getClusterkeyBytes();

    // optional string replicationEndpointImpl = 2;
    /**
     * <code>optional string replicationEndpointImpl = 2;</code>
     */
    boolean hasReplicationEndpointImpl();
    /**
     * <code>optional string replicationEndpointImpl = 2;</code>
     */
    java.lang.String getReplicationEndpointImpl();
    /**
     * <code>optional string replicationEndpointImpl = 2;</code>
     */
    com.google.protobuf.ByteString
        getReplicationEndpointImplBytes();

    // repeated .BytesBytesPair data = 3;
    /**
     * <code>repeated .BytesBytesPair data = 3;</code>
     */
    java.util.List<org.hbase.async.generated.HBasePB.BytesBytesPair> 
        getDataList();
    /**
     * <code>repeated .BytesBytesPair data = 3;</code>
     */
    org.hbase.async.generated.HBasePB.BytesBytesPair getData(int index);
    /**
     * <code>repeated .BytesBytesPair data = 3;</code>
     */
    int getDataCount();

    // repeated .NameStringPair configuration = 4;
    /**
     * <code>repeated .NameStringPair configuration = 4;</code>
     */
    java.util.List<org.hbase.async.generated.HBasePB.NameStringPair> 
        getConfigurationList();
    /**
     * <code>repeated .NameStringPair configuration = 4;</code>
     */
    org.hbase.async.generated.HBasePB.NameStringPair getConfiguration(int index);
    /**
     * <code>repeated .NameStringPair configuration = 4;</code>
     */
    int getConfigurationCount();
  }
  /**
   * Protobuf type {@code ReplicationPeer}
   *
   * <pre>
   **
   * Used by replication. Holds a replication peer key.
   * </pre>
   */
  public static final class ReplicationPeer extends
      com.google.protobuf.GeneratedMessageLite
      implements ReplicationPeerOrBuilder {
    // Use ReplicationPeer.newBuilder() to construct.
    private ReplicationPeer(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ReplicationPeer(boolean noInit) {}

    private static final ReplicationPeer defaultInstance;
    public static ReplicationPeer getDefaultInstance() {
      return defaultInstance;
    }

    public ReplicationPeer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ReplicationPeer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              clusterkey_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              replicationEndpointImpl_ = input.readBytes();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                data_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.BytesBytesPair>();
                mutable_bitField0_ |= 0x00000004;
              }
              data_.add(input.readMessage(org.hbase.async.generated.HBasePB.BytesBytesPair.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                configuration_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.NameStringPair>();
                mutable_bitField0_ |= 0x00000008;
              }
              configuration_.add(input.readMessage(org.hbase.async.generated.HBasePB.NameStringPair.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          configuration_ = java.util.Collections.unmodifiableList(configuration_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ReplicationPeer> PARSER =
        new com.google.protobuf.AbstractParser<ReplicationPeer>() {
      public ReplicationPeer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReplicationPeer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReplicationPeer> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string clusterkey = 1;
    public static final int CLUSTERKEY_FIELD_NUMBER = 1;
    private java.lang.Object clusterkey_;
    /**
     * <code>required string clusterkey = 1;</code>
     *
     * <pre>
     * clusterkey is the concatenation of the slave cluster's
     * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
     * </pre>
     */
    public boolean hasClusterkey() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string clusterkey = 1;</code>
     *
     * <pre>
     * clusterkey is the concatenation of the slave cluster's
     * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
     * </pre>
     */
    public java.lang.String getClusterkey() {
      java.lang.Object ref = clusterkey_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          clusterkey_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string clusterkey = 1;</code>
     *
     * <pre>
     * clusterkey is the concatenation of the slave cluster's
     * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
     * </pre>
     */
    public com.google.protobuf.ByteString
        getClusterkeyBytes() {
      java.lang.Object ref = clusterkey_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clusterkey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string replicationEndpointImpl = 2;
    public static final int REPLICATIONENDPOINTIMPL_FIELD_NUMBER = 2;
    private java.lang.Object replicationEndpointImpl_;
    /**
     * <code>optional string replicationEndpointImpl = 2;</code>
     */
    public boolean hasReplicationEndpointImpl() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string replicationEndpointImpl = 2;</code>
     */
    public java.lang.String getReplicationEndpointImpl() {
      java.lang.Object ref = replicationEndpointImpl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          replicationEndpointImpl_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string replicationEndpointImpl = 2;</code>
     */
    public com.google.protobuf.ByteString
        getReplicationEndpointImplBytes() {
      java.lang.Object ref = replicationEndpointImpl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        replicationEndpointImpl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated .BytesBytesPair data = 3;
    public static final int DATA_FIELD_NUMBER = 3;
    private java.util.List<org.hbase.async.generated.HBasePB.BytesBytesPair> data_;
    /**
     * <code>repeated .BytesBytesPair data = 3;</code>
     */
    public java.util.List<org.hbase.async.generated.HBasePB.BytesBytesPair> getDataList() {
      return data_;
    }
    /**
     * <code>repeated .BytesBytesPair data = 3;</code>
     */
    public java.util.List<? extends org.hbase.async.generated.HBasePB.BytesBytesPairOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <code>repeated .BytesBytesPair data = 3;</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated .BytesBytesPair data = 3;</code>
     */
    public org.hbase.async.generated.HBasePB.BytesBytesPair getData(int index) {
      return data_.get(index);
    }
    /**
     * <code>repeated .BytesBytesPair data = 3;</code>
     */
    public org.hbase.async.generated.HBasePB.BytesBytesPairOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    // repeated .NameStringPair configuration = 4;
    public static final int CONFIGURATION_FIELD_NUMBER = 4;
    private java.util.List<org.hbase.async.generated.HBasePB.NameStringPair> configuration_;
    /**
     * <code>repeated .NameStringPair configuration = 4;</code>
     */
    public java.util.List<org.hbase.async.generated.HBasePB.NameStringPair> getConfigurationList() {
      return configuration_;
    }
    /**
     * <code>repeated .NameStringPair configuration = 4;</code>
     */
    public java.util.List<? extends org.hbase.async.generated.HBasePB.NameStringPairOrBuilder> 
        getConfigurationOrBuilderList() {
      return configuration_;
    }
    /**
     * <code>repeated .NameStringPair configuration = 4;</code>
     */
    public int getConfigurationCount() {
      return configuration_.size();
    }
    /**
     * <code>repeated .NameStringPair configuration = 4;</code>
     */
    public org.hbase.async.generated.HBasePB.NameStringPair getConfiguration(int index) {
      return configuration_.get(index);
    }
    /**
     * <code>repeated .NameStringPair configuration = 4;</code>
     */
    public org.hbase.async.generated.HBasePB.NameStringPairOrBuilder getConfigurationOrBuilder(
        int index) {
      return configuration_.get(index);
    }

    private void initFields() {
      clusterkey_ = "";
      replicationEndpointImpl_ = "";
      data_ = java.util.Collections.emptyList();
      configuration_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasClusterkey()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDataCount(); i++) {
        if (!getData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getConfigurationCount(); i++) {
        if (!getConfiguration(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getClusterkeyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getReplicationEndpointImplBytes());
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(3, data_.get(i));
      }
      for (int i = 0; i < configuration_.size(); i++) {
        output.writeMessage(4, configuration_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getClusterkeyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getReplicationEndpointImplBytes());
      }
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, data_.get(i));
      }
      for (int i = 0; i < configuration_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, configuration_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.ReplicationPeer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ReplicationPeer}
     *
     * <pre>
     **
     * Used by replication. Holds a replication peer key.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.ReplicationPeer, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.ReplicationPeerOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.ReplicationPeer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        clusterkey_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        replicationEndpointImpl_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        configuration_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationPeer getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.ReplicationPeer.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationPeer build() {
        org.hbase.async.generated.ZooKeeperPB.ReplicationPeer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationPeer buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.ReplicationPeer result = new org.hbase.async.generated.ZooKeeperPB.ReplicationPeer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.clusterkey_ = clusterkey_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.replicationEndpointImpl_ = replicationEndpointImpl_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.data_ = data_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          configuration_ = java.util.Collections.unmodifiableList(configuration_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.configuration_ = configuration_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.ReplicationPeer other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.ReplicationPeer.getDefaultInstance()) return this;
        if (other.hasClusterkey()) {
          bitField0_ |= 0x00000001;
          clusterkey_ = other.clusterkey_;
          
        }
        if (other.hasReplicationEndpointImpl()) {
          bitField0_ |= 0x00000002;
          replicationEndpointImpl_ = other.replicationEndpointImpl_;
          
        }
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          
        }
        if (!other.configuration_.isEmpty()) {
          if (configuration_.isEmpty()) {
            configuration_ = other.configuration_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureConfigurationIsMutable();
            configuration_.addAll(other.configuration_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasClusterkey()) {
          
          return false;
        }
        for (int i = 0; i < getDataCount(); i++) {
          if (!getData(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getConfigurationCount(); i++) {
          if (!getConfiguration(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.ReplicationPeer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.ReplicationPeer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string clusterkey = 1;
      private java.lang.Object clusterkey_ = "";
      /**
       * <code>required string clusterkey = 1;</code>
       *
       * <pre>
       * clusterkey is the concatenation of the slave cluster's
       * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
       * </pre>
       */
      public boolean hasClusterkey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string clusterkey = 1;</code>
       *
       * <pre>
       * clusterkey is the concatenation of the slave cluster's
       * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
       * </pre>
       */
      public java.lang.String getClusterkey() {
        java.lang.Object ref = clusterkey_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          clusterkey_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string clusterkey = 1;</code>
       *
       * <pre>
       * clusterkey is the concatenation of the slave cluster's
       * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
       * </pre>
       */
      public com.google.protobuf.ByteString
          getClusterkeyBytes() {
        java.lang.Object ref = clusterkey_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clusterkey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string clusterkey = 1;</code>
       *
       * <pre>
       * clusterkey is the concatenation of the slave cluster's
       * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
       * </pre>
       */
      public Builder setClusterkey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        clusterkey_ = value;
        
        return this;
      }
      /**
       * <code>required string clusterkey = 1;</code>
       *
       * <pre>
       * clusterkey is the concatenation of the slave cluster's
       * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
       * </pre>
       */
      public Builder clearClusterkey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        clusterkey_ = getDefaultInstance().getClusterkey();
        
        return this;
      }
      /**
       * <code>required string clusterkey = 1;</code>
       *
       * <pre>
       * clusterkey is the concatenation of the slave cluster's
       * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent
       * </pre>
       */
      public Builder setClusterkeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        clusterkey_ = value;
        
        return this;
      }

      // optional string replicationEndpointImpl = 2;
      private java.lang.Object replicationEndpointImpl_ = "";
      /**
       * <code>optional string replicationEndpointImpl = 2;</code>
       */
      public boolean hasReplicationEndpointImpl() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string replicationEndpointImpl = 2;</code>
       */
      public java.lang.String getReplicationEndpointImpl() {
        java.lang.Object ref = replicationEndpointImpl_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          replicationEndpointImpl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string replicationEndpointImpl = 2;</code>
       */
      public com.google.protobuf.ByteString
          getReplicationEndpointImplBytes() {
        java.lang.Object ref = replicationEndpointImpl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          replicationEndpointImpl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string replicationEndpointImpl = 2;</code>
       */
      public Builder setReplicationEndpointImpl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        replicationEndpointImpl_ = value;
        
        return this;
      }
      /**
       * <code>optional string replicationEndpointImpl = 2;</code>
       */
      public Builder clearReplicationEndpointImpl() {
        bitField0_ = (bitField0_ & ~0x00000002);
        replicationEndpointImpl_ = getDefaultInstance().getReplicationEndpointImpl();
        
        return this;
      }
      /**
       * <code>optional string replicationEndpointImpl = 2;</code>
       */
      public Builder setReplicationEndpointImplBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        replicationEndpointImpl_ = value;
        
        return this;
      }

      // repeated .BytesBytesPair data = 3;
      private java.util.List<org.hbase.async.generated.HBasePB.BytesBytesPair> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.BytesBytesPair>(data_);
          bitField0_ |= 0x00000004;
         }
      }

      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public java.util.List<org.hbase.async.generated.HBasePB.BytesBytesPair> getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public org.hbase.async.generated.HBasePB.BytesBytesPair getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder setData(
          int index, org.hbase.async.generated.HBasePB.BytesBytesPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIsMutable();
        data_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder setData(
          int index, org.hbase.async.generated.HBasePB.BytesBytesPair.Builder builderForValue) {
        ensureDataIsMutable();
        data_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder addData(org.hbase.async.generated.HBasePB.BytesBytesPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIsMutable();
        data_.add(value);

        return this;
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder addData(
          int index, org.hbase.async.generated.HBasePB.BytesBytesPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIsMutable();
        data_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder addData(
          org.hbase.async.generated.HBasePB.BytesBytesPair.Builder builderForValue) {
        ensureDataIsMutable();
        data_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder addData(
          int index, org.hbase.async.generated.HBasePB.BytesBytesPair.Builder builderForValue) {
        ensureDataIsMutable();
        data_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends org.hbase.async.generated.HBasePB.BytesBytesPair> values) {
        ensureDataIsMutable();
        super.addAll(values, data_);

        return this;
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);

        return this;
      }
      /**
       * <code>repeated .BytesBytesPair data = 3;</code>
       */
      public Builder removeData(int index) {
        ensureDataIsMutable();
        data_.remove(index);

        return this;
      }

      // repeated .NameStringPair configuration = 4;
      private java.util.List<org.hbase.async.generated.HBasePB.NameStringPair> configuration_ =
        java.util.Collections.emptyList();
      private void ensureConfigurationIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          configuration_ = new java.util.ArrayList<org.hbase.async.generated.HBasePB.NameStringPair>(configuration_);
          bitField0_ |= 0x00000008;
         }
      }

      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public java.util.List<org.hbase.async.generated.HBasePB.NameStringPair> getConfigurationList() {
        return java.util.Collections.unmodifiableList(configuration_);
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public int getConfigurationCount() {
        return configuration_.size();
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public org.hbase.async.generated.HBasePB.NameStringPair getConfiguration(int index) {
        return configuration_.get(index);
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder setConfiguration(
          int index, org.hbase.async.generated.HBasePB.NameStringPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigurationIsMutable();
        configuration_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder setConfiguration(
          int index, org.hbase.async.generated.HBasePB.NameStringPair.Builder builderForValue) {
        ensureConfigurationIsMutable();
        configuration_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder addConfiguration(org.hbase.async.generated.HBasePB.NameStringPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigurationIsMutable();
        configuration_.add(value);

        return this;
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder addConfiguration(
          int index, org.hbase.async.generated.HBasePB.NameStringPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigurationIsMutable();
        configuration_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder addConfiguration(
          org.hbase.async.generated.HBasePB.NameStringPair.Builder builderForValue) {
        ensureConfigurationIsMutable();
        configuration_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder addConfiguration(
          int index, org.hbase.async.generated.HBasePB.NameStringPair.Builder builderForValue) {
        ensureConfigurationIsMutable();
        configuration_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder addAllConfiguration(
          java.lang.Iterable<? extends org.hbase.async.generated.HBasePB.NameStringPair> values) {
        ensureConfigurationIsMutable();
        super.addAll(values, configuration_);

        return this;
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder clearConfiguration() {
        configuration_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);

        return this;
      }
      /**
       * <code>repeated .NameStringPair configuration = 4;</code>
       */
      public Builder removeConfiguration(int index) {
        ensureConfigurationIsMutable();
        configuration_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:ReplicationPeer)
    }

    static {
      defaultInstance = new ReplicationPeer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ReplicationPeer)
  }

  public interface ReplicationStateOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .ReplicationState.State state = 1;
    /**
     * <code>required .ReplicationState.State state = 1;</code>
     */
    boolean hasState();
    /**
     * <code>required .ReplicationState.State state = 1;</code>
     */
    org.hbase.async.generated.ZooKeeperPB.ReplicationState.State getState();
  }
  /**
   * Protobuf type {@code ReplicationState}
   *
   * <pre>
   **
   * Used by replication. Holds whether enabled or disabled
   * </pre>
   */
  public static final class ReplicationState extends
      com.google.protobuf.GeneratedMessageLite
      implements ReplicationStateOrBuilder {
    // Use ReplicationState.newBuilder() to construct.
    private ReplicationState(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ReplicationState(boolean noInit) {}

    private static final ReplicationState defaultInstance;
    public static ReplicationState getDefaultInstance() {
      return defaultInstance;
    }

    public ReplicationState getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ReplicationState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.hbase.async.generated.ZooKeeperPB.ReplicationState.State value = org.hbase.async.generated.ZooKeeperPB.ReplicationState.State.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ReplicationState> PARSER =
        new com.google.protobuf.AbstractParser<ReplicationState>() {
      public ReplicationState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReplicationState(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReplicationState> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code ReplicationState.State}
     */
    public enum State
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>ENABLED = 0;</code>
       */
      ENABLED(0, 0),
      /**
       * <code>DISABLED = 1;</code>
       */
      DISABLED(1, 1),
      ;

      /**
       * <code>ENABLED = 0;</code>
       */
      public static final int ENABLED_VALUE = 0;
      /**
       * <code>DISABLED = 1;</code>
       */
      public static final int DISABLED_VALUE = 1;


      public final int getNumber() { return value; }

      public static State valueOf(int value) {
        switch (value) {
          case 0: return ENABLED;
          case 1: return DISABLED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<State>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<State>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<State>() {
              public State findValueByNumber(int number) {
                return State.valueOf(number);
              }
            };

      private final int value;

      private State(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:ReplicationState.State)
    }

    private int bitField0_;
    // required .ReplicationState.State state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private org.hbase.async.generated.ZooKeeperPB.ReplicationState.State state_;
    /**
     * <code>required .ReplicationState.State state = 1;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ReplicationState.State state = 1;</code>
     */
    public org.hbase.async.generated.ZooKeeperPB.ReplicationState.State getState() {
      return state_;
    }

    private void initFields() {
      state_ = org.hbase.async.generated.ZooKeeperPB.ReplicationState.State.ENABLED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.ReplicationState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ReplicationState}
     *
     * <pre>
     **
     * Used by replication. Holds whether enabled or disabled
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.ReplicationState, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.ReplicationStateOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.ReplicationState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        state_ = org.hbase.async.generated.ZooKeeperPB.ReplicationState.State.ENABLED;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationState getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.ReplicationState.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationState build() {
        org.hbase.async.generated.ZooKeeperPB.ReplicationState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationState buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.ReplicationState result = new org.hbase.async.generated.ZooKeeperPB.ReplicationState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.ReplicationState other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.ReplicationState.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.ReplicationState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.ReplicationState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .ReplicationState.State state = 1;
      private org.hbase.async.generated.ZooKeeperPB.ReplicationState.State state_ = org.hbase.async.generated.ZooKeeperPB.ReplicationState.State.ENABLED;
      /**
       * <code>required .ReplicationState.State state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ReplicationState.State state = 1;</code>
       */
      public org.hbase.async.generated.ZooKeeperPB.ReplicationState.State getState() {
        return state_;
      }
      /**
       * <code>required .ReplicationState.State state = 1;</code>
       */
      public Builder setState(org.hbase.async.generated.ZooKeeperPB.ReplicationState.State value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        
        return this;
      }
      /**
       * <code>required .ReplicationState.State state = 1;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = org.hbase.async.generated.ZooKeeperPB.ReplicationState.State.ENABLED;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ReplicationState)
    }

    static {
      defaultInstance = new ReplicationState(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ReplicationState)
  }

  public interface ReplicationHLogPositionOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required int64 position = 1;
    /**
     * <code>required int64 position = 1;</code>
     */
    boolean hasPosition();
    /**
     * <code>required int64 position = 1;</code>
     */
    long getPosition();
  }
  /**
   * Protobuf type {@code ReplicationHLogPosition}
   *
   * <pre>
   **
   * Used by replication. Holds the current position in an WAL file.
   * </pre>
   */
  public static final class ReplicationHLogPosition extends
      com.google.protobuf.GeneratedMessageLite
      implements ReplicationHLogPositionOrBuilder {
    // Use ReplicationHLogPosition.newBuilder() to construct.
    private ReplicationHLogPosition(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ReplicationHLogPosition(boolean noInit) {}

    private static final ReplicationHLogPosition defaultInstance;
    public static ReplicationHLogPosition getDefaultInstance() {
      return defaultInstance;
    }

    public ReplicationHLogPosition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ReplicationHLogPosition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              position_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ReplicationHLogPosition> PARSER =
        new com.google.protobuf.AbstractParser<ReplicationHLogPosition>() {
      public ReplicationHLogPosition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReplicationHLogPosition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReplicationHLogPosition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private long position_;
    /**
     * <code>required int64 position = 1;</code>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 position = 1;</code>
     */
    public long getPosition() {
      return position_;
    }

    private void initFields() {
      position_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, position_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, position_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ReplicationHLogPosition}
     *
     * <pre>
     **
     * Used by replication. Holds the current position in an WAL file.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPositionOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        position_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition build() {
        org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition result = new org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.position_ = position_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosition()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.ReplicationHLogPosition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 position = 1;
      private long position_ ;
      /**
       * <code>required int64 position = 1;</code>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 position = 1;</code>
       */
      public long getPosition() {
        return position_;
      }
      /**
       * <code>required int64 position = 1;</code>
       */
      public Builder setPosition(long value) {
        bitField0_ |= 0x00000001;
        position_ = value;
        
        return this;
      }
      /**
       * <code>required int64 position = 1;</code>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ReplicationHLogPosition)
    }

    static {
      defaultInstance = new ReplicationHLogPosition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ReplicationHLogPosition)
  }

  public interface ReplicationLockOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string lock_owner = 1;
    /**
     * <code>required string lock_owner = 1;</code>
     */
    boolean hasLockOwner();
    /**
     * <code>required string lock_owner = 1;</code>
     */
    java.lang.String getLockOwner();
    /**
     * <code>required string lock_owner = 1;</code>
     */
    com.google.protobuf.ByteString
        getLockOwnerBytes();
  }
  /**
   * Protobuf type {@code ReplicationLock}
   *
   * <pre>
   **
   * Used by replication. Used to lock a region server during failover.
   * </pre>
   */
  public static final class ReplicationLock extends
      com.google.protobuf.GeneratedMessageLite
      implements ReplicationLockOrBuilder {
    // Use ReplicationLock.newBuilder() to construct.
    private ReplicationLock(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ReplicationLock(boolean noInit) {}

    private static final ReplicationLock defaultInstance;
    public static ReplicationLock getDefaultInstance() {
      return defaultInstance;
    }

    public ReplicationLock getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ReplicationLock(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              lockOwner_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ReplicationLock> PARSER =
        new com.google.protobuf.AbstractParser<ReplicationLock>() {
      public ReplicationLock parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReplicationLock(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReplicationLock> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string lock_owner = 1;
    public static final int LOCK_OWNER_FIELD_NUMBER = 1;
    private java.lang.Object lockOwner_;
    /**
     * <code>required string lock_owner = 1;</code>
     */
    public boolean hasLockOwner() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string lock_owner = 1;</code>
     */
    public java.lang.String getLockOwner() {
      java.lang.Object ref = lockOwner_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          lockOwner_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string lock_owner = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLockOwnerBytes() {
      java.lang.Object ref = lockOwner_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        lockOwner_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      lockOwner_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasLockOwner()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getLockOwnerBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getLockOwnerBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.ReplicationLock parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.ReplicationLock prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code ReplicationLock}
     *
     * <pre>
     **
     * Used by replication. Used to lock a region server during failover.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.ReplicationLock, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.ReplicationLockOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.ReplicationLock.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        lockOwner_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationLock getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.ReplicationLock.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationLock build() {
        org.hbase.async.generated.ZooKeeperPB.ReplicationLock result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.ReplicationLock buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.ReplicationLock result = new org.hbase.async.generated.ZooKeeperPB.ReplicationLock(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.lockOwner_ = lockOwner_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.ReplicationLock other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.ReplicationLock.getDefaultInstance()) return this;
        if (other.hasLockOwner()) {
          bitField0_ |= 0x00000001;
          lockOwner_ = other.lockOwner_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLockOwner()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.ReplicationLock parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.ReplicationLock) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string lock_owner = 1;
      private java.lang.Object lockOwner_ = "";
      /**
       * <code>required string lock_owner = 1;</code>
       */
      public boolean hasLockOwner() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string lock_owner = 1;</code>
       */
      public java.lang.String getLockOwner() {
        java.lang.Object ref = lockOwner_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          lockOwner_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string lock_owner = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLockOwnerBytes() {
        java.lang.Object ref = lockOwner_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          lockOwner_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string lock_owner = 1;</code>
       */
      public Builder setLockOwner(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        lockOwner_ = value;
        
        return this;
      }
      /**
       * <code>required string lock_owner = 1;</code>
       */
      public Builder clearLockOwner() {
        bitField0_ = (bitField0_ & ~0x00000001);
        lockOwner_ = getDefaultInstance().getLockOwner();
        
        return this;
      }
      /**
       * <code>required string lock_owner = 1;</code>
       */
      public Builder setLockOwnerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        lockOwner_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ReplicationLock)
    }

    static {
      defaultInstance = new ReplicationLock(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ReplicationLock)
  }

  public interface TableLockOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional .TableName table_name = 1;
    /**
     * <code>optional .TableName table_name = 1;</code>
     */
    boolean hasTableName();
    /**
     * <code>optional .TableName table_name = 1;</code>
     */
    org.hbase.async.generated.HBasePB.TableName getTableName();

    // optional .ServerName lock_owner = 2;
    /**
     * <code>optional .ServerName lock_owner = 2;</code>
     */
    boolean hasLockOwner();
    /**
     * <code>optional .ServerName lock_owner = 2;</code>
     */
    org.hbase.async.generated.HBasePB.ServerName getLockOwner();

    // optional int64 thread_id = 3;
    /**
     * <code>optional int64 thread_id = 3;</code>
     */
    boolean hasThreadId();
    /**
     * <code>optional int64 thread_id = 3;</code>
     */
    long getThreadId();

    // optional bool is_shared = 4;
    /**
     * <code>optional bool is_shared = 4;</code>
     */
    boolean hasIsShared();
    /**
     * <code>optional bool is_shared = 4;</code>
     */
    boolean getIsShared();

    // optional string purpose = 5;
    /**
     * <code>optional string purpose = 5;</code>
     */
    boolean hasPurpose();
    /**
     * <code>optional string purpose = 5;</code>
     */
    java.lang.String getPurpose();
    /**
     * <code>optional string purpose = 5;</code>
     */
    com.google.protobuf.ByteString
        getPurposeBytes();

    // optional int64 create_time = 6;
    /**
     * <code>optional int64 create_time = 6;</code>
     */
    boolean hasCreateTime();
    /**
     * <code>optional int64 create_time = 6;</code>
     */
    long getCreateTime();
  }
  /**
   * Protobuf type {@code TableLock}
   *
   * <pre>
   **
   * Metadata associated with a table lock in zookeeper
   * </pre>
   */
  public static final class TableLock extends
      com.google.protobuf.GeneratedMessageLite
      implements TableLockOrBuilder {
    // Use TableLock.newBuilder() to construct.
    private TableLock(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private TableLock(boolean noInit) {}

    private static final TableLock defaultInstance;
    public static TableLock getDefaultInstance() {
      return defaultInstance;
    }

    public TableLock getDefaultInstanceForType() {
      return defaultInstance;
    }

    private TableLock(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.hbase.async.generated.HBasePB.TableName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = tableName_.toBuilder();
              }
              tableName_ = input.readMessage(org.hbase.async.generated.HBasePB.TableName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tableName_);
                tableName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.hbase.async.generated.HBasePB.ServerName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = lockOwner_.toBuilder();
              }
              lockOwner_ = input.readMessage(org.hbase.async.generated.HBasePB.ServerName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lockOwner_);
                lockOwner_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              threadId_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              isShared_ = input.readBool();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              purpose_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              createTime_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<TableLock> PARSER =
        new com.google.protobuf.AbstractParser<TableLock>() {
      public TableLock parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableLock(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableLock> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .TableName table_name = 1;
    public static final int TABLE_NAME_FIELD_NUMBER = 1;
    private org.hbase.async.generated.HBasePB.TableName tableName_;
    /**
     * <code>optional .TableName table_name = 1;</code>
     */
    public boolean hasTableName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .TableName table_name = 1;</code>
     */
    public org.hbase.async.generated.HBasePB.TableName getTableName() {
      return tableName_;
    }

    // optional .ServerName lock_owner = 2;
    public static final int LOCK_OWNER_FIELD_NUMBER = 2;
    private org.hbase.async.generated.HBasePB.ServerName lockOwner_;
    /**
     * <code>optional .ServerName lock_owner = 2;</code>
     */
    public boolean hasLockOwner() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .ServerName lock_owner = 2;</code>
     */
    public org.hbase.async.generated.HBasePB.ServerName getLockOwner() {
      return lockOwner_;
    }

    // optional int64 thread_id = 3;
    public static final int THREAD_ID_FIELD_NUMBER = 3;
    private long threadId_;
    /**
     * <code>optional int64 thread_id = 3;</code>
     */
    public boolean hasThreadId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 thread_id = 3;</code>
     */
    public long getThreadId() {
      return threadId_;
    }

    // optional bool is_shared = 4;
    public static final int IS_SHARED_FIELD_NUMBER = 4;
    private boolean isShared_;
    /**
     * <code>optional bool is_shared = 4;</code>
     */
    public boolean hasIsShared() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool is_shared = 4;</code>
     */
    public boolean getIsShared() {
      return isShared_;
    }

    // optional string purpose = 5;
    public static final int PURPOSE_FIELD_NUMBER = 5;
    private java.lang.Object purpose_;
    /**
     * <code>optional string purpose = 5;</code>
     */
    public boolean hasPurpose() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string purpose = 5;</code>
     */
    public java.lang.String getPurpose() {
      java.lang.Object ref = purpose_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          purpose_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string purpose = 5;</code>
     */
    public com.google.protobuf.ByteString
        getPurposeBytes() {
      java.lang.Object ref = purpose_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        purpose_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int64 create_time = 6;
    public static final int CREATE_TIME_FIELD_NUMBER = 6;
    private long createTime_;
    /**
     * <code>optional int64 create_time = 6;</code>
     */
    public boolean hasCreateTime() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int64 create_time = 6;</code>
     */
    public long getCreateTime() {
      return createTime_;
    }

    private void initFields() {
      tableName_ = org.hbase.async.generated.HBasePB.TableName.getDefaultInstance();
      lockOwner_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      threadId_ = 0L;
      isShared_ = false;
      purpose_ = "";
      createTime_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasTableName()) {
        if (!getTableName().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLockOwner()) {
        if (!getLockOwner().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, tableName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, lockOwner_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, threadId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, isShared_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getPurposeBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(6, createTime_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, tableName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, lockOwner_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, threadId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isShared_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getPurposeBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, createTime_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.TableLock parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.TableLock prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code TableLock}
     *
     * <pre>
     **
     * Metadata associated with a table lock in zookeeper
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.TableLock, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.TableLockOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.TableLock.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tableName_ = org.hbase.async.generated.HBasePB.TableName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        lockOwner_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        threadId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        isShared_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        purpose_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        createTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.TableLock getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.TableLock.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.TableLock build() {
        org.hbase.async.generated.ZooKeeperPB.TableLock result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.TableLock buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.TableLock result = new org.hbase.async.generated.ZooKeeperPB.TableLock(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tableName_ = tableName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.lockOwner_ = lockOwner_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.threadId_ = threadId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isShared_ = isShared_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.purpose_ = purpose_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.createTime_ = createTime_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.TableLock other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.TableLock.getDefaultInstance()) return this;
        if (other.hasTableName()) {
          mergeTableName(other.getTableName());
        }
        if (other.hasLockOwner()) {
          mergeLockOwner(other.getLockOwner());
        }
        if (other.hasThreadId()) {
          setThreadId(other.getThreadId());
        }
        if (other.hasIsShared()) {
          setIsShared(other.getIsShared());
        }
        if (other.hasPurpose()) {
          bitField0_ |= 0x00000010;
          purpose_ = other.purpose_;
          
        }
        if (other.hasCreateTime()) {
          setCreateTime(other.getCreateTime());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (hasTableName()) {
          if (!getTableName().isInitialized()) {
            
            return false;
          }
        }
        if (hasLockOwner()) {
          if (!getLockOwner().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.TableLock parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.TableLock) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .TableName table_name = 1;
      private org.hbase.async.generated.HBasePB.TableName tableName_ = org.hbase.async.generated.HBasePB.TableName.getDefaultInstance();
      /**
       * <code>optional .TableName table_name = 1;</code>
       */
      public boolean hasTableName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .TableName table_name = 1;</code>
       */
      public org.hbase.async.generated.HBasePB.TableName getTableName() {
        return tableName_;
      }
      /**
       * <code>optional .TableName table_name = 1;</code>
       */
      public Builder setTableName(org.hbase.async.generated.HBasePB.TableName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        tableName_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .TableName table_name = 1;</code>
       */
      public Builder setTableName(
          org.hbase.async.generated.HBasePB.TableName.Builder builderForValue) {
        tableName_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .TableName table_name = 1;</code>
       */
      public Builder mergeTableName(org.hbase.async.generated.HBasePB.TableName value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            tableName_ != org.hbase.async.generated.HBasePB.TableName.getDefaultInstance()) {
          tableName_ =
            org.hbase.async.generated.HBasePB.TableName.newBuilder(tableName_).mergeFrom(value).buildPartial();
        } else {
          tableName_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .TableName table_name = 1;</code>
       */
      public Builder clearTableName() {
        tableName_ = org.hbase.async.generated.HBasePB.TableName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional .ServerName lock_owner = 2;
      private org.hbase.async.generated.HBasePB.ServerName lockOwner_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();
      /**
       * <code>optional .ServerName lock_owner = 2;</code>
       */
      public boolean hasLockOwner() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .ServerName lock_owner = 2;</code>
       */
      public org.hbase.async.generated.HBasePB.ServerName getLockOwner() {
        return lockOwner_;
      }
      /**
       * <code>optional .ServerName lock_owner = 2;</code>
       */
      public Builder setLockOwner(org.hbase.async.generated.HBasePB.ServerName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        lockOwner_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .ServerName lock_owner = 2;</code>
       */
      public Builder setLockOwner(
          org.hbase.async.generated.HBasePB.ServerName.Builder builderForValue) {
        lockOwner_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .ServerName lock_owner = 2;</code>
       */
      public Builder mergeLockOwner(org.hbase.async.generated.HBasePB.ServerName value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            lockOwner_ != org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance()) {
          lockOwner_ =
            org.hbase.async.generated.HBasePB.ServerName.newBuilder(lockOwner_).mergeFrom(value).buildPartial();
        } else {
          lockOwner_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .ServerName lock_owner = 2;</code>
       */
      public Builder clearLockOwner() {
        lockOwner_ = org.hbase.async.generated.HBasePB.ServerName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional int64 thread_id = 3;
      private long threadId_ ;
      /**
       * <code>optional int64 thread_id = 3;</code>
       */
      public boolean hasThreadId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 thread_id = 3;</code>
       */
      public long getThreadId() {
        return threadId_;
      }
      /**
       * <code>optional int64 thread_id = 3;</code>
       */
      public Builder setThreadId(long value) {
        bitField0_ |= 0x00000004;
        threadId_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 thread_id = 3;</code>
       */
      public Builder clearThreadId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        threadId_ = 0L;
        
        return this;
      }

      // optional bool is_shared = 4;
      private boolean isShared_ ;
      /**
       * <code>optional bool is_shared = 4;</code>
       */
      public boolean hasIsShared() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool is_shared = 4;</code>
       */
      public boolean getIsShared() {
        return isShared_;
      }
      /**
       * <code>optional bool is_shared = 4;</code>
       */
      public Builder setIsShared(boolean value) {
        bitField0_ |= 0x00000008;
        isShared_ = value;
        
        return this;
      }
      /**
       * <code>optional bool is_shared = 4;</code>
       */
      public Builder clearIsShared() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isShared_ = false;
        
        return this;
      }

      // optional string purpose = 5;
      private java.lang.Object purpose_ = "";
      /**
       * <code>optional string purpose = 5;</code>
       */
      public boolean hasPurpose() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string purpose = 5;</code>
       */
      public java.lang.String getPurpose() {
        java.lang.Object ref = purpose_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          purpose_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string purpose = 5;</code>
       */
      public com.google.protobuf.ByteString
          getPurposeBytes() {
        java.lang.Object ref = purpose_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          purpose_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string purpose = 5;</code>
       */
      public Builder setPurpose(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        purpose_ = value;
        
        return this;
      }
      /**
       * <code>optional string purpose = 5;</code>
       */
      public Builder clearPurpose() {
        bitField0_ = (bitField0_ & ~0x00000010);
        purpose_ = getDefaultInstance().getPurpose();
        
        return this;
      }
      /**
       * <code>optional string purpose = 5;</code>
       */
      public Builder setPurposeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        purpose_ = value;
        
        return this;
      }

      // optional int64 create_time = 6;
      private long createTime_ ;
      /**
       * <code>optional int64 create_time = 6;</code>
       */
      public boolean hasCreateTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int64 create_time = 6;</code>
       */
      public long getCreateTime() {
        return createTime_;
      }
      /**
       * <code>optional int64 create_time = 6;</code>
       */
      public Builder setCreateTime(long value) {
        bitField0_ |= 0x00000020;
        createTime_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 create_time = 6;</code>
       */
      public Builder clearCreateTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        createTime_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TableLock)
    }

    static {
      defaultInstance = new TableLock(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:TableLock)
  }

  public interface SwitchStateOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional bool enabled = 1;
    /**
     * <code>optional bool enabled = 1;</code>
     */
    boolean hasEnabled();
    /**
     * <code>optional bool enabled = 1;</code>
     */
    boolean getEnabled();
  }
  /**
   * Protobuf type {@code SwitchState}
   *
   * <pre>
   **
   * State of the switch.
   * </pre>
   */
  public static final class SwitchState extends
      com.google.protobuf.GeneratedMessageLite
      implements SwitchStateOrBuilder {
    // Use SwitchState.newBuilder() to construct.
    private SwitchState(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private SwitchState(boolean noInit) {}

    private static final SwitchState defaultInstance;
    public static SwitchState getDefaultInstance() {
      return defaultInstance;
    }

    public SwitchState getDefaultInstanceForType() {
      return defaultInstance;
    }

    private SwitchState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              enabled_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<SwitchState> PARSER =
        new com.google.protobuf.AbstractParser<SwitchState>() {
      public SwitchState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SwitchState(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SwitchState> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool enabled = 1;
    public static final int ENABLED_FIELD_NUMBER = 1;
    private boolean enabled_;
    /**
     * <code>optional bool enabled = 1;</code>
     */
    public boolean hasEnabled() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool enabled = 1;</code>
     */
    public boolean getEnabled() {
      return enabled_;
    }

    private void initFields() {
      enabled_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, enabled_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, enabled_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.hbase.async.generated.ZooKeeperPB.SwitchState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.hbase.async.generated.ZooKeeperPB.SwitchState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code SwitchState}
     *
     * <pre>
     **
     * State of the switch.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.hbase.async.generated.ZooKeeperPB.SwitchState, Builder>
        implements org.hbase.async.generated.ZooKeeperPB.SwitchStateOrBuilder {
      // Construct using org.hbase.async.generated.ZooKeeperPB.SwitchState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        enabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.hbase.async.generated.ZooKeeperPB.SwitchState getDefaultInstanceForType() {
        return org.hbase.async.generated.ZooKeeperPB.SwitchState.getDefaultInstance();
      }

      public org.hbase.async.generated.ZooKeeperPB.SwitchState build() {
        org.hbase.async.generated.ZooKeeperPB.SwitchState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.hbase.async.generated.ZooKeeperPB.SwitchState buildPartial() {
        org.hbase.async.generated.ZooKeeperPB.SwitchState result = new org.hbase.async.generated.ZooKeeperPB.SwitchState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.enabled_ = enabled_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.hbase.async.generated.ZooKeeperPB.SwitchState other) {
        if (other == org.hbase.async.generated.ZooKeeperPB.SwitchState.getDefaultInstance()) return this;
        if (other.hasEnabled()) {
          setEnabled(other.getEnabled());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.hbase.async.generated.ZooKeeperPB.SwitchState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.hbase.async.generated.ZooKeeperPB.SwitchState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool enabled = 1;
      private boolean enabled_ ;
      /**
       * <code>optional bool enabled = 1;</code>
       */
      public boolean hasEnabled() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool enabled = 1;</code>
       */
      public boolean getEnabled() {
        return enabled_;
      }
      /**
       * <code>optional bool enabled = 1;</code>
       */
      public Builder setEnabled(boolean value) {
        bitField0_ |= 0x00000001;
        enabled_ = value;
        
        return this;
      }
      /**
       * <code>optional bool enabled = 1;</code>
       */
      public Builder clearEnabled() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enabled_ = false;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SwitchState)
    }

    static {
      defaultInstance = new SwitchState(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SwitchState)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
